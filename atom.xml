<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>luyaJ的小博客</title>
  <subtitle>talk is cheap,show me the code</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-15T08:35:31.077Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>luyaJ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>学习linux之Docker</title>
    <link href="http://yoursite.com/2017/12/07/%E5%AD%A6%E4%B9%A0linux%E4%B9%8BDocker/"/>
    <id>http://yoursite.com/2017/12/07/学习linux之Docker/</id>
    <published>2017-12-07T06:43:19.000Z</published>
    <updated>2017-12-15T08:35:31.077Z</updated>
    
    <content type="html"><![CDATA[<p>Docker是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化，容器是完全使用沙箱机制，相互之间不会有任何接口。<br><a id="more"></a></p>
<h1 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我这里学习的docker，是在ubuntu下使用的，对于ubuntu安装中的一些问题记录在这里。</p>
<p><a href="https://www.ubuntu.com/download/desktop" target="_blank" rel="external">ubuntu镜像文件下载地址</a></p>
<p>安装时，选择其他选项（即可以自己创建、调整分区）；继而出现安装类型，自己进行分区：</p>
<p><img src="http://oxv4lmd01.bkt.clouddn.com/ubuntu-install.png" alt="分区1"></p>
<p><img src="http://oxv4lmd01.bkt.clouddn.com/ubuntu-install2.png" alt="分区2"></p>
<p><img src="http://oxv4lmd01.bkt.clouddn.com/ubuntu-install3.png" alt="安装类型"></p>
<p>在这个过程中，我发现自己的界面不能完全显示（有一部分挡在下面，怎么拉都看不到），解决办法很简单：按键<code>Alt+F7</code>就可以拖动看到下面的内容。</p>
<h2 id="自适应客户机"><a href="#自适应客户机" class="headerlink" title="自适应客户机"></a>自适应客户机</h2><p>操作方法见网址：<a href="https://jingyan.baidu.com/article/fc07f98977b60f12ffe5199b.html" target="_blank" rel="external">解决屏幕太小问题</a></p>
<p>安装好后，点击最上方– 查看 –&gt; 立即适应客户机</p>
<h1 id="安装和使用docker"><a href="#安装和使用docker" class="headerlink" title="安装和使用docker"></a>安装和使用docker</h1><p>安装之前，我们首先确保自己的linux系统内核版本高于3.10，并且系统是64位:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@izuf6alst6rugagpxl8wizz ~]<span class="comment"># uname -ir</span></div><div class="line">3.10.0-514.26.2.el7.x86_64 x86_64</div></pre></td></tr></table></figure></p>
<p>在root下安装docker，使用命令(下面的运行结果是我第二次运行的结果，docker安装完成):<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@izuf6alst6rugagpxl8wizz ~]<span class="comment"># sudo yum -y install docker</span></div><div class="line">Loaded plugins: fastestmirror</div><div class="line">Loading mirror speeds from cached hostfile</div><div class="line">Package 2:docker-1.12.6-68.gitec8512b.el7.centos.x86_64 already installed and latest version</div><div class="line">Nothing to <span class="keyword">do</span></div></pre></td></tr></table></figure></p>
<p>接下来，启动Docker后台服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@izuf6alst6rugagpxl8wizz ~]<span class="comment"># sudo service docker start</span></div><div class="line">Redirecting to /bin/systemctl start  docker.service</div></pre></td></tr></table></figure></p>
<p>下一步，测试运行hello-world,如果本地没有hello-world这个镜像，就会下载一个hello-world的镜像，并在容器内运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@izuf6alst6rugagpxl8wizz ~]<span class="comment"># sudo docker run hello-world</span></div></pre></td></tr></table></figure></p>
<h2 id="交互式容器"><a href="#交互式容器" class="headerlink" title="交互式容器"></a>交互式容器</h2><p>进入交互式容器，使用命令<code>docker run -i -t ubuntu /bin/bash</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 启动容器</span></div><div class="line">root@luyaj-virtual-machine:/home/luyaj<span class="comment"># docker run -i -t ubuntu /bin/bash</span></div><div class="line">root@1ed36419aeb9:/<span class="comment"># ps -ef</span></div><div class="line">UID        PID  PPID  C STIME TTY          TIME CMD</div><div class="line">root         1     0  0 01:23 ?        00:00:00 /bin/bash</div><div class="line">root         9     1  0 01:25 ?        00:00:00 ps -ef</div><div class="line">root@1ed36419aeb9:/<span class="comment"># exit</span></div><div class="line"><span class="built_in">exit</span></div><div class="line">root@luyaj-virtual-machine:/home/luyaj<span class="comment">#</span></div></pre></td></tr></table></figure></p>
<h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器:"></a>查看容器:</h3><p><code>docker ps [-a][-l]</code>  &amp;&amp; <code>docker inspect [id]</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 显示进程</span></div><div class="line">root@luyaj-virtual-machine:/home/luyaj<span class="comment"># docker ps</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line">root@luyaj-virtual-machine:/home/luyaj<span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                          PORTS               NAMES</div><div class="line">1ed36419aeb9        ubuntu              <span class="string">"/bin/bash"</span>         3 minutes ago       Exited (0) About a minute ago                       practical_swanson</div><div class="line">b934d23e6789        ubuntu              <span class="string">"echo luya"</span>         11 minutes ago      Exited (0) 11 minutes ago                           kind_hawking</div><div class="line">9e7de9e1f31b        ubuntu              <span class="string">"echo hello"</span>        13 minutes ago      Exited (0) 13 minutes ago                           peaceful_kowalevski</div><div class="line"></div><div class="line"><span class="comment"># 显示配置信息</span></div><div class="line">root@luyaj-virtual-machine:/home/luyaj<span class="comment"># docker inspect 9e7de9e1f31b </span></div><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="string">"Id"</span>: <span class="string">"9e7de9e1f31b4d63573b5dd962c23914085566a3c24fc55550027dd459d82036"</span>,</div><div class="line">        <span class="string">"Created"</span>: <span class="string">"2017-12-12T01:13:35.811132019Z"</span>,</div><div class="line">        <span class="string">"Path"</span>: <span class="string">"echo"</span>,</div><div class="line">        <span class="string">"Args"</span>: [</div><div class="line">            <span class="string">"hello"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"State"</span>: &#123;</div><div class="line">            <span class="string">"Status"</span>: <span class="string">"exited"</span>,</div><div class="line">            <span class="string">"Running"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="string">"Paused"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="string">"Restarting"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="string">"OOMKilled"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="string">"Dead"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="string">"Pid"</span>: 0,</div><div class="line">            <span class="string">"ExitCode"</span>: 0,</div><div class="line">            <span class="string">"Error"</span>: <span class="string">""</span>,</div><div class="line">            <span class="string">"StartedAt"</span>: <span class="string">"2017-12-12T01:13:38.847825304Z"</span>,</div><div class="line">            <span class="string">"FinishedAt"</span>: <span class="string">"2017-12-12T01:13:38.893957073Z"</span></div><div class="line">        &#125;     </div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="自定义容器名"><a href="#自定义容器名" class="headerlink" title="自定义容器名"></a>自定义容器名</h3><p><code>docker run --name=自定义名 -i -t IMAGE /bin/bash</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 自定义容器名</span></div><div class="line">root@luyaj-virtual-machine:/home/luyaj<span class="comment"># docker run --name=container2 -i -t ubuntu /bin/bash</span></div><div class="line">root@9ec00bfc984d:/<span class="comment"># exit</span></div><div class="line"><span class="built_in">exit</span></div><div class="line"></div><div class="line"><span class="comment"># 查看当前容器进程</span></div><div class="line">root@luyaj-virtual-machine:/home/luyaj<span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</div><div class="line">9ec00bfc984d        ubuntu              <span class="string">"/bin/bash"</span>         25 seconds ago      Exited (0) 9 seconds ago                       container2</div><div class="line">1ed36419aeb9        ubuntu              <span class="string">"/bin/bash"</span>         10 hours ago        Exited (0) 10 hours ago                        practical_swanson</div><div class="line">b934d23e6789        ubuntu              <span class="string">"echo luya"</span>         10 hours ago        Exited (0) 10 hours ago                        kind_hawking</div><div class="line">9e7de9e1f31b        ubuntu              <span class="string">"echo hello"</span>        10 hours ago        Exited (0) 10 hours ago                        peaceful_kowalevski</div><div class="line"></div><div class="line"><span class="comment"># 显示配置信息</span></div><div class="line">root@luyaj-virtual-machine:/home/luyaj<span class="comment"># docker inspect container2</span></div></pre></td></tr></table></figure>
<h3 id="重新启动停止的容器"><a href="#重新启动停止的容器" class="headerlink" title="重新启动停止的容器"></a>重新启动停止的容器</h3><p><code>docker start [-i] 容器名</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 重新启动容器</span></div><div class="line">root@luyaj-virtual-machine:/home/luyaj<span class="comment"># docker start -i container2</span></div><div class="line">root@9ec00bfc984d:/<span class="comment"># exit</span></div><div class="line"><span class="built_in">exit</span></div><div class="line">root@luyaj-virtual-machine:/home/luyaj<span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES</div><div class="line">9ec00bfc984d        ubuntu              <span class="string">"/bin/bash"</span>         5 minutes ago       Exited (0) 10 seconds ago                       container2</div><div class="line">1ed36419aeb9        ubuntu              <span class="string">"/bin/bash"</span>         10 hours ago        Exited (0) 10 hours ago                         practical_swanson</div><div class="line">b934d23e6789        ubuntu              <span class="string">"echo luya"</span>         10 hours ago        Exited (0) 10 hours ago                         kind_hawking</div><div class="line">9e7de9e1f31b        ubuntu              <span class="string">"echo hello"</span>        10 hours ago        Exited (0) 10 hours ago                         peaceful_kowalevski</div></pre></td></tr></table></figure>
<h3 id="删除停止的容器"><a href="#删除停止的容器" class="headerlink" title="删除停止的容器"></a>删除停止的容器</h3><p>删除停止的容器：<code>docker rm 容器名</code>。（只能删除已经停止的容器，不能删除运行中的容器）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">root@luyaj-virtual-machine:/home/luyaj<span class="comment"># docker rm container2</span></div><div class="line">container2</div><div class="line">root@luyaj-virtual-machine:/home/luyaj<span class="comment"># docker ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                    PORTS               NAMES</div><div class="line">1ed36419aeb9        ubuntu              <span class="string">"/bin/bash"</span>         10 hours ago        Exited (0) 10 hours ago                       practical_swanson</div><div class="line">b934d23e6789        ubuntu              <span class="string">"echo luya"</span>         10 hours ago        Exited (0) 10 hours ago                       kind_hawking</div><div class="line">9e7de9e1f31b        ubuntu              <span class="string">"echo hello"</span>        10 hours ago        Exited (0) 10 hours ago                       peaceful_kowalevski</div></pre></td></tr></table></figure>
<h2 id="守护式容器"><a href="#守护式容器" class="headerlink" title="守护式容器"></a>守护式容器</h2><h3 id="以守护形式运行容器"><a href="#以守护形式运行容器" class="headerlink" title="以守护形式运行容器"></a>以守护形式运行容器</h3><p>命令：<code>docker run -i -t IMAGE /bin/bash</code>，接下来使用<code>Ctrl+P, Ctrl+Q</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">root@luyaj-virtual-machine:/home/luyaj<span class="comment"># docker run -i -t ubuntu /bin/bash</span></div><div class="line"></div><div class="line"><span class="comment"># Ctrl+P、Ctrl+Q（转到后台）, 换行</span></div><div class="line">root@d7f3a54f0db4:/<span class="comment"># root@luyaj-virtual-machine:/home/luyaj# </span></div><div class="line"></div><div class="line"><span class="comment"># 可以查看到这几个容器当前还在运行</span></div><div class="line">root@luyaj-virtual-machine:/home/luyaj<span class="comment"># docker ps</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED              STATUS              PORTS               NAMES</div><div class="line">d7f3a54f0db4        ubuntu              <span class="string">"/bin/bash"</span>         About a minute ago   Up About a minute                       affectionate_beaver</div><div class="line">5e724ab47af5        ubuntu              <span class="string">"/bin/bash"</span>         4 minutes ago        Up 4 minutes                            amazing_franklin</div></pre></td></tr></table></figure>
<h3 id="附加到运行中的容器"><a href="#附加到运行中的容器" class="headerlink" title="附加到运行中的容器"></a>附加到运行中的容器</h3><p>命令：<code>docker attach 容器名</code>.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">root@luyaj-virtual-machine:/home/luyaj<span class="comment"># docker attach d7f3a54f0db4 </span></div><div class="line">root@d7f3a54f0db4:/<span class="comment"># root@luyaj-virtual-machine:/home/luyaj# </span></div><div class="line"></div><div class="line"><span class="comment"># 可以看到有两个容器在运行</span></div><div class="line">root@luyaj-virtual-machine:/home/luyaj<span class="comment"># docker ps</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line">d7f3a54f0db4        ubuntu              <span class="string">"/bin/bash"</span>         6 minutes ago       Up 6 minutes                            affectionate_beaver</div><div class="line">5e724ab47af5        ubuntu              <span class="string">"/bin/bash"</span>         10 minutes ago      Up 10 minutes                           amazing_franklin</div><div class="line"></div><div class="line"><span class="comment"># 进入此命令</span></div><div class="line">root@luyaj-virtual-machine:/home/luyaj<span class="comment"># docker attach d7f3a54f0db4 </span></div><div class="line"></div><div class="line"><span class="comment"># 退出</span></div><div class="line">root@d7f3a54f0db4:/<span class="comment"># exit</span></div><div class="line"><span class="built_in">exit</span></div><div class="line"></div><div class="line"><span class="comment"># 可以看到上面的容器停止了</span></div><div class="line">root@luyaj-virtual-machine:/home/luyaj<span class="comment"># docker ps</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line">5e724ab47af5        ubuntu              <span class="string">"/bin/bash"</span>         11 minutes ago      Up 11 minutes                           amazing_franklin</div></pre></td></tr></table></figure>
<h3 id="停止守护式容器"><a href="#停止守护式容器" class="headerlink" title="停止守护式容器"></a>停止守护式容器</h3><p>发送一个信号，等待停止：<code>docker stop 容器名</code><br>直接杀死：<code>docker kill 容器名</code></p>
<h1 id="在容器中使用Nginx部署静态网站"><a href="#在容器中使用Nginx部署静态网站" class="headerlink" title="在容器中使用Nginx部署静态网站"></a>在容器中使用Nginx部署静态网站</h1><p>Nginx部署流程如下：</p>
<ul>
<li>创建映射80端口的交互式容器</li>
<li>安装Nginx</li>
<li>安装文本编辑器vim</li>
<li>创建静态页面</li>
<li>修改Nginx配置文件</li>
<li>运行Nginx</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 创建带端口映射的交互容器，命名为"web"，使用ubuntu为系统。</span></div><div class="line">root@luyaj-virtual-machine:/home/luyaj<span class="comment"># docker run -p 80 --name web1 -i -t ubuntu  /bin/bash</span></div><div class="line"></div><div class="line"><span class="comment"># 更新包</span></div><div class="line">root@416f6aee01e7:/<span class="comment"># apt-get update</span></div><div class="line"></div><div class="line"><span class="comment"># 安装Nginx</span></div><div class="line">root@416f6aee01e7:/<span class="comment"># apt install -y nginx</span></div><div class="line"></div><div class="line"><span class="comment"># 安装vim</span></div><div class="line">root@416f6aee01e7:/<span class="comment"># apt intall -y vim</span></div><div class="line"></div><div class="line"><span class="comment"># 创建静态页面（在index.html中填写前端代码）</span></div><div class="line">root@fa38c10136a0:/<span class="comment"># mkdir -p /var/www/html</span></div><div class="line">root@fa38c10136a0:/<span class="comment"># cd /var/www/html</span></div><div class="line">root@fa38c10136a0:/var/www/html<span class="comment"># vim index.html</span></div><div class="line"></div><div class="line"><span class="comment"># 使用whereis查看nginx在哪</span></div><div class="line">root@f3cfa277a97e:/var/www/html<span class="comment"># whereis nginx</span></div><div class="line">nginx: /usr/sbin/nginx /etc/nginx /usr/share/nginx</div><div class="line"></div><div class="line"><span class="comment"># 打开文件default</span></div><div class="line">root@f3cfa277a97e:/var/www/html<span class="comment"># ls /etc/nginx</span></div><div class="line">conf.d        fastcgi_params  koi-win     nginx.conf    scgi_params      sites-enabled  uwsgi_params</div><div class="line">fastcgi.conf  koi-utf         mime.types  proxy_params  sites-available  snippets       win-utf</div><div class="line">root@f3cfa277a97e:/var/www/html<span class="comment"># ls /etc/nginx/sites-enabled </span></div><div class="line">default</div><div class="line">root@f3cfa277a97e:/var/www/html<span class="comment"># vim /etc/nginx/sites-enabled/default</span></div></pre></td></tr></table></figure>
<p>在default文件，将root值修改为我们创建的静态网站的位置（/var/www/html）,操作如图:</p>
<p><img src="http://oxv4lmd01.bkt.clouddn.com/docker_default_root.png" alt="修改root"></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 切换到根目录，运行nginx，使用ps命令在容器查中看当前的进程</span></div><div class="line">root@f3cfa277a97e:/var/www/html<span class="comment"># cd /</span></div><div class="line">root@f3cfa277a97e:/<span class="comment"># nginx</span></div><div class="line">root@f3cfa277a97e:/<span class="comment"># ps -ef</span></div><div class="line">UID        PID  PPID  C STIME TTY          TIME CMD</div><div class="line">root         1     0  0 12:53 ?        00:00:00 bash</div><div class="line">root        18     1  0 13:08 ?        00:00:00 nginx: master process nginx</div><div class="line">www-data    19    18  0 13:08 ?        00:00:00 nginx: worker process</div><div class="line">root        20     1  0 13:09 ?        00:00:00 ps -ef</div><div class="line"></div><div class="line"><span class="comment"># Ctrl+P,Ctrl+Q. “docker ps”或“docker port 容器名”可以看到容器映射的端口</span></div><div class="line">root@f3cfa277a97e:/<span class="comment"># [root@izuf6alst6rugagpxl8wizz ~]# </span></div><div class="line">[root@izuf6alst6rugagpxl8wizz ~]<span class="comment"># docker ps</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                   NAMES</div><div class="line">0e10487869ea        ubuntu              <span class="string">"/bin/bash"</span>         30 minutes ago      Up 30 minutes                               silly_bose</div><div class="line">f3cfa277a97e        ubuntu              <span class="string">"bash"</span>              35 hours ago        Up 17 minutes       0.0.0.0:32769-&gt;80/tcp   web1</div><div class="line">8f8c5c20e073        ubuntu              <span class="string">"bash"</span>              35 hours ago        Up 35 hours                                 nostalgic_davinci</div><div class="line">[root@izuf6alst6rugagpxl8wizz ~]<span class="comment"># docker port web1</span></div><div class="line">80/tcp -&gt; 0.0.0.0:32769</div><div class="line"></div><div class="line"><span class="comment"># 运行</span></div><div class="line">[root@izuf6alst6rugagpxl8wizz ~]<span class="comment"># curl http://127.0.0.1:32769</span></div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;nginx <span class="keyword">in</span> docker&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;h1&gt;hello, first website <span class="keyword">in</span> docker!&lt;/h1&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>可以看到，出现了我们编辑的页面。我们也可以在浏览器中访问页面。由于我这里是在云服务器上开启的容器，所以使用云服务器的ip地址+端口号，即可成功访问页面。</p>
<p>上面我们是用宿主机的ip地址来查看的网页，这里我们还可以用容器的ip地址查看页面：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@izuf6alst6rugagpxl8wizz ~]<span class="comment"># docker inspect web1</span></div></pre></td></tr></table></figure></p>
<p>运行结果如下，找到ip地址（不需要指定端口号，默认为80端口）：</p>
<p><img src="http://oxv4lmd01.bkt.clouddn.com/docker_curl.png" alt="代码"></p>
<p>到这里我们就完成了一个静态页面！下面来看看怎么运行nginx。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 停用容器</span></div><div class="line">[root@izuf6alst6rugagpxl8wizz ~]<span class="comment"># docker stop web1</span></div><div class="line">web1</div><div class="line"></div><div class="line"><span class="comment"># 开启容器</span></div><div class="line">[root@izuf6alst6rugagpxl8wizz ~]<span class="comment"># docker start -i web1</span></div><div class="line"></div><div class="line"><span class="comment"># 可以看到nginx没有开启</span></div><div class="line">root@f3cfa277a97e:/<span class="comment"># ps -ef</span></div><div class="line">UID        PID  PPID  C STIME TTY          TIME CMD</div><div class="line">root         1     0  0 14:19 ?        00:00:00 bash</div><div class="line">root         9     1  0 14:20 ?        00:00:00 ps -ef</div><div class="line"></div><div class="line"><span class="comment"># exec命令启动nginx，查看</span></div><div class="line">root@f3cfa277a97e:/<span class="comment"># [root@izuf6alst6rugagpxl8wizz ~]# </span></div><div class="line">[root@izuf6alst6rugagpxl8wizz ~]<span class="comment"># docker exec web1 nginx</span></div><div class="line">[root@izuf6alst6rugagpxl8wizz ~]<span class="comment"># docker top web1</span></div><div class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</div><div class="line">root                12250               12227               0                   22:19               pts/2               00:00:00            bash</div><div class="line">root                12370               1                   0                   22:20               ?                   00:00:00            nginx: master process nginx</div><div class="line">33                  12371               12370               0                   22:20               ?                   00:00:00            nginx: worker process</div><div class="line"></div><div class="line"><span class="comment"># 运行网站（会发现有问题），使用inspect查看容器，重新输入地址，就成功了。</span></div><div class="line">[root@izuf6alst6rugagpxl8wizz ~]<span class="comment"># http://172.17.0.3</span></div><div class="line">-bash: http://172.17.0.3: No such file or directory</div><div class="line">[root@izuf6alst6rugagpxl8wizz ~]<span class="comment"># docker inspect</span></div><div class="line">/usr/bin/docker-current: <span class="string">"inspect"</span> requires a minimum of 1 argument.</div><div class="line">See <span class="string">'/usr/bin/docker-current inspect --help'</span>.</div><div class="line"></div><div class="line">Usage:  docker inspect [OPTIONS] CONTAINER|IMAGE|TASK [CONTAINER|IMAGE|TASK...]</div><div class="line"></div><div class="line">Return low-level information on a container, image or task</div><div class="line">[root@izuf6alst6rugagpxl8wizz ~]<span class="comment"># docker inspect web1</span></div></pre></td></tr></table></figure>
<p>友情链接：<a href="https://segmentfault.com/a/1190000012161773" target="_blank" rel="external">docker上手并部署Ngnix</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化，容器是完全使用沙箱机制，相互之间不会有任何接口。&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>《指尖上行》移动前端开发之路</title>
    <link href="http://yoursite.com/2017/11/29/%E3%80%8A%E6%8C%87%E5%B0%96%E4%B8%8A%E8%A1%8C%E3%80%8B%E7%A7%BB%E5%8A%A8%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF/"/>
    <id>http://yoursite.com/2017/11/29/《指尖上行》移动前端开发之路/</id>
    <published>2017-11-29T12:50:43.000Z</published>
    <updated>2017-12-04T07:28:09.023Z</updated>
    
    <content type="html"><![CDATA[<p>本书从基础的移动页面布局和常见前端框架，到进阶的移动页面动画技术、Web API及性能优化，再到各类实战案例剖析等，讲解了技术层面的各类知识和心得。另外，书中还介绍了常用的数据分析方法，以验证项目效果。<br><a id="more"></a></p>
<h2 id="移动页面开发"><a href="#移动页面开发" class="headerlink" title="移动页面开发"></a>移动页面开发</h2><h3 id="设备像素"><a href="#设备像素" class="headerlink" title="设备像素"></a>设备像素</h3><p>设备像素有两个：</p>
<ol>
<li>物理像素：指设备显示屏中使用的最小显示单元，即<strong>屏幕分辨率</strong>（如：iphone5的屏幕分辨率是640像素*1136像素）</li>
<li>独立像素：指Web编程中的逻辑像素，即<strong>CSS像素</strong>（如：iphone5的CSS像素是320像素*568像素）</li>
</ol>
<h3 id="像素密度-PPI"><a href="#像素密度-PPI" class="headerlink" title="像素密度(PPI)"></a>像素密度(PPI)</h3><p>PPI(Pixels Per Inch)是用来表示设备每英寸所拥有的物理像素数目。这个数值越高，屏幕越清晰。公式如下：<br>PPI = (sqrt(屏幕分辨率宽^2+屏幕分辨率高^2))/4;</p>
<p>当显示屏的PPI超过了某一数值时，人的肉眼就无法分辨其中的单独像素，这就是<strong>Retina显示屏</strong>。</p>
<h3 id="设备像素比-DPR"><a href="#设备像素比-DPR" class="headerlink" title="设备像素比(DPR)"></a>设备像素比(DPR)</h3><p>DPR(Device Pixel Ratio)是指物理像素和CSS像素的比例。</p>
<p>对于常规屏来说，物理像素和CSS像素的比值是1:1，但是在Retina屏幕设备中，一个CSS像素可能等于多个物理像素。（iphone从4代开始DPR基本为2，plus除外）</p>
<h3 id="设置Viewport"><a href="#设置Viewport" class="headerlink" title="设置Viewport"></a>设置Viewport</h3><p>Viewport有三种：Layout Viewport, Visual Viewport, Ideal Viewport(理想的).</p>
<p>为了将浏览器默认的Layout Viewport宽度设置为Ideal Viewport的宽度，在开发移动页面时一般都会在head标签中写入以下代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>总结：</p>
<ul>
<li><a href="http://screensiz.es" target="_blank" rel="external">关于设备像素、设备密度及设备像素比</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本书从基础的移动页面布局和常见前端框架，到进阶的移动页面动画技术、Web API及性能优化，再到各类实战案例剖析等，讲解了技术层面的各类知识和心得。另外，书中还介绍了常用的数据分析方法，以验证项目效果。&lt;br&gt;
    
    </summary>
    
      <category term="阅读笔记" scheme="http://yoursite.com/categories/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="书籍" scheme="http://yoursite.com/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>学习linux之第二篇</title>
    <link href="http://yoursite.com/2017/11/02/%E5%AD%A6%E4%B9%A0linux%E4%B9%8B%E7%AC%AC%E4%BA%8C%E7%AF%87/"/>
    <id>http://yoursite.com/2017/11/02/学习linux之第二篇/</id>
    <published>2017-11-02T10:35:28.000Z</published>
    <updated>2017-12-23T09:32:09.771Z</updated>
    
    <content type="html"><![CDATA[<p>这是linux后半部分的学习，记录RPM包以及shell，正则表达式等内容。</p>
<a id="more"></a>
<h1 id="安装rpm包及源码包"><a href="#安装rpm包及源码包" class="headerlink" title="安装rpm包及源码包"></a>安装rpm包及源码包</h1><h2 id="RPM-RedHat-Package-Manager-工具"><a href="#RPM-RedHat-Package-Manager-工具" class="headerlink" title="RPM(RedHat Package Manager)工具"></a>RPM(RedHat Package Manager)工具</h2><p>RPM是以一种数据库记录的方式来将我们需要的套件安装到linux主机的一套管理程序。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[root@localhost jly]<span class="comment"># mount /dev/cdrom /mnt/</span></div><div class="line">mount: /dev/sr0 写保护，将以只读方式挂载</div><div class="line">[root@localhost jly]<span class="comment"># ls /mnt/</span></div><div class="line">CentOS_BuildTag  GPL       LiveOS    RPM-GPG-KEY-CentOS-7</div><div class="line">EFI              images    Packages  RPM-GPG-KEY-CentOS-Testing-7</div><div class="line">EULA             isolinux  repodata  TRANS.TBL</div><div class="line">[root@localhost jly]<span class="comment"># ls /mnt/Packages/|head</span></div><div class="line">389-ds-base-1.3.5.10-11.el7.x86_64.rpm</div><div class="line">389-ds-base-libs-1.3.5.10-11.el7.x86_64.rpm</div><div class="line">abattis-cantarell-fonts-0.0.16-3.el7.noarch.rpm</div><div class="line">abrt-2.1.11-45.el7.centos.x86_64.rpm</div><div class="line">abrt-addon-ccpp-2.1.11-45.el7.centos.x86_64.rpm</div><div class="line">abrt-addon-kerneloops-2.1.11-45.el7.centos.x86_64.rpm</div><div class="line">abrt-addon-pstoreoops-2.1.11-45.el7.centos.x86_64.rpm</div><div class="line">abrt-addon-python-2.1.11-45.el7.centos.x86_64.rpm</div><div class="line">abrt-addon-vmcore-2.1.11-45.el7.centos.x86_64.rpm</div><div class="line">abrt-addon-xorg-2.1.11-45.el7.centos.x86_64.rpm</div></pre></td></tr></table></figure>
<h3 id="安装和升级一个rpm包"><a href="#安装和升级一个rpm包" class="headerlink" title="安装和升级一个rpm包"></a>安装和升级一个rpm包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">[root@localhost jly]<span class="comment"># rpm -ivh /mnt/Packages/abattis-cantarell-fonts-0.0.16-3.el7.noarch.rpm </span></div><div class="line">准备中...                          <span class="comment">################################# [100%]</span></div><div class="line">    软件包 abattis-cantarell-fonts-0.0.16-3.el7.noarch 已经安装</div><div class="line"></div><div class="line"><span class="comment"># 升级包(-U表示升级)</span></div><div class="line">[root@localhost jly]<span class="comment"># rpm -Uvh /mnt/Packages/abattis-cantarell-fonts-0.0.16-3.el7.noarch.rpm </span></div><div class="line"></div><div class="line"><span class="comment"># 卸载包</span></div><div class="line">[root@localhost jly]<span class="comment"># rpm -e /mnt/Packages/</span></div><div class="line"></div><div class="line"><span class="comment"># 查询一个包是否已安装</span></div><div class="line">[root@localhost jly]<span class="comment"># rpm -q abattis-cantarell-fonts</span></div><div class="line">abattis-cantarell-fonts-0.0.16-3.el7.noarch</div><div class="line"></div><div class="line"><span class="comment"># 查询当前系统已安装的rpm包</span></div><div class="line">root@localhost jly]<span class="comment"># rpm -qa</span></div><div class="line"></div><div class="line"><span class="comment"># 得到一个已安装的rpm包的相关信息</span></div><div class="line">[root@localhost jly]<span class="comment"># rpm -qi abattis-cantarell-fonts</span></div></pre></td></tr></table></figure>
<ul>
<li><code>-i</code>:表示安装</li>
<li><code>-v</code>:表示可视化</li>
<li><code>-h</code>:表示显示安装进度</li>
</ul>
<p>另外在安装rpm包时，常用的附带参数还包括：<br><code>--force</code>:表示强制安装，即使覆盖属于其他包的文件也要安装。<br><code>--nodeps</code>:表示当要安装的rpm包依赖于其他包时，即使其他包没有安装，也要安装这个包。</p>
<h2 id="yum工具"><a href="#yum工具" class="headerlink" title="yum工具"></a>yum工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 列出所有可用rpm包</span></div><div class="line">[root@localhost jly]<span class="comment"># yum list</span></div><div class="line"></div><div class="line"><span class="comment"># 搜索一个包</span></div><div class="line">[root@localhost jly]<span class="comment"># yum search vim</span></div><div class="line">已加载插件：fastestmirror, langpacks</div><div class="line">Repodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast</div><div class="line">Loading mirror speeds from cached hostfile</div><div class="line"> * base: centos.ustc.edu.cn</div><div class="line"> * extras: centos.ustc.edu.cn</div><div class="line"> * updates: centos.ustc.edu.cn</div><div class="line">================================================================================================ N/S matched: vim =================================================================================================</div><div class="line">protobuf-vim.x86_64 : Vim syntax highlighting <span class="keyword">for</span> Google Protocol Buffers descriptions</div><div class="line">vim-X11.x86_64 : The VIM version of the vi editor <span class="keyword">for</span> the X Window System</div><div class="line">vim-common.x86_64 : The common files needed by any version of the VIM editor</div><div class="line">vim-enhanced.x86_64 : A version of the VIM editor <span class="built_in">which</span> includes recent enhancements</div><div class="line">vim-filesystem.x86_64 : VIM filesystem layout</div><div class="line">vim-minimal.x86_64 : A minimal version of the VIM editor</div><div class="line"></div><div class="line">  名称和简介匹配 only，使用“search all”试试。</div><div class="line"></div><div class="line"><span class="comment"># 安装一个rpm包（不加-y选项会以与用户交互的方式安装）</span></div><div class="line">[root@localhost jly]<span class="comment"># yum install [-y] [rpm包名]</span></div><div class="line"></div><div class="line"><span class="comment"># 卸载一个rpm包</span></div><div class="line">[root@localhost jly]<span class="comment"># yum remove [-y] [rpm包名]</span></div><div class="line"></div><div class="line"><span class="comment"># 升级一个rpm包</span></div><div class="line">[root@localhost jly]<span class="comment"># yum update [-y] [rpm包名]</span></div></pre></td></tr></table></figure>
<h1 id="Shell基础知识"><a href="#Shell基础知识" class="headerlink" title="Shell基础知识"></a>Shell基础知识</h1><p>shell是系统跟计算机硬件交互时使用的中间介质，它只是系统的一个工具。如果把计算机硬件比作一个人的躯体，那系统内核就是人的大脑，shell称为人的五官更为贴切。</p>
<h2 id="一些命令"><a href="#一些命令" class="headerlink" title="一些命令"></a>一些命令</h2><h3 id="记录历史命令"><a href="#记录历史命令" class="headerlink" title="记录历史命令"></a>记录历史命令</h3><ul>
<li><code>!!</code>:表示执行上一条指令。</li>
<li><code>!n</code>:表示执行命令历史中的第n条指令。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[root@localhost jly]<span class="comment"># pwd</span></div><div class="line">/home/jly</div><div class="line">[root@localhost jly]<span class="comment"># !!</span></div><div class="line"><span class="built_in">pwd</span></div><div class="line">/home/jly</div><div class="line"></div><div class="line">[root@localhost jly]<span class="comment"># history |grep 25</span></div><div class="line">   25  <span class="built_in">exit</span></div><div class="line">   34  <span class="built_in">history</span> |grep 25</div><div class="line">[root@localhost jly]<span class="comment"># !25</span></div><div class="line"><span class="built_in">exit</span></div><div class="line"><span class="built_in">exit</span></div></pre></td></tr></table></figure>
<h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><p>使用alias命令把一个常用的且很长的指令别名为一个简单易记得指令；unalias解除别名功能。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[root@localhost jly]<span class="comment"># alias</span></div><div class="line"><span class="built_in">alias</span> cp=<span class="string">'cp -i'</span></div><div class="line"><span class="built_in">alias</span> egrep=<span class="string">'egrep --color=auto'</span></div><div class="line"><span class="built_in">alias</span> fgrep=<span class="string">'fgrep --color=auto'</span></div><div class="line"><span class="built_in">alias</span> grep=<span class="string">'grep --color=auto'</span></div><div class="line"><span class="built_in">alias</span> l.=<span class="string">'ls -d .* --color=auto'</span></div><div class="line"><span class="built_in">alias</span> ll=<span class="string">'ls -l --color=auto'</span></div><div class="line"><span class="built_in">alias</span> ls=<span class="string">'ls --color=auto'</span></div><div class="line"><span class="built_in">alias</span> mv=<span class="string">'mv -i'</span></div><div class="line"><span class="built_in">alias</span> rm=<span class="string">'rm -i'</span></div><div class="line"><span class="built_in">alias</span> <span class="built_in">which</span>=<span class="string">'alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde'</span></div><div class="line">[root@localhost jly]<span class="comment"># alias aming='pwd'</span></div><div class="line">[root@localhost jly]<span class="comment"># aming</span></div><div class="line">/home/jly</div><div class="line">[root@localhost jly]<span class="comment"># unalias aming   </span></div><div class="line">[root@localhost jly]<span class="comment"># aming</span></div><div class="line">bash: aming: 未找到命令...</div></pre></td></tr></table></figure></p>
<h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><p>使用“*”来匹配0个或多个字符，用“？”匹配一个字符。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ls -d test*</span></div><div class="line"><span class="comment"># test1.txt test2 test3 test.pl</span></div><div class="line"><span class="comment"># ls -d test?</span></div><div class="line"><span class="comment"># test2 test3</span></div></pre></td></tr></table></figure></p>
<h3 id="作业控制"><a href="#作业控制" class="headerlink" title="作业控制"></a>作业控制</h3><p>使用vi命令编辑test.txt:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[jly@localhost ~]$ vi test.txt</div><div class="line">testtesttest</div></pre></td></tr></table></figure></p>
<p>按ESC键后使用Ctrl+z暂停任务，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[jly@localhost ~]$ vi test.txt</div><div class="line"></div><div class="line">[1]+  已停止               vim test.txt</div></pre></td></tr></table></figure></p>
<p>上面提示“vi test.txt” 已经停止了，使用fg命令可以恢复它，然后又会进入刚才的vi窗口。再次使其暂停，然后输入jobs，可以看到被暂停或者在后台运行的任务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[jly@localhost ~]$ <span class="built_in">jobs</span></div><div class="line">[1]+  已停止               vim test.txt</div></pre></td></tr></table></figure></p>
<p>如果想把暂停的任务放到后台重新运行，就是用bg命令(但是vi似乎不支持在后台运行)：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[jly@localhost ~]$ <span class="built_in">bg</span></div><div class="line">[1]+ vim test.txt &amp;</div><div class="line"></div><div class="line">[1]+  已停止               vim test.txt</div></pre></td></tr></table></figure></p>
<h2 id="linux-shell中的特殊符号"><a href="#linux-shell中的特殊符号" class="headerlink" title="linux shell中的特殊符号"></a>linux shell中的特殊符号</h2><ul>
<li>注释符号<code>#</code>：在<code>#</code>后面的内容都会被忽略。</li>
<li><p>脱义字符<code>\</code>：会将后面的特殊符号（如”*”）还原为普通字符。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[jly@localhost ~]$ ls <span class="_">-d</span> <span class="built_in">test</span>\*</div><div class="line">ls: 无法访问<span class="built_in">test</span>*: 没有那个文件或目录</div></pre></td></tr></table></figure>
</li>
<li><p>管道符<code>|</code>：将前面命令的输出作为后面命令的输入。</p>
</li>
<li><code>wc</code>命令用于统计文档的行数、字符数或词数。</li>
<li><p>符号”$”用于作变量前面的标志符。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[jly@localhost ~]$ ls test.txt</div><div class="line">test.txt</div><div class="line">[jly@localhost ~]$ ls !$</div><div class="line">ls test.txt</div><div class="line">test.txt</div></pre></td></tr></table></figure>
</li>
<li><p>符号”~”表示用户的家目录，root用户的家目录是<code>/root</code>,普通用户则是<code>/home/username</code></p>
</li>
</ul>
<h3 id="重定向符号"><a href="#重定向符号" class="headerlink" title="重定向符号"></a>重定向符号</h3><ul>
<li><blockquote>
<p>和 &gt;&gt;:分别表示取代和追加。</p>
</blockquote>
</li>
<li>当我们运行一个命令报错时，报错信息会输出到当前屏幕，如果想重定向到一个文本里，则要用重定向符号“2&gt;”或者“2&gt;&gt;”,分别表示错误重定向和错误追加重定向。</li>
</ul>
<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="grep工具的使用"><a href="#grep工具的使用" class="headerlink" title="grep工具的使用"></a>grep工具的使用</h2><p>命令格式：<code>grep [-cinvABC] &#39;word&#39; filename</code>。</p>
<ul>
<li>-c: 表示打印符合要求的行数</li>
<li>-i: 表示忽略大小写</li>
<li>-n: 表示输出符合要求的行及行号</li>
<li>-v: 表示打印不符合要求的行号grep</li>
<li>-A: 后面跟一个数字（有无空格都可以）；-A2：表示打印符合要求的行以及下面两行</li>
<li>-B: 后面跟一个数字；-B2：表示打印符合要求的行以及上面两行</li>
<li>-C: 后面跟一个数字；-C2：表示打印符合要求的行以及上下各两行</li>
</ul>
<h3 id="过滤-不-带有某个关键词的行并输出行号"><a href="#过滤-不-带有某个关键词的行并输出行号" class="headerlink" title="过滤(不)带有某个关键词的行并输出行号"></a>过滤(不)带有某个关键词的行并输出行号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[jly@localhost ~]$ grep -n <span class="string">'root'</span> /etc/passwd</div><div class="line">1:root:x:0:0:root:/root:/bin/bash</div><div class="line">10:operator:x:11:0:operator:/root:/sbin/nologin</div><div class="line">43:dockerroot:x:989:984:Docker User:/var/lib/docker:/sbin/nologin</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[jly@localhost ~]$ grep -nv <span class="string">'nologin'</span> /etc/passwd</div><div class="line">1:root:x:0:0:root:/root:/bin/bash</div><div class="line">6:sync:x:5:0:sync:/sbin:/bin/sync</div><div class="line">7:shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</div><div class="line">8:halt:x:7:0:halt:/sbin:/sbin/halt</div><div class="line">42:jly:x:1000:1000:jly:/home/jly:/bin/bash</div></pre></td></tr></table></figure>
<h3 id="过滤所有包含数字的行"><a href="#过滤所有包含数字的行" class="headerlink" title="过滤所有包含数字的行"></a>过滤所有包含数字的行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[jly@localhost ~]$ grep <span class="string">'[0-9]'</span> /etc/passwd</div><div class="line">root:x:0:0:root:/root:/bin/bash</div><div class="line">bin:x:1:1:bin:/bin:/sbin/nologin</div><div class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</div></pre></td></tr></table></figure>
<p>在正则表达式中，<code>^</code>表示行的开始，<code>$</code>表示行的结尾，空行则用<code>^$</code>表示。</p>
<p><code>[^字符]</code>,表示除[]内字符之外的字符。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[jly@localhost ~]$ cat test.txt</div><div class="line">123</div><div class="line">abc</div><div class="line">456</div><div class="line">abc2323</div><div class="line"><span class="comment">#lsadfg</span></div><div class="line">alllll</div><div class="line">[jly@localhost ~]$ grep <span class="string">'^[^a-zA-Z]'</span> test.txt</div><div class="line">123</div><div class="line">456</div><div class="line"><span class="comment">#lsadfg</span></div><div class="line">[jly@localhost ~]$ grep <span class="string">'[^a-zA-Z]'</span> test.txt</div><div class="line">123</div><div class="line">456</div><div class="line">abc2323</div><div class="line"><span class="comment">#lsadfg</span></div></pre></td></tr></table></figure></p>
<h3 id="指定要过滤的字符的出现次数"><a href="#指定要过滤的字符的出现次数" class="headerlink" title="指定要过滤的字符的出现次数"></a>指定要过滤的字符的出现次数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[jly@localhost ~]$ grep <span class="string">'o\&#123;2\&#125;'</span> /etc/passwd</div><div class="line">root:x:0:0:root:/root:/bin/bash</div><div class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</div><div class="line">mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</div><div class="line">operator:x:11:0:operator:/root:/sbin/nologin</div><div class="line">setroubleshoot:x:991:988::/var/lib/setroubleshoot:/sbin/nologin</div><div class="line">postfix:x:89:89::/var/spool/postfix:/sbin/nologin</div><div class="line">dockerroot:x:989:984:Docker User:/var/lib/docker:/sbin/nologin</div></pre></td></tr></table></figure>
<h2 id="egrep工具的使用"><a href="#egrep工具的使用" class="headerlink" title="egrep工具的使用"></a>egrep工具的使用</h2><h3 id="筛选一个或多个前面的字符"><a href="#筛选一个或多个前面的字符" class="headerlink" title="筛选一个或多个前面的字符"></a>筛选一个或多个前面的字符</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[jly@localhost ~]$ egrep <span class="string">'o+'</span> test.txt</div><div class="line">rot:x:0:0:/rot:/bin/bash</div><div class="line">operator:x:11:0:operator:/root:/sbin/nologin</div><div class="line">[jly@localhost ~]$ egrep <span class="string">'oo+'</span> test.txt</div><div class="line">operator:x:11:0:operator:/root:/sbin/nologin</div></pre></td></tr></table></figure>
<h3 id="筛选零个或一个前面的字符"><a href="#筛选零个或一个前面的字符" class="headerlink" title="筛选零个或一个前面的字符"></a>筛选零个或一个前面的字符</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[jly@localhost ~]$ egrep <span class="string">'o?'</span> test.txt</div><div class="line">rot:x:0:0:/rot:/bin/bash</div><div class="line">operator:x:11:0:operator:/root:/sbin/nologin</div></pre></td></tr></table></figure>
<h3 id="筛选字符串1或字符串2"><a href="#筛选字符串1或字符串2" class="headerlink" title="筛选字符串1或字符串2"></a>筛选字符串1或字符串2</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[jly@localhost ~]$ egrep <span class="string">'aaa|111|oo'</span> test.txt</div><div class="line">operator:x:11:0:operator:/root:/sbin/nologin</div><div class="line">1111111111111111111111111111111111</div><div class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaa</div></pre></td></tr></table></figure>
<h3 id="的应用"><a href="#的应用" class="headerlink" title="()的应用"></a>()的应用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[jly@localhost ~]$ egrep <span class="string">'r(oo)|at(o)'</span> test.txt</div><div class="line">operator:x:11:0:operator:/root:/sbin/nologin</div><div class="line">[jly@localhost ~]$ egrep <span class="string">'(oo)+'</span> test.txt</div><div class="line">operator:x:11:0:operator:/root:/sbin/nologin</div></pre></td></tr></table></figure>
<h2 id="sed工具的使用"><a href="#sed工具的使用" class="headerlink" title="sed工具的使用"></a>sed工具的使用</h2><p>grep工具的功能还不够强大，它实现的只是查找功能，而不能把查找的内容替换。</p>
<h3 id="打印某行"><a href="#打印某行" class="headerlink" title="打印某行"></a>打印某行</h3><p>命令格式：<code>sed -n &#39;n&#39;p filename</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[jly@localhost ~]$ sed -n <span class="string">'2'</span>p test.txt</div><div class="line">operator:x:11:0:operator:/root:/sbin/nologin</div><div class="line">[jly@localhost ~]$ sed -n <span class="string">'1,$'</span>p test.txt</div><div class="line">rot:x:0:0:/rot:/bin/bash</div><div class="line">operator:x:11:0:operator:/root:/sbin/nologin</div><div class="line">1111111111111111111111111111111111</div><div class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaa</div><div class="line">[jly@localhost ~]$ sed -n <span class="string">'1,3'</span>p test.txt</div><div class="line">rot:x:0:0:/rot:/bin/bash</div><div class="line">operator:x:11:0:operator:/root:/sbin/nologin</div><div class="line">1111111111111111111111111111111111</div></pre></td></tr></table></figure></p>
<p>第一个是打印指定的第二行，第二个是打印所有行，第三个是打印1到3行。</p>
<h3 id="打印包含某个字符串的行"><a href="#打印包含某个字符串的行" class="headerlink" title="打印包含某个字符串的行"></a>打印包含某个字符串的行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[jly@localhost ~]$ sed -n <span class="string">'/root/'</span>p test.txt</div><div class="line">operator:x:11:0:operator:/root:/sbin/nologin</div><div class="line">[jly@localhost ~]$ sed -n <span class="string">'/^1/'</span>p test.txt</div><div class="line">1111111111111111111111111111111111</div><div class="line">[jly@localhost ~]$ sed -n <span class="string">'/in$/'</span>p test.txt</div><div class="line">operator:x:11:0:operator:/root:/sbin/nologin</div></pre></td></tr></table></figure>
<p>sed命令加上-e选项可以实现多个行为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[jly@localhost ~]$ sed <span class="_">-e</span> <span class="string">'1'</span>p <span class="_">-e</span> <span class="string">'/111/'</span>p -n test.txt</div><div class="line">rot:x:0:0:/rot:/bin/bash</div><div class="line">1111111111111111111111111111111111</div></pre></td></tr></table></figure></p>
<h3 id="删除某行或者多行"><a href="#删除某行或者多行" class="headerlink" title="删除某行或者多行"></a>删除某行或者多行</h3><p>参数“d”表示删除的动作，可以删除指定的单行以及多行，可以删除匹配某个字符的行，可以删除从某一行开始到文档最后一行的所有行。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[jly@localhost ~]$ sed <span class="string">'1'</span>d test.txt</div><div class="line">operator:x:11:0:operator:/root:/sbin/nologin</div><div class="line">1111111111111111111111111111111111</div><div class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaa</div></pre></td></tr></table></figure></p>
<h3 id="替换字符或者字符串"><a href="#替换字符或者字符串" class="headerlink" title="替换字符或者字符串"></a>替换字符或者字符串</h3><p>“s”就是替换的动作，“g”表示本行全局替换，不加g则只替换本行出现的第一个。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[jly@localhost ~]$ sed  <span class="string">'1,2s/ot/to/g'</span> test.txt</div><div class="line">rto:x:0:0:/rto:/bin/bash</div><div class="line">operator:x:11:0:operator:/roto:/sbin/nologin</div><div class="line">1111111111111111111111111111111111</div><div class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaa</div><div class="line">[jly@localhost ~]$ sed  <span class="string">'s#ot#to#g'</span> test.txt</div></pre></td></tr></table></figure></p>
<p>上面两种格式都可以。</p>
<h3 id="直接修改文件的内容"><a href="#直接修改文件的内容" class="headerlink" title="直接修改文件的内容"></a>直接修改文件的内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[jly@localhost ~]$ sed -i <span class="string">'s/ot/to/g'</span> test.txt</div><div class="line">[jly@localhost ~]$ cat test.txt</div><div class="line">rto:x:0:0:/rto:/bin/bash</div><div class="line">operator:x:11:0:operator:/roto:/sbin/nologin</div><div class="line">1111111111111111111111111111111111</div><div class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaa</div></pre></td></tr></table></figure>
<h1 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h1><h2 id="什么是shell？"><a href="#什么是shell？" class="headerlink" title="什么是shell？"></a>什么是shell？</h2><h3 id="shell脚本的创建和执行"><a href="#shell脚本的创建和执行" class="headerlink" title="shell脚本的创建和执行"></a>shell脚本的创建和执行</h3><p>编写我的第一个shell脚本（vim进入时是一般模式，按i键，进入编辑模式，按esc键退出编辑模式，然后“:wq”保存并退出vim）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@localhost jly]<span class="comment"># cd /usr/local/sbin/</span></div><div class="line">[root@localhost sbin]<span class="comment"># vim first.sh</span></div><div class="line"><span class="meta">#! /bin/bash</span></div><div class="line"><span class="comment">## this is my first shell script</span></div><div class="line"><span class="comment">## writen by luyaj 2017-11-18</span></div><div class="line"></div><div class="line">date</div><div class="line"><span class="built_in">echo</span> <span class="string">"hello world!"</span></div></pre></td></tr></table></figure></p>
<p>shell脚本通常是以.sh为后缀名的。本例中，脚本文件first.sh的第一行是以“#! /bin/bash”开头，表示该文件使用的是bash语法。下面执行脚本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost sbin]<span class="comment"># sh first.sh</span></div><div class="line">2017年 11月 18日 星期六 20:31:16 CST</div><div class="line">hello world!</div></pre></td></tr></table></figure></p>
<p>使用-x选项来查看脚本的执行过程：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost sbin]<span class="comment"># sh -x first.sh</span></div><div class="line">+ date</div><div class="line">2017年 11月 18日 星期六 20:41:38 CST</div><div class="line">+ <span class="built_in">echo</span> <span class="string">'hello world!'</span></div><div class="line">hello world!</div></pre></td></tr></table></figure></p>
<h3 id="命令date"><a href="#命令date" class="headerlink" title="命令date"></a>命令date</h3><ul>
<li>date +%Y : 以四位数字格式打印年份</li>
<li>date +%y : 以两位数字格式打印年份</li>
<li>date +%m : 月份</li>
<li>date +%d : 日期</li>
<li>date +%H : 小时</li>
<li>date +%M : 分钟</li>
<li>date +%S : 秒</li>
<li>date +%w : 日期（0表示周日）</li>
</ul>
<p>写此命令时是：2017年11月18日 20:43<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@localhost sbin]<span class="comment"># date +"%Y-%m-%d %H:%M:%S"</span></div><div class="line">2017-11-18 20:42:27</div><div class="line">[root@localhost sbin]<span class="comment"># date -d "-1 day" +%d</span></div><div class="line">17</div><div class="line">[root@localhost sbin]<span class="comment"># date -d "-1 hour" +%H</span></div><div class="line">19</div><div class="line">[root@localhost sbin]<span class="comment"># date -d "-1 min" +%M</span></div><div class="line">42</div></pre></td></tr></table></figure></p>
<h2 id="shell脚本中的变量"><a href="#shell脚本中的变量" class="headerlink" title="shell脚本中的变量"></a>shell脚本中的变量</h2><h3 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a=1</div><div class="line">b=2</div><div class="line">sum=$[<span class="variable">$a</span>+<span class="variable">$b</span>]</div><div class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span>+<span class="variable">$b</span>=<span class="variable">$sum</span>"</span></div><div class="line"></div><div class="line">[root@localhost sbin]<span class="comment"># sh first.sh</span></div><div class="line">1+2=3</div></pre></td></tr></table></figure>
<h3 id="和用户交互-read"><a href="#和用户交互-read" class="headerlink" title="和用户交互(read)"></a>和用户交互(read)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">read</span> -p <span class="string">"please input a number:"</span> x</div><div class="line"><span class="built_in">read</span> -p <span class="string">"please input another number:"</span> y</div><div class="line">sum=$[<span class="variable">$x</span>+<span class="variable">$y</span>]</div><div class="line"><span class="built_in">echo</span> <span class="string">"the sum of the two num is: <span class="variable">$sum</span>"</span></div><div class="line"></div><div class="line">[root@localhost sbin]<span class="comment"># sh first.sh</span></div><div class="line">please input a number:2</div><div class="line">please input another number:4</div><div class="line">the sum of the two num is: 6</div></pre></td></tr></table></figure>
<h3 id="shell脚本预设变量"><a href="#shell脚本预设变量" class="headerlink" title="shell脚本预设变量"></a>shell脚本预设变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@localhost sbin]<span class="comment"># vim first.sh</span></div><div class="line">sum=$[<span class="variable">$1</span>+<span class="variable">$2</span>]</div><div class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$sum</span>"</span></div><div class="line">[root@localhost sbin]<span class="comment"># sh -x first.sh 1 2</span></div><div class="line">+ sum=3</div><div class="line">+ <span class="built_in">echo</span> 3</div><div class="line">3</div></pre></td></tr></table></figure>
<p>脚本中的$1和$2就是shell脚本的预设变量。另外还有$0,表示脚本本身的名字：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$1</span> <span class="variable">$2</span> <span class="variable">$0</span>"</span></div><div class="line">[root@localhost sbin]<span class="comment"># sh first.sh 1 2</span></div><div class="line">1 2 first.sh</div></pre></td></tr></table></figure></p>
<h2 id="shell脚本中的逻辑判断"><a href="#shell脚本中的逻辑判断" class="headerlink" title="shell脚本中的逻辑判断"></a>shell脚本中的逻辑判断</h2><h3 id="不带else"><a href="#不带else" class="headerlink" title="不带else"></a>不带else</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@localhost sbin]<span class="comment"># cat first.sh</span></div><div class="line"><span class="meta">#! /bin/bash</span></div><div class="line"><span class="built_in">read</span></div><div class="line"><span class="built_in">read</span> -p <span class="string">"please input you score:"</span> a</div><div class="line"><span class="keyword">if</span>((a&lt;60)); <span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"you fail"</span></div><div class="line"><span class="keyword">fi</span></div><div class="line">[root@localhost sbin]<span class="comment"># sh first.sh</span></div><div class="line">please input you score:34</div><div class="line">you fail</div></pre></td></tr></table></figure>
<p>“((a&lt;60))”是shell脚本中特有的格式，只用一个小括号或者不用都会报错。</p>
<h3 id="带有else"><a href="#带有else" class="headerlink" title="带有else"></a>带有else</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@localhost sbin]<span class="comment"># cat first.sh</span></div><div class="line"><span class="meta">#! /bin/bash</span></div><div class="line"></div><div class="line"><span class="built_in">read</span> -p <span class="string">"please input you score:"</span> a</div><div class="line"><span class="keyword">if</span>((a&lt;60)); <span class="keyword">then</span></div><div class="line"> <span class="built_in">echo</span> <span class="string">"you fail."</span></div><div class="line"><span class="keyword">else</span></div><div class="line"> <span class="built_in">echo</span> <span class="string">"good!pass it."</span></div><div class="line"><span class="keyword">fi</span></div><div class="line">[root@localhost sbin]<span class="comment"># sh first.sh</span></div><div class="line">please input you score:45</div><div class="line">you fail.</div><div class="line">[root@localhost sbin]<span class="comment"># sh first.sh</span></div><div class="line">please input you score:90</div><div class="line">good!pass it.</div></pre></td></tr></table></figure>
<h3 id="带有elif"><a href="#带有elif" class="headerlink" title="带有elif"></a>带有elif</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@localhost sbin]<span class="comment"># cat first.sh</span></div><div class="line"><span class="meta">#! /bin/bash</span></div><div class="line"></div><div class="line"><span class="built_in">read</span> -p <span class="string">"please input you score:"</span> a</div><div class="line"><span class="keyword">if</span>((a&lt;60)); <span class="keyword">then</span></div><div class="line"> <span class="built_in">echo</span> <span class="string">"you fail."</span></div><div class="line"><span class="keyword">elif</span> ((a&gt;=60)) &amp;&amp; ((a&lt;85)); <span class="keyword">then</span></div><div class="line"> <span class="built_in">echo</span> <span class="string">"good!pass it."</span></div><div class="line"><span class="keyword">else</span></div><div class="line"> <span class="built_in">echo</span> <span class="string">"very good!is so high."</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<p>判断数值大小除了可以用(())的形式外，还可以使用[]，但是不能使用&gt;、&lt;、=这样的符号了，要使用-lt(小于)、-gt(大于)、-le(小于或等于)、-ge(大于或等于)，-eq(等于)，-ne(不等于)。</p>
<h3 id="case逻辑判断"><a href="#case逻辑判断" class="headerlink" title="case逻辑判断"></a>case逻辑判断</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">read</span> -p <span class="string">"input a number:"</span> n</div><div class="line">a=$[<span class="variable">$n</span>%2]</div><div class="line"><span class="keyword">case</span> <span class="variable">$a</span> <span class="keyword">in</span></div><div class="line">1)</div><div class="line"> <span class="built_in">echo</span> <span class="string">"the num is odd"</span></div><div class="line"> ;;</div><div class="line">0)</div><div class="line"> <span class="built_in">echo</span> <span class="string">"the num is even"</span></div><div class="line"> ;;</div><div class="line">*)</div><div class="line"> <span class="built_in">echo</span> <span class="string">"it's not a num"</span></div><div class="line"> ;;</div><div class="line"><span class="keyword">esac</span></div><div class="line">[root@localhost sbin]<span class="comment"># sh first.sh</span></div><div class="line">input a number:20</div><div class="line">the num is even</div></pre></td></tr></table></figure>
<h2 id="shell脚本的循环"><a href="#shell脚本的循环" class="headerlink" title="shell脚本的循环"></a>shell脚本的循环</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>“seq 1 5”表示从1到5的一个序列：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 1 5`; <span class="keyword">do</span></div><div class="line"> <span class="built_in">echo</span> <span class="variable">$i</span></div><div class="line"><span class="keyword">done</span></div><div class="line">[root@localhost sbin]<span class="comment"># sh first.sh</span></div><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td></tr></table></figure></p>
<p>循环条件也可以是一组字符串或者数字：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost sbin]<span class="comment"># for i in 1 a b;do echo $i;done</span></div><div class="line">1</div><div class="line">a</div><div class="line">b</div></pre></td></tr></table></figure></p>
<h2 id="shell脚本中的函数"><a href="#shell脚本中的函数" class="headerlink" title="shell脚本中的函数"></a>shell脚本中的函数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">sum</span></span>()&#123;</div><div class="line"> sum=$[<span class="variable">$1</span>+<span class="variable">$2</span>]</div><div class="line"> <span class="built_in">echo</span> <span class="variable">$sum</span></div><div class="line">&#125;</div><div class="line">sum <span class="variable">$1</span> <span class="variable">$2</span></div><div class="line">[root@localhost sbin]<span class="comment"># sh first.sh 1 2</span></div><div class="line">3</div></pre></td></tr></table></figure>
<p>注意，在shell脚本中，函数一定要写在最前面，因为函数是要被调用的，如果还没有出现就被调用，肯定会出错的。</p>
<h1 id="linux系统日常管理"><a href="#linux系统日常管理" class="headerlink" title="linux系统日常管理"></a>linux系统日常管理</h1><h2 id="监控系统的状态"><a href="#监控系统的状态" class="headerlink" title="监控系统的状态"></a>监控系统的状态</h2><h3 id="w查看当前系统的负载"><a href="#w查看当前系统的负载" class="headerlink" title="w查看当前系统的负载"></a>w查看当前系统的负载</h3><p>主要关注load average后的三个值，表示单位时间段内CPU的活动进程数，这个值越大就说明服务器压力越大，一般情况下，这个值只要不超过服务器的CPU数量就没有关系。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[jly@localhost ~]$ w</div><div class="line"> 21:40:29 up 2 min,  2 users,  load average: 1.68, 0.99, 0.39</div><div class="line">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</div><div class="line">jly      :0       :0               21:39   ?xdm?  24.29s  0.42s gdm-session-worker [pa</div><div class="line">jly      pts/0    :0               21:39    5.00s  0.11s  0.04s w</div></pre></td></tr></table></figure></p>
<p>查看服务器有几个CPU的方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">[jly@localhost ~]$ cat /proc/cpuinfo</div><div class="line">processor   : 0</div><div class="line">vendor_id   : GenuineIntel</div><div class="line">cpu family  : 6</div><div class="line">model       : 61</div><div class="line">model name  : Intel(R) Core(TM) i5-5200U CPU @ 2.20GHz</div><div class="line">stepping    : 4</div><div class="line">microcode   : 0x1f</div><div class="line">cpu MHz     : 2200.448</div><div class="line">cache size  : 3072 KB</div><div class="line">physical id : 0</div><div class="line">siblings    : 1</div><div class="line">core id     : 0</div><div class="line">cpu cores   : 1</div><div class="line">apicid      : 0</div><div class="line">initial apicid  : 0</div><div class="line">fpu     : yes</div><div class="line">fpu_exception   : yes</div><div class="line">cpuid level : 20</div><div class="line">wp      : yes</div><div class="line">flags       : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts mmx fxsr sse sse2 ss syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts nopl xtopology tsc_reliable nonstop_tsc aperfmperf eagerfpu pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch ida arat epb pln pts dtherm fsgsbase tsc_adjust bmi1 avx2 smep bmi2 invpcid rdseed adx smap xsaveopt</div><div class="line">bogomips    : 4402.00</div><div class="line">clflush size    : 64</div><div class="line">cache_alignment : 64</div><div class="line">address sizes   : 42 bits physical, 48 bits virtual</div><div class="line">power management:</div></pre></td></tr></table></figure></p>
<h3 id="vmstat监控系统的状态"><a href="#vmstat监控系统的状态" class="headerlink" title="vmstat监控系统的状态"></a>vmstat监控系统的状态</h3><p>命令w查看系统整体上的负载，可以查看系统有没有压力，但无法判断具体是哪里（CPU、内存、磁盘等）有压力，所以就用vmstat。vmstat命令打印有以下6部分(列举常用的)：</p>
<ul>
<li>procs显示进程的相关信息<ul>
<li>r：表示运行和等待CPU时间片的进程数，该数值如果长期大于服务器CPU的个数，则说明CPU不够用了。</li>
<li>b：表示等待资源的进程数，比如等待I/O、内存等。</li>
</ul>
</li>
<li>memory显示内存的相关信息</li>
<li>swap显示内存的交换情况<ul>
<li>si：表示由交换区写入到内存的数据量</li>
<li>so：表示由内存写入到交换区的数据量</li>
</ul>
</li>
<li>io显示磁盘的使用情况<ul>
<li>bi：表示从块设备读取数据的量（读磁盘）</li>
<li>bo：表示从块设备写入数据的量（写磁盘）</li>
</ul>
</li>
<li>system显示采集间隔内发生的中段次数</li>
<li>cpu显示CPU的使用状态<ul>
<li>wa：表示I/O等待所占用CPU的时间百分比 </li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[jly@localhost ~]$ vmstat</div><div class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</div><div class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   <span class="keyword">in</span>   cs us sy id wa st</div><div class="line"> 3  0   3156  66000     36 436188    0    2   894    78  125  213  3  2 92  3  0</div></pre></td></tr></table></figure>
<p>也可以使用命令<code>vmstat 1 5</code>或者<code>vmstat 1</code>，前一条命令表示每隔1秒输出一次状态，共输出5次；后一条命令表示每隔1秒输出一次状态且一直输出。</p>
<h3 id="top显示进程占有的系统资源"><a href="#top显示进程占有的系统资源" class="headerlink" title="top显示进程占有的系统资源"></a>top显示进程占有的系统资源</h3><h3 id="free查看内存使用的状态"><a href="#free查看内存使用的状态" class="headerlink" title="free查看内存使用的状态"></a>free查看内存使用的状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[jly@localhost ~]$ free</div><div class="line">              total        used        free      shared  buff/cache   available</div><div class="line">Mem:         999936      574212       90404        4844      335320      224880</div><div class="line">Swap:       2097148        7244     2089904</div></pre></td></tr></table></figure>
<h3 id="ps查看系统进程"><a href="#ps查看系统进程" class="headerlink" title="ps查看系统进程"></a>ps查看系统进程</h3><h2 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h2><ul>
<li>ifconfig：查看网卡IP</li>
<li>service network restart：重启网卡</li>
<li>hostname：查看（修改）主机名<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[jly@localhost ~]$ hostname</div><div class="line">localhost.localdomain</div><div class="line">[root@localhost jly]<span class="comment"># hostname jiangluya   //修改主机名</span></div><div class="line">[root@localhost jly]<span class="comment"># hostname</span></div><div class="line">jiangluya</div></pre></td></tr></table></figure>
</li>
</ul>
<p>下次登录时，命令提示符[root@localhost ~]中的localhost就会改为jiangluya。但是这样的修改只是保存在内存在，如果重启，主机名还会变成未改之前的名称。所以更改主机名的同时还需要更改相关配置文件/etc/sysconfig/network。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vim /etc/sysconfig/network</div><div class="line">NETWORKING=yes</div><div class="line">HOSTNAME=jiangluya.localdomain</div></pre></td></tr></table></figure></p>
<p># </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是linux后半部分的学习，记录RPM包以及shell，正则表达式等内容。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>一些工具使用</title>
    <link href="http://yoursite.com/2017/10/27/%E4%B8%80%E4%BA%9B%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/10/27/一些工具使用/</id>
    <published>2017-10-27T14:32:16.000Z</published>
    <updated>2017-12-22T10:59:14.759Z</updated>
    
    <content type="html"><![CDATA[<p>兴致来了，记录下自己喜欢的小工具，不定期更新。</p>
<a id="more"></a>
<h2 id="第一个工具-——-使用Emoji"><a href="#第一个工具-——-使用Emoji" class="headerlink" title="第一个工具 —— 使用Emoji"></a>第一个工具 —— 使用Emoji</h2><p>嗯，Emoji，在github里使用的emoji，好可爱的~ 看到这个好东西是来自前端早读课的第1083期文章，附上文章地址<a href="http://mp.weixin.qq.com/s/xaHAb_C1Vtih9mrIv379ew" target="_blank" rel="external">【第1083期】git commit时使用 Emoji</a>。</p>
<p>使用起来很简单,直接在在emoji名字的前后各加上一个冒号：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit -m <span class="string">":sparkles:腾讯课堂NEXT学位"</span></div></pre></td></tr></table></figure></p>
<p>效果展示：<br><img src="http://oxligjg1w.bkt.clouddn.com/gitmoji.png" alt="alt"></p>
<ul>
<li><a href="https://github.com/luyaJ/gitmoji" target="_blank" rel="external">github上的源码–gitmoji</a></li>
<li><a href="https://gitmoji.carloscuesta.me/" target="_blank" rel="external">An emoji guide for your commit messages</a>在这里看图标的名称。</li>
</ul>
<h2 id="webstorm"><a href="#webstorm" class="headerlink" title="webstorm"></a>webstorm</h2><p>本人常用快捷键记录:</p>
<ul>
<li>Alt: 选择多处</li>
<li>Ctrl+d: 复制并粘贴一行</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;兴致来了，记录下自己喜欢的小工具，不定期更新。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>归并排序实现的三种方式</title>
    <link href="http://yoursite.com/2017/10/23/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/10/23/归并排序实现的三种方式/</id>
    <published>2017-10-23T08:31:18.000Z</published>
    <updated>2017-10-23T09:55:21.543Z</updated>
    
    <content type="html"><![CDATA[<p>算法课上老师布置的第一次上机实验。归并排序，一个<strong>分治</strong>的策略，先进行划分，再进行合并。空间复杂度：nlogn</p>
<a id="more"></a>
<h2 id="递归实现的归并排序"><a href="#递归实现的归并排序" class="headerlink" title="递归实现的归并排序"></a>递归实现的归并排序</h2><h3 id="基本思想："><a href="#基本思想：" class="headerlink" title="基本思想："></a>基本思想：</h3><p>将待排的元素分成大小大致相同的2个子集，分别对这两个子集进行排序，最终将排好序的子集合并，就会得到一个排好序的集合。</p>
<p>设当前归并排序的区间是[left..right],分治法的三个步骤是：</p>
<ul>
<li>1.<strong>分解</strong>：将当前区间一分为二，即求分裂点</li>
<li>2.<strong>求解</strong>：递归的对两个子区间[left..mid]和[mid+1..right]进行归并排序</li>
<li>3.<strong>组合</strong>：将已排序的两个子区间[left..mid]和[mid+1..right]归并为一个有序的区间[left..right]。</li>
</ul>
<h3 id="实现过程如图："><a href="#实现过程如图：" class="headerlink" title="实现过程如图："></a>实现过程如图：</h3><p><img src="http://oy9sf0i32.bkt.clouddn.com/%E9%80%92%E5%BD%92%E7%9A%84%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.png" alt="递归的归并排序"></p>
<h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;算法课上老师布置的第一次上机实验。归并排序，一个&lt;strong&gt;分治&lt;/strong&gt;的策略，先进行划分，再进行合并。空间复杂度：nlogn&lt;/p&gt;
    
    </summary>
    
      <category term="Web前端" scheme="http://yoursite.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>学习linux</title>
    <link href="http://yoursite.com/2017/10/15/%E5%AD%A6%E4%B9%A0linux/"/>
    <id>http://yoursite.com/2017/10/15/学习linux/</id>
    <published>2017-10-15T12:02:49.000Z</published>
    <updated>2017-11-17T15:02:07.739Z</updated>
    
    <content type="html"><![CDATA[<p>简介：使用虚拟机安装linux以及linux学习。</p>
<a id="more"></a>
<ul>
<li>VMware Workstation Pro：<a href="https://www.vmware.com/cn/products/workstation-pro.html" target="_blank" rel="external">下载地址</a></li>
<li>CentOS：<a href="http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1708.iso" target="_blank" rel="external">下载地址</a></li>
<li>书籍推荐：《跟阿铭学Linux》2014年10月第1版</li>
<li>实验楼：<a href="https://www.shiyanlou.com/courses/1" target="_blank" rel="external">学习地址</a></li>
</ul>
<h1 id="虚拟机安装Linux"><a href="#虚拟机安装Linux" class="headerlink" title="虚拟机安装Linux"></a>虚拟机安装Linux</h1><p>《跟阿铭学Linux》这里面也有详细的安装过程，这里我就记录两点：</p>
<ol>
<li><img src="http://oxv4lmd01.bkt.clouddn.com/%E9%80%89%E6%8B%A9gui.png" alt="图形界面"></li>
</ol>
<p>习惯于用图形界面的同学一定要记得选择这项，不然之后安装有点麻烦。</p>
<ol>
<li>刚点击<code>install CentOS 7</code> ，就发现界面黑屏，怎么弄都没有反应，这个时候就要注意，是不是电脑禁止了虚拟机功能。解决办法：重启电脑进入BIOS，找到<code>virtualization</code>的一项,我的BIOS中在<code>Advanced-cpu setup-virtualization</code>，现为<code>Disabled</code>状态，改为<code>Enable</code>，再开机安装这个问题应该解决了！</li>
</ol>
<p>其他的可以参考这篇文章，讲的很详细。（<a href="https://zm10.sm-tc.cn/?src=l4uLj8XQ0IiIiNGcl5qRmIeKhoqekYzRnJCS0KqRlofQx8zLysvRl4uSkw%3D%3D&amp;uid=ce6674418dc941a250cb1bbb92abaff3&amp;hid=2e837fc7c03ffc154a4bd83c8d2925af&amp;pos=1&amp;cid=9&amp;time=1507991385827&amp;from=click&amp;restype=1&amp;pagetype=0000004000000402&amp;bu=structure_web_info&amp;query=centos7%E5%88%86%E5%8C%BA%E6%96%B9%E6%A1%88&amp;mode=&amp;v=1&amp;uc_param_str=dnntnwvepffrgibijbprsvdsdichei" target="_blank" rel="external">CentOs安装教程等</a>）</p>
<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="小笔记"><a href="#小笔记" class="headerlink" title="小笔记"></a>小笔记</h2><ul>
<li>切换用户：<code>su 用户名</code> (<code>su root</code>)</li>
<li>新建目录：<code>mkdir 目录名</code></li>
<li>新建文件：<code>touch 文件名</code></li>
<li>切换路径：<code>cd 路径地址</code></li>
<li>关机命令：<code>init 0</code></li>
</ul>
<h2 id="重要快捷键"><a href="#重要快捷键" class="headerlink" title="重要快捷键"></a>重要快捷键</h2><ul>
<li>tab键:写命令时，命令不记得，那就用Tab补全</li>
<li>Ctrl+c:强行终止当前程序 </li>
</ul>
<table>
<thead>
<tr>
<th>按键</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+d</td>
<td>键盘输入结束或退出终端</td>
</tr>
<tr>
<td>Ctrl+s</td>
<td>暂停当前程序，暂停后按下任意键恢复运行</td>
</tr>
<tr>
<td>Ctrl+z</td>
<td>将当前程序放到后台运行，恢复到前台为命令fg</td>
</tr>
<tr>
<td>Ctrl+a</td>
<td>将光标移至输入行头，相当于Home键</td>
</tr>
<tr>
<td>Ctrl+e</td>
<td>将光标移至输入行末，相当于End键</td>
</tr>
<tr>
<td>Ctrl+k</td>
<td>删除从光标所在位置到行末</td>
</tr>
<tr>
<td>Alt+Backspace</td>
<td>向前删除一个单词</td>
</tr>
<tr>
<td>Shift+PgUp</td>
<td>将终端显示向上滚动</td>
</tr>
<tr>
<td>Shift+PgDn</td>
<td>将终端显示向下滚动</td>
</tr>
</tbody>
</table>
<ul>
<li>方向键↑:恢复之前输入过的命令</li>
</ul>
<h2 id="Shell常用通配符"><a href="#Shell常用通配符" class="headerlink" title="Shell常用通配符"></a>Shell常用通配符</h2><table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>*</td>
<td>匹配0或多个字符</td>
</tr>
<tr>
<td>?</td>
<td>匹配任意一个字符</td>
</tr>
<tr>
<td>[list]</td>
<td>匹配list中的任意单一字符</td>
</tr>
<tr>
<td>[!list]</td>
<td>匹配除list中的任意单一字符以外的字符</td>
</tr>
<tr>
<td>[c1-c2]</td>
<td>匹配c1-c2中的任意单一字符,如：[0-9] [a-z]</td>
</tr>
<tr>
<td>{string1,string2,…}</td>
<td>匹配string1或string2(或更多)其一字符串</td>
</tr>
<tr>
<td>{c1…c2}</td>
<td>匹配c1-c2中全部字符，如{1..10}</td>
</tr>
</tbody>
</table>
<p>一次性创建多个文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[luyaj@localhost <span class="built_in">test</span>]$ touch hello&#123;1..3&#125;.html</div><div class="line">[luyaj@localhost <span class="built_in">test</span>]$ ls *.html</div><div class="line">hello1.html  hello2.html  hello3.html</div></pre></td></tr></table></figure></p>
<h2 id="在命令行中获取帮助"><a href="#在命令行中获取帮助" class="headerlink" title="在命令行中获取帮助"></a>在命令行中获取帮助</h2><p>你可以使用如下方式来获得某个命令的说明和使用方式的详细介绍:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ man &lt;command_name&gt;</div></pre></td></tr></table></figure></p>
<p>由于<code>man</code>的命令很多，所以手册进行了分区段处理，通常被分为以下8个区段：</p>
<table>
<thead>
<tr>
<th>区段</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>一般命令</td>
</tr>
<tr>
<td>2</td>
<td>系统调用</td>
</tr>
<tr>
<td>3</td>
<td>库函数，涵盖了C标准函数库</td>
</tr>
<tr>
<td>4</td>
<td>特殊文件（通常是/dev中的设备）和驱动程序</td>
</tr>
<tr>
<td>5</td>
<td>文件格式和约定</td>
</tr>
<tr>
<td>6</td>
<td>游戏和屏保</td>
</tr>
<tr>
<td>7</td>
<td>杂项</td>
</tr>
<tr>
<td>8</td>
<td>系统管理命令和守护进程</td>
</tr>
</tbody>
</table>
<p>例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ man 1 ls</div></pre></td></tr></table></figure></p>
<p>如果你知道某个命令的作用，只是想快速查看一些它的某个具体参数的作用，那么你可以使用–help参数，大部分命令都会带有这个参数，如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ls --help</div></pre></td></tr></table></figure></p>
<h1 id="Linux文件和目录管理"><a href="#Linux文件和目录管理" class="headerlink" title="Linux文件和目录管理"></a>Linux文件和目录管理</h1><h2 id="跟文件和目录有关的命令"><a href="#跟文件和目录有关的命令" class="headerlink" title="跟文件和目录有关的命令"></a>跟文件和目录有关的命令</h2><h3 id="命令cd"><a href="#命令cd" class="headerlink" title="命令cd"></a>命令cd</h3><p>命令cd是用来变更用户所在目录的，后面只能跟目录名，跟了文件名会报错；命令pwd是用来打印当前所在目录：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[luyaj@localhost ~]$ <span class="built_in">cd</span> home</div><div class="line">bash: <span class="built_in">cd</span>: home: 没有那个文件或目录</div><div class="line">[luyaj@localhost ~]$ <span class="built_in">cd</span> /home</div><div class="line">[luyaj@localhost home]$ <span class="built_in">pwd</span></div><div class="line">/home</div></pre></td></tr></table></figure></p>
<p>在linux文件系统中，有两个特殊的符号也可以表示目录。”.”表示当前目录，”..”表示当前目录的上一级目录：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[luyaj@localhost <span class="built_in">test</span>]$ <span class="built_in">cd</span> .</div><div class="line">[luyaj@localhost <span class="built_in">test</span>]$ <span class="built_in">pwd</span></div><div class="line">/home/luyaj/<span class="built_in">test</span></div><div class="line">[luyaj@localhost <span class="built_in">test</span>]$ <span class="built_in">cd</span> ..</div><div class="line">[luyaj@localhost ~]$ <span class="built_in">pwd</span></div><div class="line">/home/luyaj</div></pre></td></tr></table></figure></p>
<h3 id="命令mkdir"><a href="#命令mkdir" class="headerlink" title="命令mkdir"></a>命令mkdir</h3><p><code>mkdir</code>是<em>make directory</em>的缩写。命令格式是：<code>mkdir [-mp][目录名称]</code>。-m选项用于指定要创建目录的权限（不常用）；-p选项很有用处，我们先来看看：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[luyaj@localhost ~]$ mkdir luya/<span class="built_in">test</span>/123</div><div class="line">mkdir: 无法创建目录<span class="string">"luya/test/123"</span>: 没有那个文件或目录</div><div class="line">[luyaj@localhost ~]$ mkdir -p luya/<span class="built_in">test</span>/123</div><div class="line">[luyaj@localhost ~]$ ls luya/<span class="built_in">test</span></div><div class="line">123</div></pre></td></tr></table></figure>
<p>我们发现当我们想创建目录<code>luya/test/123</code>时，提示无法创建、<code>/luya/test</code>文件不存在。这是因为在linux中，如果发现要创建的目录的上一级目录不存在就会报错。所以-p这个选项就是帮我们创建一大串级联目录，并且当创建一个已经存在的目录时不会报错。</p>
<p>相应的，<code>rmdir</code>用于删除空目录。</p>
<h3 id="命令rm"><a href="#命令rm" class="headerlink" title="命令rm"></a>命令rm</h3><p><code>rm</code>命令既可以删除目录，也可以删除文件。一般使用命令<code>rm -rf 目录名</code>来删除。</p>
<h3 id="命令cp"><a href="#命令cp" class="headerlink" title="命令cp"></a>命令cp</h3><p><code>cp</code>是copy的简写，命令格式：<code>cp [选项][来源文件][目的文件]</code>。</p>
<ul>
<li>-r :如果要复制一个目录，必须加这个选项，否则不能复制目录，类似于rm命令。 </li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[luyaj@localhost ~]$ mkdir 123</div><div class="line">[luyaj@localhost ~]$ cp 123 456</div><div class="line">cp: 略过目录<span class="string">"123"</span></div><div class="line">[luyaj@localhost ~]$ cp -r 123 456</div><div class="line">[luyaj@localhost ~]$ ls <span class="_">-l</span></div><div class="line">总用量 0</div><div class="line">drwxrwxr-x. 2 luyaj luyaj  6 10月 16 19:42 123</div><div class="line">drwxrwxr-x. 2 luyaj luyaj  6 10月 16 19:42 456</div></pre></td></tr></table></figure>
<ul>
<li>-i :如果遇到一个已经存在的文件，会询问是否覆盖。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[luyaj@localhost ~]$ <span class="built_in">cd</span> 123</div><div class="line">[luyaj@localhost 123]$ ls</div><div class="line">[luyaj@localhost 123]$ touch 111</div><div class="line">[luyaj@localhost 123]$ touch 222</div><div class="line">[luyaj@localhost 123]$ cp -i 111 222</div><div class="line">cp：是否覆盖<span class="string">"222"</span>？ n</div><div class="line">[luyaj@localhost 123]$ <span class="built_in">echo</span> <span class="string">'acb'</span> &gt; 111</div><div class="line">[luyaj@localhost 123]$ <span class="built_in">echo</span> <span class="string">'def'</span> &gt; 222</div><div class="line">[luyaj@localhost 123]$ cat 111 222</div><div class="line">acb</div><div class="line">def</div><div class="line">[luyaj@localhost 123]$ /bin/cp 111 222</div><div class="line">[luyaj@localhost 123]$ cat 111</div><div class="line">acb</div></pre></td></tr></table></figure>
<p>上例中，<code>echo</code>用于打印，将’abc’和’def’分别写入文件”111”和”222”中，起写入符号的就是符号”&gt;”(在linux中叫做重定向)。<code>cat</code>命令用于读一个文件，并把读出的文件打印在当前屏幕上。</p>
<h3 id="命令mv"><a href="#命令mv" class="headerlink" title="命令mv"></a>命令mv</h3><p><code>mv</code>是move的简写，命令格式为：<code>mv [选项][源文件或目录][目标文件或目录]</code>。</p>
<p>有几种情况，先看示例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[luyaj@localhost ~]$ mkdir dira  dirb</div><div class="line">[luyaj@localhost ~]$ ls</div><div class="line">dira  公共  视频  文档  音乐</div><div class="line">dirb  模板  图片  下载  桌面</div><div class="line">[luyaj@localhost ~]$ mv dira dirc</div><div class="line">[luyaj@localhost ~]$ ls</div><div class="line">dirb  公共  视频  文档  音乐</div><div class="line">dirc  模板  图片  下载  桌面</div></pre></td></tr></table></figure>
<p>这里，目标文件是目录dirc，并且dirc不存在，所以相当于把目录dira重命名为dirc。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[luyaj@localhost ~]$ mv dirc dirb</div><div class="line">[luyaj@localhost ~]$ ls</div><div class="line">dirb  公共  模板  视频  图片  文档  下载  音乐  桌面</div><div class="line">[luyaj@localhost ~]$ ls dirb</div><div class="line">dirc</div></pre></td></tr></table></figure>
<p>这里，目标文件是目录dirb，并且dirb存在，所以会把目录dirc移动到目录dirb里。</p>
<p>同理，文件的移动也是和上面目录的移动是一样的。</p>
<h2 id="几个与文档相关的命令"><a href="#几个与文档相关的命令" class="headerlink" title="几个与文档相关的命令"></a>几个与文档相关的命令</h2><h3 id="命令cat-tac"><a href="#命令cat-tac" class="headerlink" title="命令cat/tac"></a>命令cat/tac</h3><p><code>cat</code>命令用来查看一个文件的内容并显示在屏幕上；而<code>tac</code>命令是反序输出。</p>
<ul>
<li>-n ：查看文件时，把行号也显示在屏幕上</li>
<li>-A ：显示所有内容，包括特殊字符</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[luyaj@localhost ~]$ mkdir dirb</div><div class="line">[luyaj@localhost ~]$ <span class="built_in">cd</span> dirb</div><div class="line">[luyaj@localhost dirb]$ touch filee</div><div class="line">[luyaj@localhost dirb]$ <span class="built_in">echo</span> <span class="string">'111111'</span> &gt; filee</div><div class="line">[luyaj@localhost dirb]$ <span class="built_in">echo</span> <span class="string">'222222'</span> &gt;&gt;filee</div><div class="line">[luyaj@localhost dirb]$ <span class="built_in">cd</span></div><div class="line">[luyaj@localhost ~]$ cat dirb/filee</div><div class="line">111111</div><div class="line">222222</div><div class="line">[luyaj@localhost ~]$ cat -n dirb/filee</div><div class="line">     1  111111</div><div class="line">     2  222222</div><div class="line">[luyaj@localhost ~]$ cat -A dirb/filee</div><div class="line">111111$</div><div class="line">222222$</div></pre></td></tr></table></figure>
<p>这里’&gt;&gt;’也是重定向，是<strong>追加</strong>的意思。只是使用’&gt;’符号时，如果文件中有内容会删除文件中原来的内容，而使用’&gt;&gt;’符号不会删除原有内容。</p>
<h3 id="命令more-less-head-tail"><a href="#命令more-less-head-tail" class="headerlink" title="命令more/less/head/tail"></a>命令more/less/head/tail</h3><ul>
<li>当文件内容太多时，一屏不能全部显示时，用<code>cat</code>肯定是看不了前面的内容，而使用<code>more</code>可以解决这个问题。当看完一屏后，按空格键可以继续看下一屏。如果想提前退出，按”q”键即可。</li>
<li><code>less</code>和more命令一样，但是命令less可以实现上翻和下翻。</li>
<li>命令<code>head</code>用于显示文件的前10行，如果加-n选项则显示文件的前几行。</li>
<li>命令<code>tail</code>用于显示文件的最后10行，如果加-n选项则显示文件的后几行。</li>
</ul>
<h2 id="linux文件属性"><a href="#linux文件属性" class="headerlink" title="linux文件属性"></a>linux文件属性</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[luyaj@localhost ~]$ ls <span class="_">-l</span></div><div class="line">总用量 0</div><div class="line">drwxrwxr-x. 2 luyaj luyaj 19 10月 16 22:16 dirb</div><div class="line">drwxr-xr-x. 2 luyaj luyaj  6 10月 16 01:43 公共</div></pre></td></tr></table></figure>
<p>使用命令<code>ls -l</code>共显示了9列内容，那么他们都代表什么含义呢？</p>
<ul>
<li>第1列：包含该文件的类型、所属主、所属组以及其他用户对该文件的权限。第1位用来描述该文件的类型。<ul>
<li>d表示该文件为目录</li>
<li>-表示该文件为普通文件</li>
<li>l表示该文件为链接文件</li>
<li>b表示该文件为块设备，比如/dev/sda就是这样的文件</li>
<li>c表示该文件为串行端口设备文件（又称字符设备文件），比如键盘、鼠标、打印机、tty终端等</li>
<li>s表示该文件为套接字文件，用于进程之间的通信</li>
<li>文件类型后面9位，每3个一组，前3位为所属主（user）的权限，中间3位为所属组（group）的权限，最后3位为其他非本群组用户（others）的权限。”r”表示可读，”w”表示可写，”x”表示可执行。</li>
</ul>
</li>
<li>第2列：表示链接占用的节点（inode），如果是目录，那么与该目录下是子目录数量有关</li>
<li>第3列：表示文件的所属主</li>
<li>第4列：表示文件的所属组</li>
<li>第5列：表示该文件的大小</li>
<li>第6列、第7列和第8列：表示文件最后一次被修改的时间，依次为月份、日期、时间</li>
<li>第9列：表示文件名</li>
</ul>
<h2 id="更改文件的权限"><a href="#更改文件的权限" class="headerlink" title="更改文件的权限"></a>更改文件的权限</h2><h3 id="命令chgrp"><a href="#命令chgrp" class="headerlink" title="命令chgrp"></a>命令chgrp</h3><p>更改文件和目录的所属组，命令格式：<code>chgrp [组名] [文件名]</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># groupadd testgroup</span></div><div class="line">[root@localhost ~]<span class="comment"># touch test1</span></div><div class="line">[root@localhost ~]<span class="comment"># ls -l test1</span></div><div class="line">-rw-r--r--. 1 root root 0 10月 16 23:17 <span class="built_in">test</span>1</div><div class="line">[root@localhost ~]<span class="comment"># chgrp testgroup test1</span></div><div class="line">[root@localhost ~]<span class="comment"># ls -l test1</span></div><div class="line">-rw-r--r--. 1 root testgroup 0 10月 16 23:17 <span class="built_in">test</span>1</div></pre></td></tr></table></figure>
<p><code>groupadd</code>命令的含义为增加一个用户组。</p>
<h3 id="命令chown"><a href="#命令chown" class="headerlink" title="命令chown"></a>命令chown</h3><p>更改文件和目录的所属主，命令格式：<code>chown [-R] 账户名 文件名</code> 或者 <code>chown [-R] 账户名：组名 文件名</code>。这里的-R选项只适用于目录，作用是级联更改，即不仅更改当前目录，连目录里的目录或者文件也全部更改。</p>
<h3 id="命令chmod"><a href="#命令chmod" class="headerlink" title="命令chmod"></a>命令chmod</h3><p><code>chmod</code>命令用于改变用户对文件的读写执行权限，其格式为：“chmod [-R] xyz 文件名”。其中-R表示级联更改；xyz表示数字，即在linux中为了方便更改文件的权限，使用数字代替“rwx”，规则为：r等于4，w等于2，x等于1，-等于0。例如，“-rwxrwx—”用数字表示就是770。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[luyaj@localhost ~]$ ls -ld <span class="built_in">test</span></div><div class="line">drwxrwxr-x. 2 luyaj luyaj 19 10月 17 03:25 <span class="built_in">test</span></div><div class="line">[luyaj@localhost ~]$ chmod 750 <span class="built_in">test</span></div><div class="line">[luyaj@localhost ~]$ ls -ld <span class="built_in">test</span></div><div class="line">drwxr-x---. 2 luyaj luyaj 19 10月 17 03:25 <span class="built_in">test</span></div></pre></td></tr></table></figure>
<p>在linux系统中，一个目录的默认权限为755，而一个文件的默认权限为644。</p>
<h2 id="在linux下搜索文件"><a href="#在linux下搜索文件" class="headerlink" title="在linux下搜索文件"></a>在linux下搜索文件</h2><h3 id="命令which"><a href="#命令which" class="headerlink" title="命令which"></a>命令which</h3><p>用which命令查找PATH环境变量中的可执行文件的绝对路径。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[luyaj@localhost ~]$ <span class="built_in">which</span> vi</div><div class="line"><span class="built_in">alias</span> vi=<span class="string">'vim'</span></div><div class="line">    /usr/bin/vim</div></pre></td></tr></table></figure>
<h3 id="命令whereis"><a href="#命令whereis" class="headerlink" title="命令whereis"></a>命令whereis</h3><p>which命令是通过预先生成的一个文件列表库去查找与给出的文件名相关的文件，格式：<code>whereis [-bmsu] [文件名称]</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[luyaj@localhost ~]$ whereis ls</div><div class="line">ls: /usr/bin/ls /usr/share/man/man1/ls.1.gz /usr/share/man/man1p/ls.1p.gz</div></pre></td></tr></table></figure>
<p>这里，我们有3个文件被找到了，类似于模糊查询。</p>
<h3 id="命令find"><a href="#命令find" class="headerlink" title="命令find"></a>命令find</h3><p>使用find命令搜索文件，命令格式：<code>find [路径] [参数]</code>。</p>
<ul>
<li>-atime +n/-n:表示访问或执行时间大于或小于n天的文件。</li>
<li>ctime +n/-n:表示写入、更改inode属性（如更改所有者、权限或者链接）时间大于或小于n天的文件。</li>
<li>-mtime +n/-n:表示写入时间大于或小于n天的文件。</li>
<li>-name filename:表示直接查找该文件名的文件。<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost luyaj]<span class="comment"># mkdir test</span></div><div class="line">[root@localhost luyaj]<span class="comment"># mkdir test/test2</span></div><div class="line">[root@localhost luyaj]<span class="comment"># find . -name test2</span></div><div class="line">./<span class="built_in">test</span>/<span class="built_in">test</span>2</div><div class="line">[root@localhost luyaj]<span class="comment"># find -name test2</span></div><div class="line">./<span class="built_in">test</span>/<span class="built_in">test</span>2</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="linux系统用户与用户组管理"><a href="#linux系统用户与用户组管理" class="headerlink" title="linux系统用户与用户组管理"></a>linux系统用户与用户组管理</h1><h2 id="用户和用户组管理"><a href="#用户和用户组管理" class="headerlink" title="用户和用户组管理"></a>用户和用户组管理</h2><h3 id="新增组的命令groupadd"><a href="#新增组的命令groupadd" class="headerlink" title="新增组的命令groupadd"></a>新增组的命令groupadd</h3><p>命令格式：<code>groupadd [-g GID] groupname</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost luyaj]<span class="comment"># groupadd grptest1</span></div><div class="line">[root@localhost luyaj]<span class="comment"># tail -n1 /etc/group</span></div><div class="line">grptest1:x:1003:</div></pre></td></tr></table></figure>
<p>如果不加“-g”选项则按照系统默认的gid创建组。跟uid一样，gid也是从500开始，我们也可以自定义gid：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost luyaj]<span class="comment"># groupadd -g 511 grptest2</span></div><div class="line">[root@localhost luyaj]<span class="comment"># tail -n2 /etc/group</span></div><div class="line">grptest1:x:1003:</div><div class="line">grptest2:x:511:</div></pre></td></tr></table></figure>
<h3 id="删除组的命令groupdel"><a href="#删除组的命令groupdel" class="headerlink" title="删除组的命令groupdel"></a>删除组的命令groupdel</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost luyaj]<span class="comment"># groupdel grptest2</span></div><div class="line">[root@localhost luyaj]<span class="comment"># tail -n3 /etc/group</span></div><div class="line">luyaj:x:1000:</div><div class="line">user1:x:1002:</div><div class="line">grptest1:x:1003:</div></pre></td></tr></table></figure>
<p>groupdel命令无特殊选项，但有一种情况不能删除组：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost luyaj]<span class="comment"># groupdel user1</span></div><div class="line">groupdel：不能移除用户“user1”的主组</div></pre></td></tr></table></figure>
<p>这个例子中，user1组中包含user1账户，只有先删除账户才可以删除该组。</p>
<h3 id="增加用户的命令useradd"><a href="#增加用户的命令useradd" class="headerlink" title="增加用户的命令useradd"></a>增加用户的命令useradd</h3><p>命令格式：<code>useradd [-u UID][-g GID][-d HOME][-M][-s]</code>，各个选项的含义如下：</p>
<ul>
<li>-u：表示自定义UID。</li>
<li>-g：表示使新增用户属于已经存在的某个组，后面可以跟组id，也可以跟组名。</li>
<li>-d：表示自定义用户的家目录。</li>
<li>-M：表示不建立家目录。</li>
<li>-s：表示自定义shell。</li>
</ul>
<p>下面我们新建一个用户test10，示例如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost luyaj]<span class="comment"># useradd test10</span></div><div class="line">[root@localhost luyaj]<span class="comment"># tail -n1 /etc/passwd</span></div><div class="line"><span class="built_in">test</span>10:x:1002:1004::/home/<span class="built_in">test</span>10:/bin/bash</div><div class="line">[root@localhost luyaj]<span class="comment"># tail -n1 /etc/group</span></div><div class="line"><span class="built_in">test</span>10:x:1004:</div></pre></td></tr></table></figure></p>
<p>如果useradd不加任何选项，直接跟用户名，那么会创建一个跟用户名同名的组。有的时候需要我们自己去定义：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost luyaj]<span class="comment"># useradd -u510 -g 513 -M -s /sbin/nologin user11</span></div><div class="line">useradd：“513”组不存在</div></pre></td></tr></table></figure>
<h3 id="删除账户的命令userdel"><a href="#删除账户的命令userdel" class="headerlink" title="删除账户的命令userdel"></a>删除账户的命令userdel</h3><p>命令格式：<code>userdel [-r] username</code>，其中-r选项的作用是，当删除用户时一并删除该用户的家目录。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@localhost luyaj]<span class="comment"># userdel user1</span></div><div class="line">[root@localhost luyaj]<span class="comment"># tail -n3 /etc/passwd</span></div><div class="line">tcpdump:x:72:72::/:/sbin/nologin</div><div class="line">luyaj:x:1000:1000:luyaJ:/home/luyaj:/bin/bash</div><div class="line"><span class="built_in">test</span>10:x:1002:1004::/home/<span class="built_in">test</span>10:/bin/bash</div><div class="line">[root@localhost luyaj]<span class="comment"># ls -ld /home/user1</span></div><div class="line">drwx------. 3 1001 1002 78 10月 16 23:35 /home/user1</div></pre></td></tr></table></figure>
<p>这里可以看出，未加选项时，只删除了用户，没有家目录还在。</p>
<h2 id="用户密码管理"><a href="#用户密码管理" class="headerlink" title="用户密码管理"></a>用户密码管理</h2><h3 id="命令passwd"><a href="#命令passwd" class="headerlink" title="命令passwd"></a>命令passwd</h3><p>为用户设置密码可以使用命令passwd，命令格式：<code>passwd [username]</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost luyaj]<span class="comment"># passwd</span></div><div class="line">更改用户 root 的密码 。</div><div class="line">新的 密码：</div><div class="line">重新输入新的 密码：</div><div class="line">passwd：所有的身份验证令牌已经成功更新。</div></pre></td></tr></table></figure>
<p>如果你登陆的是root账号，后面可以跟普通用户的名字，意思是修改指定账户的密码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost luyaj]<span class="comment"># passwd test10</span></div><div class="line">更改用户 <span class="built_in">test</span>10 的密码 。</div><div class="line">新的 密码：</div><div class="line">无效的密码： 密码未通过字典检查 - 它基于字典单词</div><div class="line">重新输入新的 密码：</div><div class="line">passwd：所有的身份验证令牌已经成功更新。</div></pre></td></tr></table></figure></p>
<p>需要注意的是，只有root才能修改其他账户的密码，普通账户只能修改自己的密码。</p>
<h3 id="命令mkpasswd"><a href="#命令mkpasswd" class="headerlink" title="命令mkpasswd"></a>命令mkpasswd</h3><p>用于生成密码。</p>
<h1 id="linux磁盘管理"><a href="#linux磁盘管理" class="headerlink" title="linux磁盘管理"></a>linux磁盘管理</h1><h2 id="查看磁盘或者目录的容量"><a href="#查看磁盘或者目录的容量" class="headerlink" title="查看磁盘或者目录的容量"></a>查看磁盘或者目录的容量</h2><h3 id="命令df"><a href="#命令df" class="headerlink" title="命令df"></a>命令df</h3><p>命令df用来查看已挂载磁盘的总容量、使用容量、剩余容量，可以不加任何参数，默认以KB为单位显示：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[luyaj@localhost ~]$ df</div><div class="line">文件系统               1K-块    已用     可用 已用% 挂载点</div><div class="line">/dev/mapper/cl-root 17811456 3454476 14356980   20% /</div><div class="line">devtmpfs              484108       0   484108    0% /dev</div><div class="line">tmpfs                 499968     156   499812    1% /dev/shm</div><div class="line">tmpfs                 499968    7188   492780    2% /run</div><div class="line">tmpfs                 499968       0   499968    0% /sys/fs/cgroup</div><div class="line">/dev/sda1            1038336  176564   861772   18% /boot</div><div class="line">tmpfs                  99996      24    99972    1% /run/user/1000</div><div class="line">/dev/sr0             4276440 4276440        0  100% /run/media/luyaj/CentOS 7 x86_64</div></pre></td></tr></table></figure>
<p>df命令的常用选项有-i、-h、-k和-m：</p>
<ul>
<li><p>-i：表示查看inodes的使用状况：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[luyaj@localhost ~]$ df -i</div><div class="line">文件系统              Inode 已用(I) 可用(I) 已用(I)% 挂载点</div><div class="line">/dev/mapper/cl-root 8910848  119944 8790904       2% /</div><div class="line">devtmpfs             121027     391  120636       1% /dev</div><div class="line">tmpfs                124992      10  124982       1% /dev/shm</div><div class="line">tmpfs                124992     546  124446       1% /run</div><div class="line">tmpfs                124992      16  124976       1% /sys/fs/cgroup</div><div class="line">/dev/sda1            524288     330  523958       1% /boot</div><div class="line">tmpfs                124992      30  124962       1% /run/user/1000</div><div class="line">/dev/sr0                  0       0       0        - /run/media/luyaj/CentOS 7 x86_64</div></pre></td></tr></table></figure>
</li>
<li><p>-h：表示使用合适的单位显示，例如G：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[luyaj@localhost ~]$ df -h</div><div class="line">文件系统             容量  已用  可用 已用% 挂载点</div><div class="line">/dev/mapper/cl-root   17G  3.3G   14G   20% /</div><div class="line">devtmpfs             473M     0  473M    0% /dev</div><div class="line">tmpfs                489M  156K  489M    1% /dev/shm</div><div class="line">tmpfs                489M  7.1M  482M    2% /run</div><div class="line">tmpfs                489M     0  489M    0% /sys/fs/cgroup</div><div class="line">/dev/sda1           1014M  173M  842M   18% /boot</div><div class="line">tmpfs                 98M   24K   98M    1% /run/user/1000</div><div class="line">/dev/sr0             4.1G  4.1G     0  100% /run/media/luyaj/CentOS 7 x86_64</div></pre></td></tr></table></figure>
</li>
<li><p>-k、-m：分别以”K”和”M”为单位显示：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">[luyaj@localhost ~]$ df -k</div><div class="line">文件系统               1K-块    已用     可用 已用% 挂载点</div><div class="line">/dev/mapper/cl-root 17811456 3454460 14356996   20% /</div><div class="line">devtmpfs              484108       0   484108    0% /dev</div><div class="line">tmpfs                 499968     156   499812    1% /dev/shm</div><div class="line">tmpfs                 499968    7188   492780    2% /run</div><div class="line">tmpfs                 499968       0   499968    0% /sys/fs/cgroup</div><div class="line">/dev/sda1            1038336  176564   861772   18% /boot</div><div class="line">tmpfs                  99996      24    99972    1% /run/user/1000</div><div class="line">/dev/sr0             4276440 4276440        0  100% /run/media/luyaj/CentOS 7 x86_64</div><div class="line">[luyaj@localhost ~]$ df -m</div><div class="line">文件系统            1M-块  已用  可用 已用% 挂载点</div><div class="line">/dev/mapper/cl-root 17394  3374 14021   20% /</div><div class="line">devtmpfs              473     0   473    0% /dev</div><div class="line">tmpfs                 489     1   489    1% /dev/shm</div><div class="line">tmpfs                 489     8   482    2% /run</div><div class="line">tmpfs                 489     0   489    0% /sys/fs/cgroup</div><div class="line">/dev/sda1            1014   173   842   18% /boot</div><div class="line">tmpfs                  98     1    98    1% /run/user/1000</div><div class="line">/dev/sr0             4177  4177     0  100% /run/media/luyaj/CentOS 7 x86_64</div></pre></td></tr></table></figure>
</li>
</ul>
<p>/dev/shm为内存挂载点，如果你想把文件放到内存里，就可以放到这个目录下。</p>
<h3 id="命令du"><a href="#命令du" class="headerlink" title="命令du"></a>命令du</h3><p>用来查看某个目录或文件所占空间的大小，命令格式：<code>du [-abckmsh][文件或者目录名]</code>。</p>
<ul>
<li>-a：表示全部文件和目录的大小都列出来。如果不指定单位，默认显示单位为”KB”。</li>
<li>-b：表示列出的值以”bytes”为单位输出。</li>
<li>-k：表示以”KB”为单位输出，这和不加选项是一样的。</li>
<li>-m：表示以”MB”为单位输出。</li>
<li>-h：表示系统自动调节单位。</li>
<li>-c：表示最后加总。</li>
<li>-s：表示只列出总和。<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">[luyaj@localhost ~]$ du <span class="built_in">test</span></div><div class="line">0   <span class="built_in">test</span>/<span class="built_in">test</span>2</div><div class="line">0   <span class="built_in">test</span>/<span class="built_in">test</span>3</div><div class="line">0   <span class="built_in">test</span></div><div class="line">[luyaj@localhost ~]$ du <span class="_">-a</span> <span class="built_in">test</span></div><div class="line">0   <span class="built_in">test</span>/<span class="built_in">test</span>2</div><div class="line">0   <span class="built_in">test</span>/<span class="built_in">test</span>3/1.txt</div><div class="line">0   <span class="built_in">test</span>/<span class="built_in">test</span>3</div><div class="line">0   <span class="built_in">test</span></div><div class="line">[luyaj@localhost ~]$ du -b /etc/passwd</div><div class="line">2233    /etc/passwd</div><div class="line">[luyaj@localhost ~]$ du -k /etc/passwd</div><div class="line">4   /etc/passwd</div><div class="line">[luyaj@localhost ~]$ du -m /etc/passwd</div><div class="line">1   /etc/passwd</div><div class="line">[luyaj@localhost ~]$ du -h /etc/passwd</div><div class="line">4.0K    /etc/passwd</div><div class="line">[luyaj@localhost ~]$ du -c <span class="built_in">test</span></div><div class="line">0   <span class="built_in">test</span>/<span class="built_in">test</span>2</div><div class="line">0   <span class="built_in">test</span>/<span class="built_in">test</span>3</div><div class="line">0   <span class="built_in">test</span></div><div class="line">0   总用量</div><div class="line">[luyaj@localhost ~]$ du <span class="_">-s</span> <span class="built_in">test</span></div><div class="line">0   <span class="built_in">test</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="磁盘的分区和格式化"><a href="#磁盘的分区和格式化" class="headerlink" title="磁盘的分区和格式化"></a>磁盘的分区和格式化</h2><p>用文件来表示硬件分区——<code>/dev/sda5</code>解释一下：</p>
<ul>
<li>dev是存放所有硬件设备文件的目录</li>
<li>sd是硬件设备的代号，hd代表IDE设备，sd代表SCSI和sata设备</li>
<li>a是同类型设备的编号，a代表第一个硬盘，b代表第二个硬盘，以此类推</li>
<li>5是分区号：1~4表示主分区或拓展分区，5表示逻辑分区<br>举几个例子：</li>
<li>/dev/sdb3：计算机中第二块SATA硬盘的第三个主分区。</li>
<li>/dev/sda8：计算机中第一块SATA硬盘的第四个逻辑分区。</li>
<li>/dev/hda1：计算机中第四块IDE硬盘的第一个主分区</li>
</ul>
<h3 id="增加虚拟磁盘"><a href="#增加虚拟磁盘" class="headerlink" title="增加虚拟磁盘"></a>增加虚拟磁盘</h3><p>在系统关机的状态下，选择你的虚拟机，右键<strong>设置</strong>，然后<strong>添加</strong>硬盘，创建<strong>新虚拟磁盘</strong>，将虚拟磁盘拆分成多个文件，完成。</p>
<h3 id="命令fdisk"><a href="#命令fdisk" class="headerlink" title="命令fdisk"></a>命令fdisk</h3><p>这里我已经创建好了新的磁盘，所以执行命令<code>fdisk -l</code>会发现新增了一个磁盘”/dev/sdb”。</p>
<p>如果只执行命令<code>fdisk /dev/sda</code>就会进入另一种模式，在这个模式下，可以对磁盘进行分区操作。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">[root@localhost luyaj]<span class="comment"># fdisk /dev/sdb</span></div><div class="line">欢迎使用 fdisk (util-linux 2.23.2)。</div><div class="line"></div><div class="line">更改将停留在内存中，直到您决定将更改写入磁盘。</div><div class="line">使用写入命令前请三思。</div><div class="line"></div><div class="line">Device does not contain a recognized partition table</div><div class="line">使用磁盘标识符 0xad054854 创建新的 DOS 磁盘标签。</div><div class="line"></div><div class="line">命令(输入 m 获取帮助)：m</div><div class="line">命令操作</div><div class="line">   a   toggle a bootable flag</div><div class="line">   b   edit bsd disklabel</div><div class="line">   c   toggle the dos compatibility flag</div><div class="line">   d   delete a partition</div><div class="line">   g   create a new empty GPT partition table</div><div class="line">   G   create an IRIX (SGI) partition table</div><div class="line">   l   list known partition types</div><div class="line">   m   <span class="built_in">print</span> this menu</div><div class="line">   n   add a new partition</div><div class="line">   o   create a new empty DOS partition table</div><div class="line">   p   <span class="built_in">print</span> the partition table</div><div class="line">   q   quit without saving changes</div><div class="line">   s   create a new empty Sun disklabel</div><div class="line">   t   change a partition’s system id</div><div class="line">   u   change display/entry units</div><div class="line">   v   verify the partition table</div><div class="line">   w   write table to disk and <span class="built_in">exit</span></div><div class="line">   x   extra functionality (experts only)</div></pre></td></tr></table></figure>
<p>输入p命令，我们可以看到当前无分区：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">命令(输入 m 获取帮助)：p</div><div class="line"></div><div class="line">磁盘 /dev/sdb：8589 MB, 8589934592 字节，16777216 个扇区</div><div class="line">Units = 扇区 of 1 * 512 = 512 bytes</div><div class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</div><div class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</div><div class="line">磁盘标签类型：dos</div><div class="line">磁盘标识符：0xad054854</div><div class="line"></div><div class="line">   设备 Boot      Start         End      Blocks   Id  System</div></pre></td></tr></table></figure></p>
<p>那么我们开始创建分区：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">命令(输入 m 获取帮助)：n</div><div class="line">Partition <span class="built_in">type</span>:</div><div class="line">   p   primary (0 primary, 0 extended, 4 free)</div><div class="line">   e   extended</div><div class="line">Select (default p): p</div><div class="line">分区号 (1-4，默认 1)：1</div><div class="line">起始 扇区 (2048-16777215，默认为 2048)：2048</div><div class="line">Last 扇区, +扇区 or +size&#123;K,M,G&#125; (2048-16777215，默认为 16777215)：+1000M</div><div class="line">分区 1 已设置为 Linux 类型，大小设为 1000 MiB</div></pre></td></tr></table></figure></p>
<p>使用n命令新建分区，选择p（主分区），分区号，起始扇区都可以默认不填（或者你也可以填），<br>Last扇区填“+1000M”，这样方便又不容易出错。一直创建主分区到4，我们可以看到：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">命令(输入 m 获取帮助)：n</div><div class="line">Partition <span class="built_in">type</span>:</div><div class="line">   p   primary (3 primary, 0 extended, 1 free)</div><div class="line">   e   extended</div><div class="line">Select (default e): </div><div class="line">Using default response e</div><div class="line">已选择分区 4</div><div class="line">起始 扇区 (6146048-16777215，默认为 6146048)：</div><div class="line">将使用默认值 6146048</div><div class="line">Last 扇区, +扇区 or +size&#123;K,M,G&#125; (6146048-16777215，默认为 16777215)：+1000M</div><div class="line">分区 4 已设置为 Extended 类型，大小设为 1000 MiB</div></pre></td></tr></table></figure>
<p>上面就是，创建完第3个分区之后，创建第4个分区时选择拓展分区，输入命令p查看：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">命令(输入 m 获取帮助)：p</div><div class="line"></div><div class="line">磁盘 /dev/sdb：8589 MB, 8589934592 字节，16777216 个扇区</div><div class="line">Units = 扇区 of 1 * 512 = 512 bytes</div><div class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</div><div class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</div><div class="line">磁盘标签类型：dos</div><div class="line">磁盘标识符：0xbfa73b9f</div><div class="line"></div><div class="line">   设备 Boot      Start         End      Blocks   Id  System</div><div class="line">/dev/sdb1            2048     2050047     1024000   83  Linux</div><div class="line">/dev/sdb2         2050048     4098047     1024000   83  Linux</div><div class="line">/dev/sdb3         4098048     6146047     1024000   83  Linux</div><div class="line">/dev/sdb4         6146048     8194047     1024000    5  Extended</div></pre></td></tr></table></figure></p>
<p>接下来我们继续创建分区：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">命令(输入 m 获取帮助)：n</div><div class="line">All primary partitions are <span class="keyword">in</span> use</div><div class="line">添加逻辑分区 5</div><div class="line">起始 扇区 (6148096-8194047，默认为 6148096)：</div><div class="line">将使用默认值 6148096</div><div class="line">Last 扇区, +扇区 or +size&#123;K,M,G&#125; (6148096-8194047，默认为 8194047)：</div><div class="line">将使用默认值 8194047</div><div class="line">分区 5 已设置为 Linux 类型，大小设为 999 MiB</div><div class="line"></div><div class="line">命令(输入 m 获取帮助)：p</div><div class="line"></div><div class="line">磁盘 /dev/sdb：8589 MB, 8589934592 字节，16777216 个扇区</div><div class="line">Units = 扇区 of 1 * 512 = 512 bytes</div><div class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</div><div class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</div><div class="line">磁盘标签类型：dos</div><div class="line">磁盘标识符：0xbfa73b9f</div><div class="line"></div><div class="line">   设备 Boot      Start         End      Blocks   Id  System</div><div class="line">/dev/sdb1            2048     2050047     1024000   83  Linux</div><div class="line">/dev/sdb2         2050048     4098047     1024000   83  Linux</div><div class="line">/dev/sdb3         4098048     6146047     1024000   83  Linux</div><div class="line">/dev/sdb4         6146048     8194047     1024000    5  Extended</div><div class="line">/dev/sdb5         6148096     8194047     1022976   83  Linux</div></pre></td></tr></table></figure></p>
<p>此时再分区就跟之前的不一样了，只需要直接定义分区大小就可以了。需要注意的是，当创建完前3个主分区后，要把剩余的磁盘空间全部划分给第4个拓展分区，不然剩下的空间就浪费了。因为创建完拓展分区后，再划分新的分区时是在已经划分的拓展分区里来分的。</p>
<p><strong>注意</strong>：“/dev/sdb4”为拓展分区，这个分区是不可以格式化的。“/dev/sdb5”是“/dev/sdb4”的子分区，称为逻辑分区。删除分区使用命令d，在弄好的分区界面直接按“Ctrl+c”键可以直接退出，这样刚做的分区便全部取消。</p>
<h2 id="格式化磁盘分区"><a href="#格式化磁盘分区" class="headerlink" title="格式化磁盘分区"></a>格式化磁盘分区</h2><p>磁盘分区好了，需要对每个分区进行格式化才能使用。所谓格式化，就是安装文件系统，Windows下的文件系统有Fat32和NTFS，CentOS使用的文件系统是ext。</p>
<p>使用man命令可以看出<code>mke2fs</code>,<code>mkfs.ext2</code>,<code>mkfs.ext3</code>,<code>mkfs.etx4</code>这4个命令是一样的。</p>
<p>把新建的分区格式化为ext4文件系统：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">[root@localhost jly]# mkfs.ext4 /dev/sdb1</div><div class="line">mke2fs 1.42.9 (28-Dec-2013)</div><div class="line">文件系统标签=</div><div class="line">OS type: Linux</div><div class="line">块大小=4096 (log=2)</div><div class="line">分块大小=4096 (log=2)</div><div class="line">Stride=0 blocks, Stripe width=0 blocks</div><div class="line">64000 inodes, 256000 blocks</div><div class="line">12800 blocks (5.00%) reserved for the super user</div><div class="line">第一个数据块=0</div><div class="line">Maximum filesystem blocks=262144000</div><div class="line">8 block groups</div><div class="line">32768 blocks per group, 32768 fragments per group</div><div class="line">8000 inodes per group</div><div class="line">Superblock backups stored on blocks: </div><div class="line">    32768, 98304, 163840, 229376</div><div class="line"></div><div class="line">Allocating group tables: 完成                            </div><div class="line">正在写入inode表: 完成                            </div><div class="line">Creating journal (4096 blocks): 完成</div><div class="line">Writing superblocks and filesystem accounting information: 完成</div></pre></td></tr></table></figure></p>
<h2 id="挂载-卸载磁盘"><a href="#挂载-卸载磁盘" class="headerlink" title="挂载/卸载磁盘"></a>挂载/卸载磁盘</h2><p>挂载到’/mnt’空目录上，此后操作’/mnt’目录就是操作’/dev/sda3’分区，例如在里面创建目录，拷贝文件等。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost jly]<span class="comment"># mount /dev/sdb1 /mnt</span></div></pre></td></tr></table></figure></p>
<p>查看已挂载分区的使用情况：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@localhost jly]<span class="comment"># df -T</span></div><div class="line">文件系统            类型        1K-块    已用     可用 已用% 挂载点</div><div class="line">/dev/mapper/cl-root xfs      17811456 3454780 14356676   20% /</div><div class="line">devtmpfs            devtmpfs   484108       0   484108    0% /dev</div><div class="line">tmpfs               tmpfs      499968     156   499812    1% /dev/shm</div><div class="line">tmpfs               tmpfs      499968    7192   492776    2% /run</div><div class="line">tmpfs               tmpfs      499968       0   499968    0% /sys/fs/cgroup</div><div class="line">/dev/sda1           xfs       1038336  176564   861772   18% /boot</div><div class="line">tmpfs               tmpfs       99996       8    99988    1% /run/user/1000</div><div class="line">/dev/sr0            iso9660   4276440 4276440        0  100% /run/media/jly/CentOS 7 x86_64</div><div class="line">/dev/sdb1           ext4       991512    2504   921424    1% /mnt</div></pre></td></tr></table></figure></p>
<p>卸载分区：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost jly]<span class="comment"># umount /mnt</span></div></pre></td></tr></table></figure></p>
<h1 id="文档的压缩与打包"><a href="#文档的压缩与打包" class="headerlink" title="文档的压缩与打包"></a>文档的压缩与打包</h1><ul>
<li><code>.gz</code>:表示由gzip压缩工具压缩的文件</li>
<li><code>.bz2</code>:表示由bzip2压缩工具压缩的文件</li>
<li><code>.tar</code>:表示由tar打包程序打包的文件（tar并没有压缩功能，只是把一个目录合并成一个文件）</li>
<li><code>.tar.gz</code>:可以理解为先由tar打包，再由gzip压缩</li>
<li><code>.tar.bz2</code>:可以理解为先由tar打包，再由bzip2压缩</li>
</ul>
<h2 id="gzip压缩"><a href="#gzip压缩" class="headerlink" title="gzip压缩"></a>gzip压缩</h2><p>gzip命令格式：<code>gzip [-d#] filename</code>。<code>-d</code>:在解压缩时使用；<code>-#</code>表示压缩等级，1为最差，9为最好，默认为6。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mkdir <span class="built_in">test</span></div><div class="line">[jly@localhost ~]$ touch test.txt</div><div class="line">[jly@localhost ~]$ mv test.txt <span class="built_in">test</span></div><div class="line">[jly@localhost ~]$ <span class="built_in">cd</span> <span class="built_in">test</span></div><div class="line">[jly@localhost <span class="built_in">test</span>]$ ls</div><div class="line">test.txt</div><div class="line">[jly@localhost <span class="built_in">test</span>]$ gzip test.txt</div><div class="line">[jly@localhost <span class="built_in">test</span>]$ ls</div><div class="line">test.txt.gz</div></pre></td></tr></table></figure>
<p>由上面可以看出，gzip后面直接跟文件名，表示在该目录下压缩该文件，而原文件也会消失。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[jly@localhost <span class="built_in">test</span>]$ gzip <span class="_">-d</span> test.txt.gz</div><div class="line">[jly@localhost <span class="built_in">test</span>]$ ls</div><div class="line">test.txt</div></pre></td></tr></table></figure>
<p>使用<code>gzip -d</code>命令表示解压压缩文件。gzip不支持压缩目录。</p>
<h2 id="bzip2压缩工具"><a href="#bzip2压缩工具" class="headerlink" title="bzip2压缩工具"></a>bzip2压缩工具</h2><p><code>bzip2</code>命令格式：<code>bzip2 [-dz] filename</code>。<code>-z</code>压缩（加不加都可以压缩），<code>-d</code>解压缩。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[jly@localhost <span class="built_in">test</span>]$ bzip2 test.txt</div><div class="line">[jly@localhost <span class="built_in">test</span>]$ ls</div><div class="line">test.txt.bz2</div><div class="line">[jly@localhost <span class="built_in">test</span>]$ bzip2 <span class="_">-d</span> test.txt.bz2</div><div class="line">[jly@localhost <span class="built_in">test</span>]$ ls</div><div class="line">test.txt</div></pre></td></tr></table></figure>
<h2 id="tar压缩工具"><a href="#tar压缩工具" class="headerlink" title="tar压缩工具"></a>tar压缩工具</h2><p><code>tar</code>本身就是一个大包工具，可以把目录打包成一个文件，它把所有的文件整合成一个大文件整体，方便复制或移动。命令格式：<code>tar [-zjxcvfpP] filename tar</code>。下面介绍下常用的参数：</p>
<ul>
<li>-z:表示同时用gzip压缩</li>
<li>-j:表示同时用bzip2压缩</li>
<li>-x:表示解包或解压缩</li>
<li>-t:表示查看tar包里的文件</li>
<li>-c:表示建立一个tar包或者压缩文件包</li>
<li>-v:表示可视化</li>
<li>-f:后面跟文件名（即“-f filename”），表示压缩后的文件名为filename，或者解压文件filename。注意，在有多个参数的情况下，将-f参数写在最后面。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[jly@localhost <span class="built_in">test</span>]$ bzip2 test.txt</div><div class="line">[jly@localhost <span class="built_in">test</span>]$ mkdir <span class="built_in">test</span>111</div><div class="line">[jly@localhost <span class="built_in">test</span>]$ touch <span class="built_in">test</span>111/<span class="built_in">test</span>2.txt</div><div class="line">[jly@localhost <span class="built_in">test</span>]$ <span class="built_in">echo</span> <span class="string">"nihao"</span> &gt; !$</div><div class="line"><span class="built_in">echo</span> <span class="string">"nihao"</span> &gt; <span class="built_in">test</span>111/<span class="built_in">test</span>2.txt</div><div class="line">[jly@localhost <span class="built_in">test</span>]$ ls</div><div class="line"><span class="built_in">test</span>111  test.txt.bz2</div><div class="line">[jly@localhost <span class="built_in">test</span>]$ tar -cvf <span class="built_in">test</span>111.tar <span class="built_in">test</span>111</div><div class="line"><span class="built_in">test</span>111/</div><div class="line"><span class="built_in">test</span>111/<span class="built_in">test</span>2.txt</div><div class="line">[jly@localhost <span class="built_in">test</span>]$ ls</div><div class="line"><span class="built_in">test</span>111  <span class="built_in">test</span>111.tar  test.txt.bz2</div></pre></td></tr></table></figure>
<p>上例中，使用tar命令把test111打包成test111.tar（记住-f参数后紧跟打包后的文件名，然后再跟需要打包的目录或文件）。且使用tar命令打包，原文件也不会消失。</p>
<p>不加-v，表示不可视化。第2行的意思是–将test111和test.txt.bz2一起打包在test.tar中。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[jly@localhost <span class="built_in">test</span>]$ rm <span class="_">-f</span> <span class="built_in">test</span>111.tar</div><div class="line">[jly@localhost <span class="built_in">test</span>]$ tar -cf test.tar <span class="built_in">test</span>111 test.txt.bz2</div><div class="line">[jly@localhost <span class="built_in">test</span>]$ ls</div><div class="line"><span class="built_in">test</span>111  test.tar  test.txt.bz2</div></pre></td></tr></table></figure></p>
<p>注意：不管是打包还是解包，原来的文件都不会删除的，而且会覆盖当前已经存在的文件或者是目录。</p>
<h3 id="打包的同时使用gzip压缩"><a href="#打包的同时使用gzip压缩" class="headerlink" title="打包的同时使用gzip压缩"></a>打包的同时使用gzip压缩</h3><p>tar命令非常好用的功能就是可以在打包时直接压缩，支持gzip压缩和bzip2压缩。</p>
<p>gzip压缩方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[jly@localhost <span class="built_in">test</span>]$ tar -czvf <span class="built_in">test</span>111.tar.gz <span class="built_in">test</span>111</div><div class="line"><span class="built_in">test</span>111/</div><div class="line"><span class="built_in">test</span>111/<span class="built_in">test</span>2.txt</div><div class="line">[jly@localhost <span class="built_in">test</span>]$ ls</div><div class="line"><span class="built_in">test</span>111  <span class="built_in">test</span>111.tar.gz  test.tar  test.txt.bz2</div></pre></td></tr></table></figure></p>
<p>使用<code>-zxvf</code>选项解压<code>.tar.gz</code>格式的压缩包：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[jly@localhost <span class="built_in">test</span>]$ rm -rf <span class="built_in">test</span>111</div><div class="line">[jly@localhost <span class="built_in">test</span>]$ ls</div><div class="line"><span class="built_in">test</span>111.tar.gz  test.tar  test.txt.bz2</div><div class="line">[jly@localhost <span class="built_in">test</span>]$ tar -zxvf <span class="built_in">test</span>111.tar.gz</div><div class="line"><span class="built_in">test</span>111/</div><div class="line"><span class="built_in">test</span>111/<span class="built_in">test</span>2.txt</div><div class="line">[jly@localhost <span class="built_in">test</span>]$ ls</div><div class="line"><span class="built_in">test</span>111  <span class="built_in">test</span>111.tar.gz  test.tar  test.txt.bz2</div></pre></td></tr></table></figure></p>
<h3 id="打包的同时使用bzip2压缩"><a href="#打包的同时使用bzip2压缩" class="headerlink" title="打包的同时使用bzip2压缩"></a>打包的同时使用bzip2压缩</h3><p>和gzip压缩有所不同，这里使用<code>-cjvf</code>选项来压缩。使用<code>-jxvf</code>选项来解压<code>.tar.bz2</code>格式的压缩包。</p>
<h2 id="使用zip压缩"><a href="#使用zip压缩" class="headerlink" title="使用zip压缩"></a>使用zip压缩</h2><p>zip后面先跟目录文件名（即要压缩后的自定义压缩包名），然后跟要压缩的文件或者目录。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[jly@localhost ~]$ touch 1.txt</div><div class="line">[jly@localhost ~]$ zip 1.txt.zip 1.txt</div><div class="line">  adding: 1.txt (stored 0%)</div></pre></td></tr></table></figure></p>
<p>当一个目录下还有二级目录甚至更多级目录时，如果想一并压缩所有文件，必须加上-r选项，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[jly@localhost ~]$ zip -r dir1.zip dir1/</div></pre></td></tr></table></figure></p>
<p>解压方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[jly@localhost ~]$ unzip 1.txt.zip</div></pre></td></tr></table></figure></p>
<h1 id="文本编辑工具Vim"><a href="#文本编辑工具Vim" class="headerlink" title="文本编辑工具Vim"></a>文本编辑工具Vim</h1><p>vim有三种模式：一般模式、编辑模式和命令模式。</p>
<ul>
<li>在<strong>一般模式</strong>下不可以修改某个字符，想要修改字符，就要进入<strong>编辑模式</strong>。从一般模式进入编辑模式，你只需要按i/I/a/A/o/O/r/R中的某一个键即可。当进入编辑模式时，就会显示“插入/INSERT/REPLACE”的其中一个。</li>
<li>如果想从编辑模式回到一般模式，直接按esc键即可。</li>
<li>在一般模式下，输入“：”或者“/”即可进入<strong>命令模式</strong>。在该模式下，可以搜索某个字符或者字符串，也可以实现保存、替换、退出、显示行号等操作。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//vim test.txt文本内容显示如下</div><div class="line">qwqeqwqeqwqwrqrwwrw</div><div class="line">dvfvgbg</div><div class="line">//在一般模式下，先输入<span class="string">"："</span>，再输入<span class="string">"/qw"</span>，就会匹配出所有符合条件的qw。</div><div class="line">//或者在一般模式下，先输入<span class="string">"/"</span>，再直接输入qw，同样匹配所有qw。</div></pre></td></tr></table></figure>
<p>命令模式的其他功能：</p>
<ul>
<li><code>:w</code> : 保存文本</li>
<li><code>:q</code> : 退出Vim</li>
<li><code>:w!</code> : 强制保存，在root用户下，即使文本只读也可以完全保存</li>
<li><code>:q!</code> : 强制退出，所有改动不生效</li>
<li><code>:wq</code> : 保存并退出</li>
<li><code>:set nu</code> : 显示行号</li>
<li><code>:set nonu</code> : 不显示行号</li>
</ul>
<p>到这里为止就是学习《跟阿铭学linux》的前8章内容，有需要会再更新。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简介：使用虚拟机安装linux以及linux学习。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客问题</title>
    <link href="http://yoursite.com/2017/10/10/hexo%E5%8D%9A%E5%AE%A2%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/10/10/hexo博客问题/</id>
    <published>2017-10-10T06:28:48.000Z</published>
    <updated>2017-10-13T06:21:49.731Z</updated>
    
    <content type="html"><![CDATA[<p>hexo博客中遇见的问题及解决办法。</p>
<a id="more"></a>
<h2 id="解决fs-SyncWriteStream报错问题"><a href="#解决fs-SyncWriteStream报错问题" class="headerlink" title="解决fs.SyncWriteStream报错问题"></a>解决fs.SyncWriteStream报错问题</h2><p>最近，在执行hexo命令时，遇到了这样的报错：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(node:<span class="number">11320</span>) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.</div></pre></td></tr></table></figure>
<p>在网上查阅资料发现，原来是<code>node.js</code>从8.0开始弃用<code>fs.SyncWriteStream</code>这个方法。有人issue了这个问题（<a href="https://github.com/hexojs/hexo/issues/2598" target="_blank" rel="external">fs.SyncWriteStream</a>），原来是需要更新hexo-fs插件：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-fs --save</div></pre></td></tr></table></figure>
<p>但是这样我更新之后还是有同样的错误，那么就是用以下方法定位错误在哪里：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo clean --debug</div></pre></td></tr></table></figure>
<p>结果如图：</p>
<p><img src="http://oxligjg1w.bkt.clouddn.com/error-debug.png" alt="hexo--debug"></p>
<p>可以看到我所在报错的位置是<code>hexo-deployer-git</code>，于是找到<code>hexo-deployer-git\node_modules\hexo-fs\lib\fs.js</code>的第718行，将<code>exports.SyncWriteStream = fs.SyncWriteStream;</code>注释掉，即可。</p>
<p>再次使用<code>$ hexo clean --debug</code>，发现问题解决了：</p>
<p><img src="http://oxligjg1w.bkt.clouddn.com/hexo--debug.png" alt=""></p>
<h2 id="解决Template-render-error问题"><a href="#解决Template-render-error问题" class="headerlink" title="解决Template render error问题"></a>解决Template render error问题</h2><p>在执行命令时，又遇到了这样的问题：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</div><div class="line">Template render error: (unknown path)</div></pre></td></tr></table></figure>
<p>经过查询，我知道了，有两个地方会导致出现这样的问题：①<code>_config.yml</code>配置文件中，你写的格式、缩进等可能会导致出现问题；②在你的<code>page/post</code>可能是你的哪篇文章出现了问题。</p>
<p>帮助文档：<a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">hexo–troubleshooting</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo博客中遇见的问题及解决办法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>CSS_齐舞</title>
    <link href="http://yoursite.com/2017/09/16/CSS-%E9%BD%90%E8%88%9E/"/>
    <id>http://yoursite.com/2017/09/16/CSS-齐舞/</id>
    <published>2017-09-16T15:07:25.000Z</published>
    <updated>2017-09-24T13:57:21.344Z</updated>
    
    <content type="html"><![CDATA[<p>参考视频：<a href="https://t.75team.com/video" target="_blank" rel="external">齐舞学院</a></p>
<a id="more"></a>
<h1 id="层叠、继承和CSS单位"><a href="#层叠、继承和CSS单位" class="headerlink" title="层叠、继承和CSS单位"></a>层叠、继承和CSS单位</h1><h2 id="选择器的特异度"><a href="#选择器的特异度" class="headerlink" title="选择器的特异度"></a>选择器的特异度</h2><table>
<thead>
<tr>
<th>选择器</th>
<th style="text-align:center">内联</th>
<th style="text-align:center">id个数</th>
<th style="text-align:center">（伪）类个数</th>
<th style="text-align:center">标签个数</th>
<th style="text-align:center">特异度</th>
</tr>
</thead>
<tbody>
<tr>
<td>#nav .list li a:link</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">0122</td>
</tr>
<tr>
<td>.hd ul.links a</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">0022</td>
</tr>
</tbody>
</table>
<p>可以理解为特异度 <code>0122</code> &gt; <code>0022</code>，所以第一个的优先级大于第二个的优先级。</p>
<p>再举一个例子：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;article&gt;</div><div class="line">    &lt;h1 class="title"&gt;选择器的特异度&lt;/h1&gt;</div><div class="line">&lt;/article&gt;</div><div class="line">&lt;style&gt;</div><div class="line">    .title&#123; color: blue; &#125;</div><div class="line">    article h1&#123; color:red; &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<p>这里可以理解为<code>.title</code>的特异度是<code>0010</code>，<code>article h1</code>的特异度是<code>0002</code>。所以字体颜色是蓝色。</p>
<h2 id="简单选择器的特异度级别（由低到高）"><a href="#简单选择器的特异度级别（由低到高）" class="headerlink" title="简单选择器的特异度级别（由低到高）"></a>简单选择器的特异度级别（由低到高）</h2><ul>
<li>level 0：*</li>
<li>level 1：标签选择器、伪元素</li>
<li>level 2：类、伪类、属性</li>
<li>level 3：id</li>
<li>level 4：内联</li>
</ul>
<p>伪元素：<code>::before</code>,<code>::after</code>,<code>::first-line</code>,<code>::first-letter</code>。</p>
<p>伪类有：<code>:first-child</code>,<code>:link</code>,<code>:visited</code>,<code>:hover</code>,<code>:active</code>,<code>:focus</code>,<code>:lang</code>,<code>:right</code>,<code>:left</code>,<code>:first</code>。</p>
<h2 id="属性匹配"><a href="#属性匹配" class="headerlink" title="属性匹配"></a>属性匹配</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;button class="btn"&gt;普通按钮&lt;/button&gt;</div><div class="line">&lt;button class="btn btn-primary"&gt;主要按钮&lt;/button&gt;</div><div class="line">&lt;style&gt;</div><div class="line">    .btn&#123; display: inline-block;border: none;background: #e6e6e6;color: #333; &#125;</div><div class="line">    .btn.btn-primary&#123; color: #fff;background: #218de6; &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<p>这里<code>.btn.btn-primary</code>会覆盖掉<code>.btn</code>,颜色和背景颜色为<code>#fff和#218de6;</code>,所以第二个按钮背景颜色为蓝色，字体颜色为白色。</p>
<h2 id="important"><a href="#important" class="headerlink" title="important"></a>important</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;button class="btn"&gt;普通按钮&lt;/button&gt;</div><div class="line">&lt;button class="btn btn-primary"&gt;主要按钮&lt;/button&gt;</div><div class="line">&lt;style&gt;</div><div class="line">    .btn&#123; display: inline-block;border: none;background: #e6e6e6;color: #333 !important; &#125;</div><div class="line">    .btn.btn-primary&#123; color: #fff;background: #218de6; &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<p>给<code>.btn</code>的<code>color</code>属性增加了<code>!important</code>,那么该属性不会被改变，所以第二个按钮的背景颜色为蓝色，字体颜色为#333。</p>
<p>如果想要覆盖掉<code>.btn</code>的<code>color</code>值，那么也给<code>.btn.btn-primary</code>中的<code>color</code>添加<code>!important</code>。</p>
<h2 id="Cascading（继承）"><a href="#Cascading（继承）" class="headerlink" title="Cascading（继承）"></a>Cascading（继承）</h2><p>某些属性会自动继承其父元素的计算值，除非显式指定一个值。</p>
<h2 id="长度单位"><a href="#长度单位" class="headerlink" title="长度单位"></a>长度单位</h2><ul>
<li><p>绝对单位</p>
<ul>
<li>px：像素，对应显示器的一个像素点</li>
<li>in：英寸</li>
<li>英寸cm：厘米</li>
<li>厘米mm：毫米</li>
<li>毫米pt：磅（1pt等于1/72英寸）</li>
<li>英寸pc：1pc等于12pt</li>
</ul>
</li>
<li><p>相对单位</p>
<ul>
<li>em：相对于该元素的一个font-size</li>
<li>rem：相对于html元素的font-size</li>
<li>vh：浏览器窗口高度的1%</li>
<li>vw：浏览器窗口宽度的1%</li>
<li>vmin：vh和vm中的较小值</li>
<li>vmax：vh和vm中的较大值</li>
</ul>
</li>
</ul>
<h2 id="HSL颜色模型"><a href="#HSL颜色模型" class="headerlink" title="HSL颜色模型"></a>HSL颜色模型</h2><p>使用Hue、Saturation、Lightness三个数字来表示颜色。</p>
<ul>
<li>Hue：色相（H）是色彩的基本属性，就是平常所说的颜色名称，如红色、黄色等。取值范围是0-360（0代表红色）。</li>
<li>Saturation：饱和度（S）是指色彩的纯度，越高色彩越纯，低则逐渐变灰。取值范围0-100%。</li>
<li>Lightness：越高颜色越亮。取值范围是0-100%。</li>
<li>例如：hsl(0,50%,50%)、hsla(120,50%,50%,0.5)。</li>
</ul>
<h1 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h1><h2 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h2><p>语法：<code>box-sizing: border-box | content-box | inherit</code>,初始值为<code>content-box</code>。</p>
<h2 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h2><p>语法：<code>overflow: visible | hidden | scroll | auto</code>,默认值为<code>visible</code>。</p>
<ul>
<li>visible：默认值。内容不会被修剪，会呈现在元素框之外。</li>
<li>hidden：内容会被修剪，并且其余内容是不可见的。</li>
<li>scroll：内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</li>
<li>auto：如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</li>
</ul>
<h2 id="visibility"><a href="#visibility" class="headerlink" title="visibility"></a>visibility</h2><p>语法：<code>visible | hidden | collapse</code>,默认值为<code>visible</code>。</p>
<p>即使不可见的元素也会占据页面上的空间。请使用 “display” 属性来创建不占据页面空间的不可见元素。</p>
<h2 id="Generated-Content"><a href="#Generated-Content" class="headerlink" title="Generated Content"></a>Generated Content</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;a href="http://example.com"&gt;访问链接&lt;/a&gt;</div><div class="line">&lt;style&gt;</div><div class="line">    a::before&#123;</div><div class="line">        content: '\2693';</div><div class="line">    &#125;</div><div class="line">    a::after&#123;</div><div class="line">        content: '(' attr(href) ')';</div><div class="line">    &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/before.png" alt="::before::after"></p>
<h1 id="排版细节"><a href="#排版细节" class="headerlink" title="排版细节"></a>排版细节</h1><h2 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical-align"></a>vertical-align</h2><ul>
<li>定义盒子所处的行盒（line box）的垂直对齐关系</li>
<li>语法：<code>vertical-align: baseline | sub | super | top | text-top | middle | bottom | text-bottom | &lt;percentage&gt; | &lt;length&gt;</code></li>
<li>初始值为<code>baseline</code></li>
<li>百分比相对于元素自身的行高</li>
</ul>
<p><img src="http://otf35fo4u.bkt.clouddn.com/vertical.png" alt="vertical-align"></p>
<h2 id="box-shadow"><a href="#box-shadow" class="headerlink" title="box-shadow"></a>box-shadow</h2><p><code>box-shadow</code>不再是简单的用来制造阴影效果，还可以利用它来制作小图标的一部分。</p>
<h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><p><code>float</code>,<code>position</code>,<code>inline-block</code>,<code>table</code>,<code>flex</code>,<code>grid</code></p>
<h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><ul>
<li>行级元素：<code>text-align: center;</code></li>
<li>块级元素：<code>margin: auto;</code></li>
</ul>
<h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><ul>
<li>单行文字：<code>line-height</code></li>
<li>行级盒子：<code>vertical-align: middle;</code></li>
<li>绝对定位：<code>top: 50%;left: 50%;</code></li>
</ul>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>用下面的方式可以做自适应：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">display: table                 <span class="comment">/* &lt;table&gt; */</span></div><div class="line">display: table-cell            <span class="comment">/* &lt;td&gt; */</span></div><div class="line">display: table-row             <span class="comment">/* &lt;tr&gt; */</span></div><div class="line">display: table-column          <span class="comment">/* &lt;col&gt; */</span></div><div class="line">display: table-column-group    <span class="comment">/* &lt;colgroup&gt; */</span></div><div class="line">display: table-footer-group    <span class="comment">/* &lt;tfoot&gt; */</span></div><div class="line">display: table-header-group    <span class="comment">/* &lt;thead&gt; */</span></div></pre></td></tr></table></figure></p>
<p>举例：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;nav&gt;</div><div class="line">    &lt;a href=""&gt;home&lt;/a&gt;</div><div class="line">    &lt;a href=""&gt;html&lt;/a&gt;</div><div class="line">    &lt;a href=""&gt;css&lt;/a&gt;</div><div class="line">    &lt;a href=""&gt;javascript&lt;/a&gt;</div><div class="line">    &lt;a href=""&gt;http&lt;/a&gt;</div><div class="line">&lt;/nav&gt;</div><div class="line">&lt;style&gt;</div><div class="line">    nav&#123; width: 100%; display: table; border-collapse: collapse;line-height: 3; &#125;</div><div class="line">    nav a&#123; display: table-cell; text-align: center; border: 1px solid #fff; background: #00b3ee;&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure></p>
<h1 id="高级选择器"><a href="#高级选择器" class="headerlink" title="高级选择器"></a>高级选择器</h1><h2 id="target伪类"><a href="#target伪类" class="headerlink" title=":target伪类"></a>:target伪类</h2><p>可以使用<code>:target</code>伪类做tab选项卡功能。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;nav&gt;</div><div class="line">    &lt;a href="#p1"&gt;html&lt;/a&gt;</div><div class="line">    &lt;a href="#p2"&gt;css&lt;/a&gt;</div><div class="line">    &lt;a href="#p3"&gt;javascript&lt;/a&gt;</div><div class="line">&lt;/nav&gt;</div><div class="line">&lt;p id="p1"&gt;htmlhtmlhtml&lt;/p&gt;</div><div class="line">&lt;p id="p2"&gt;csscsscss&lt;/p&gt;</div><div class="line">&lt;p id="p3"&gt;javascriptjavascript&lt;/p&gt;</div><div class="line"></div><div class="line">&lt;style&gt;</div><div class="line">    p&#123; display: none; &#125;</div><div class="line">    p:target&#123; display: block; &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h2 id="lang伪类"><a href="#lang伪类" class="headerlink" title=":lang伪类"></a>:lang伪类</h2><ul>
<li>元素匹配上指定语言时的状态</li>
<li>浏览器通过lang属性获得语言信息</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考视频：&lt;a href=&quot;https://t.75team.com/video&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;齐舞学院&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Web前端" scheme="http://yoursite.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>《写给大家看的设计书》</title>
    <link href="http://yoursite.com/2017/09/13/%E3%80%8A%E5%86%99%E7%BB%99%E5%A4%A7%E5%AE%B6%E7%9C%8B%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B9%A6%E3%80%8B/"/>
    <id>http://yoursite.com/2017/09/13/《写给大家看的设计书》/</id>
    <published>2017-09-13T01:06:16.000Z</published>
    <updated>2017-09-14T14:52:46.544Z</updated>
    
    <content type="html"><![CDATA[<p>《写给大家看的设计书》由世界著名设计师、技术专家和畅销书作家Robin Williams著。</p>
<a id="more"></a>
<h2 id="四大设计原则"><a href="#四大设计原则" class="headerlink" title="四大设计原则"></a>四大设计原则</h2><ol>
<li><p>亲密性(proximity)</p>
<p><strong>彼此相关的项</strong>应当靠近，归组在一起。有助于组织信息，减少混乱，为读者提供清晰的结构。</p>
</li>
<li><p>对比(contrast)</p>
<p>对比的基本思想：避免页面上的元素太过相似。如果元素（字体、颜色、大小、线宽、形状、空间等）不相同，那就干脆让他们截然不同。</p>
</li>
<li><p>重复(repetition)</p>
<p>让设计中的视觉要素在整个作品中重复出现。可以重复颜色、形状、材质、空间关系、线宽、字体、大小和图片，等等。这样一来，既能增加条理性，还可以加强统一性。</p>
</li>
<li><p>对齐(alignment)</p>
<p>任何东西都不能在页面随意安放。每一项都应当与页面上的某个内容存在某种视觉联系。</p>
<p><strong>根本目的：</strong> 使页面统一而且有条理。</p>
</li>
</ol>
<h2 id="作者说"><a href="#作者说" class="headerlink" title="作者说"></a>作者说</h2><blockquote>
<p>尽量不要使用居中对齐。</p>
<p>勇敢一点，大胆一点。打破常规对齐时不要怯懦。</p>
<p>但是，在打破规则之前必须清楚规则是什么。</p>
<p>绝对不要在页面上随意摆放元素。</p>
<p>找一条明确的对齐线，并坚持以它为基准。</p>
<p>如果两个项不完全相同，就应当使之不同，而且应当是截然不同。</p>
</blockquote>
<h2 id="颜色运用"><a href="#颜色运用" class="headerlink" title="颜色运用"></a>颜色运用</h2><ol>
<li>三原色（红、黄、蓝）</li>
</ol>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/%E4%B8%89%E5%8E%9F%E8%89%B2.png" alt="三原色"></p>
<ol>
<li>三间色（橙、绿、紫）</li>
</ol>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/%E4%B8%89%E9%97%B4%E8%89%B2.png" alt="三间色"></p>
<ol>
<li>第三色（把色轮中的空白填满得到）</li>
</ol>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/%E7%AC%AC%E4%B8%89%E8%89%B2.png" alt="第三色"></p>
<ol>
<li>互补色（色轮上相对的颜色，一种作为主色，另一种用于强调）</li>
</ol>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/%E4%BA%92%E8%A1%A5%E8%89%B2.png" alt="互补色"></p>
<ol>
<li>三色组（基色三色组、间色三色组、其他）</li>
</ol>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/%E4%B8%89%E8%89%B2%E7%BB%84.png" alt="三色组"></p>
<ol>
<li>分裂互补三色组（从色轮的一边选择颜色，从该互补色两侧得到另外两色）</li>
</ol>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/%E5%88%86%E8%A3%82%E4%BA%92%E8%A1%A5%E4%B8%89%E8%89%B2%E7%BB%84.png" alt="分裂互补三色组"></p>
<ol>
<li>类似色（由色轮上彼此相邻的颜色组成）</li>
</ol>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/%E7%B1%BB%E4%BC%BC%E8%89%B2.png" alt="类似色"></p>
<ol>
<li>暗色和亮色（纯色就是色调，向色调增加黑色就构成一个暗色，向色调增加白色就构成一个亮色）</li>
</ol>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/%E6%9A%97%E8%89%B2%E5%92%8C%E6%98%8E%E8%89%B2.png" alt="暗色和亮色"></p>
<ol>
<li>暖色和冷色</li>
</ol>
<p>冷色是后退型，趋于做背景色；暖色是趋进型，尽量少用暖色。</p>
<ol>
<li><p>CMYK与RGB，印刷与Web</p>
<ul>
<li><code>CMYK</code>代表Cyan（一种蓝色）、Magenta（一种红/粉红色）、Yellow和一个Key色（通常是黑色）。</li>
<li><code>RGB</code>表示Red（红色）、Green（绿色）和Blue（蓝色）。</li>
<li>需要印刷的项目应当使用<code>CMYK</code>。</li>
<li>需要在屏幕上看的内容则应使用<code>RGB</code>。</li>
</ul>
</li>
</ol>
<h2 id="字体类别"><a href="#字体类别" class="headerlink" title="字体类别"></a>字体类别</h2><p>字体对比有6种明确的不同方式：大小、粗细、结构、形状、方向和颜色。</p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/fonts.png" alt="6种字体"></p>
<p><a href="https://fonts.google.com/" target="_blank" rel="external">Google Fonts字体网站</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《写给大家看的设计书》由世界著名设计师、技术专家和畅销书作家Robin Williams著。&lt;/p&gt;
    
    </summary>
    
      <category term="阅读笔记" scheme="http://yoursite.com/categories/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="书籍" scheme="http://yoursite.com/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>JS几道小题</title>
    <link href="http://yoursite.com/2017/09/03/js%E5%87%A0%E9%81%93%E5%B0%8F%E9%A2%98/"/>
    <id>http://yoursite.com/2017/09/03/js几道小题/</id>
    <published>2017-09-03T10:38:05.468Z</published>
    <updated>2017-09-21T09:48:11.128Z</updated>
    
    <content type="html"><![CDATA[<p>厦门实训js几道小题练习。</p>
<a id="more"></a>
<h2 id="2017-7-6日厦门实训js作业"><a href="#2017-7-6日厦门实训js作业" class="headerlink" title="2017.7.6日厦门实训js作业"></a>2017.7.6日厦门实训js作业</h2><h3 id="例题1：定义两个整数变量，交换两个变量的值"><a href="#例题1：定义两个整数变量，交换两个变量的值" class="headerlink" title="例题1：定义两个整数变量，交换两个变量的值"></a>例题1：定义两个整数变量，交换两个变量的值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = prompt(<span class="string">"请输入a的值"</span>);</div><div class="line"><span class="keyword">var</span> b = prompt(<span class="string">"请输入b的值"</span>);</div><div class="line"><span class="keyword">var</span> t;</div><div class="line"></div><div class="line">t = a;   <span class="comment">//t=2</span></div><div class="line">a = b;  <span class="comment">//a=3</span></div><div class="line">b = t;  <span class="comment">//b=2</span></div><div class="line">alert(<span class="string">"交换后a的值："</span> + a + <span class="string">",交换后b的值："</span> + b);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h3 id="例题２：定义三个整数变量，输出一次最大值"><a href="#例题２：定义三个整数变量，输出一次最大值" class="headerlink" title="例题２：定义三个整数变量，输出一次最大值"></a>例题２：定义三个整数变量，输出一次最大值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = prompt(<span class="string">"输入第一个数"</span>);</div><div class="line"><span class="keyword">var</span> b = prompt(<span class="string">"输入第二个数"</span>);</div><div class="line"><span class="keyword">var</span> c = prompt(<span class="string">"输入第三个数"</span>);</div><div class="line"><span class="keyword">var</span> max;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(a&gt;=b)&#123;</div><div class="line">	max = a;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	max = b;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(max&lt;c)&#123;</div><div class="line">	max = c;</div><div class="line">&#125;</div><div class="line">alert(<span class="string">"最大的值是："</span> + max);</div></pre></td></tr></table></figure>
<h3 id="例题3：输入三个数从小到大的输出"><a href="#例题3：输入三个数从小到大的输出" class="headerlink" title="例题3：输入三个数从小到大的输出"></a>例题3：输入三个数从小到大的输出</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = prompt(<span class="string">"输入第一个数"</span>);</div><div class="line"><span class="keyword">var</span> b = prompt(<span class="string">"输入第二个数"</span>);</div><div class="line"><span class="keyword">var</span> c = prompt(<span class="string">"输入第三个数"</span>);</div><div class="line"><span class="keyword">var</span> min,max,mid;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(a&gt;=b)&#123;</div><div class="line">    <span class="keyword">if</span>(b&gt;=c)&#123;</div><div class="line">        max = a;mid = b;min = c;</div><div class="line">    &#125; <span class="keyword">else</span>&#123;</div><div class="line">        max = a;mid = c;min = b;</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">else</span>&#123;     <span class="comment">//a&lt;b</span></div><div class="line">    <span class="keyword">if</span>(b&gt;=c)&#123;</div><div class="line">        max = b;mid = a;min = c;</div><div class="line">    &#125; <span class="keyword">else</span>&#123;</div><div class="line">        max = b;mid = c;min = a;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(max&lt;c)&#123;</div><div class="line">    <span class="keyword">if</span>(a&gt;=b)&#123;</div><div class="line">        max = c;mid = a;min = b;</div><div class="line">    &#125; <span class="keyword">else</span>&#123;</div><div class="line">        max = c;mid = b;min = a;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">alert(<span class="string">"从小到大排序："</span> + min + <span class="string">"&lt;"</span> + mid +  <span class="string">"&lt;"</span> + max);</div></pre></td></tr></table></figure>
<p>额….这个写的不是很好，傻瓜式…以后再说</p>
<h3 id="例题4：定义整数的成绩变量，按区间输出等级"><a href="#例题4：定义整数的成绩变量，按区间输出等级" class="headerlink" title="例题4：定义整数的成绩变量，按区间输出等级:"></a>例题4：定义整数的成绩变量，按区间输出等级:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> score = prompt(<span class="string">"输入成绩："</span>);</div><div class="line"><span class="keyword">var</span> sco = <span class="built_in">parseInt</span>(score / <span class="number">10</span>);</div><div class="line"><span class="keyword">switch</span>(sco)&#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">0</span> :</div><div class="line">        alert(<span class="string">"不及格！"</span>); <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="number">1</span> :</div><div class="line">        alert(<span class="string">"不及格！"</span>); <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="number">2</span> :</div><div class="line">        alert(<span class="string">"不及格！"</span>); <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="number">3</span> :</div><div class="line">        alert(<span class="string">"不及格！"</span>); <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="number">4</span> :</div><div class="line">        alert(<span class="string">"不及格！"</span>); <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="number">5</span> :</div><div class="line">        alert(<span class="string">"不及格！"</span>); <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="number">6</span>:</div><div class="line">        alert(<span class="string">"D"</span>); <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="number">7</span>:</div><div class="line">        alert(<span class="string">"C"</span>); <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="number">8</span>:</div><div class="line">        alert(<span class="string">"B"</span>); <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="number">9</span>:</div><div class="line">        alert(<span class="string">"A"</span>); <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="number">10</span>:</div><div class="line">        alert(<span class="string">"A"</span>); <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        alert(<span class="string">"输入有误！"</span>); <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="例题5：定义一个变量表示年份，判断是否是闰年"><a href="#例题5：定义一个变量表示年份，判断是否是闰年" class="headerlink" title="例题5：定义一个变量表示年份，判断是否是闰年"></a>例题5：定义一个变量表示年份，判断是否是闰年</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;!--闰年的条件是:能被<span class="number">4</span>整除,但是不能被<span class="number">100</span>整除,或者能被四百整除--&gt;</div><div class="line"><span class="keyword">var</span> year = prompt(<span class="string">"输入一个年份："</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span>((year%<span class="number">4</span>==<span class="number">0</span>) &amp;&amp; (year%<span class="number">100</span>!==<span class="number">0</span>) || (year%<span class="number">400</span>==<span class="number">0</span>)) &#123;</div><div class="line">    alert(year+<span class="string">"年是闰年"</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    alert(year+<span class="string">"年是平年"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="例题6：输出100以内的质数"><a href="#例题6：输出100以内的质数" class="headerlink" title="例题6：输出100以内的质数"></a>例题6：输出100以内的质数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//2,3,5,7,11,13,17,19,23...</span></div><div class="line"><span class="comment">//只能被1和自己本身除</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> n=<span class="number">2</span>;n&lt;=<span class="number">100</span>;n++)&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> m=<span class="number">2</span>;m&lt;n;m++)&#123;</div><div class="line">        <span class="keyword">if</span>(n%m == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">break</span>;   <span class="comment">//跳出当前循环</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(m&gt;=n)&#123;</div><div class="line">        <span class="built_in">document</span>.write( n + <span class="string">","</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2017-7-7日厦门实训js作业-–循环语句"><a href="#2017-7-7日厦门实训js作业-–循环语句" class="headerlink" title="2017.7.7日厦门实训js作业 –循环语句"></a>2017.7.7日厦门实训js作业 –循环语句</h2><h3 id="例题1：输出乘法口诀表"><a href="#例题1：输出乘法口诀表" class="headerlink" title="例题1：输出乘法口诀表"></a>例题1：输出乘法口诀表</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">1</span>;j&lt;<span class="number">10</span>;j++)&#123;</div><div class="line">        <span class="keyword">if</span>(j&gt;i)&#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            num = i*j;</div><div class="line">            <span class="built_in">document</span>.write(j + <span class="string">"*"</span> + i + <span class="string">"="</span> + num + <span class="string">"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">document</span>.write(<span class="string">"&lt;br/&gt;"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="例题2：输出10行10列表格"><a href="#例题2：输出10行10列表格" class="headerlink" title="例题2：输出10行10列表格"></a>例题2：输出10行10列表格</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;button id="btn"&gt;1.点击出现表格&lt;/button&gt;</div><div class="line">&lt;table id="table" cellspacing="0" cellpadding="10" border="1"&gt;&lt;/table&gt;</div><div class="line">   </div><div class="line">window.onload = function() &#123;</div><div class="line">var btn = document.getElementById("btn");</div><div class="line">btn.onclick = out;</div><div class="line">	function out()&#123;</div><div class="line">		var table = document.getElementById("table");</div><div class="line">		for(var j=1;j&lt;=10;j++)&#123;</div><div class="line">			var tr = document.createElement("tr");</div><div class="line">			for(var i=1;i&lt;=10;i++)&#123;</div><div class="line">				var td = document.createElement("td");   //创建元素节点eleNode</div><div class="line">				td.innerHTML = i;</div><div class="line">				tr.appendChild(td);   //将元素节点td添加到tr中</div><div class="line">			&#125;</div><div class="line">		table.appendChild(tr);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong><em>自己在作业的基础上拓展了一下：获取任意行列的表格并输出</em></strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">请输入行数：&lt;input id=<span class="string">"rows"</span> /&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></div><div class="line">请输入列数：&lt;input id=<span class="string">"cols"</span> /&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></div><div class="line">&lt;button id=<span class="string">"btn1"</span>&gt;<span class="number">2.</span>点击出现你输入的表格&lt;<span class="regexp">/button&gt;&lt;br&gt;&lt;br/</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"table1"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">cellpadding</span>=<span class="string">"10"</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">var</span> btn1 = <span class="built_in">document</span>.getElementById(<span class="string">"btn1"</span>);</div><div class="line">btn1.onclick = out1;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">out1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> table1 = <span class="built_in">document</span>.getElementById(<span class="string">"table1"</span>);</div><div class="line">    <span class="keyword">var</span> rows = <span class="built_in">document</span>.getElementById(<span class="string">"rows"</span>).value;</div><div class="line">    <span class="keyword">var</span> cols = <span class="built_in">document</span>.getElementById(<span class="string">"cols"</span>).value;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">1</span>;j&lt;=cols;j++)&#123;</div><div class="line">        <span class="keyword">var</span> tr1 = <span class="built_in">document</span>.createElement(<span class="string">"tr"</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=rows;i++)&#123;</div><div class="line">            <span class="keyword">var</span> td1 = <span class="built_in">document</span>.createElement(<span class="string">"td"</span>);</div><div class="line">             td1.innerHTML = i;</div><div class="line">            tr1.appendChild(td1);</div><div class="line">        &#125;</div><div class="line">        table1.appendChild(tr1);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="例题3：在上例表格中改变奇数行的背景"><a href="#例题3：在上例表格中改变奇数行的背景" class="headerlink" title="例题3：在上例表格中改变奇数行的背景"></a>例题3：在上例表格中改变奇数行的背景</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;button id="btn"&gt;点击后奇数行有背景颜色&lt;/button&gt;</div><div class="line">&lt;table id="table" border="1" cellpadding="10px" cellspacing="0"&gt;&lt;/table&gt;</div><div class="line"></div><div class="line">window.onload = function () &#123;</div><div class="line">    var btn = document.getElementById("btn");</div><div class="line">    btn.onclick = out2;</div><div class="line">    function out2() &#123;</div><div class="line">        var table = document.getElementById("table");</div><div class="line">        for (var j = 1; j &lt;= 10; j++) &#123;</div><div class="line">            var tr = document.createElement("tr");</div><div class="line">            if (j%2 != 0) &#123;    //判断是否为奇数行</div><div class="line">                tr.style.backgroundColor = "red";</div><div class="line">            &#125;</div><div class="line">            for (var i = 1; i &lt;= 10; i++) &#123;</div><div class="line">                var td = document.createElement("td");</div><div class="line">                td.innerHTML = i;</div><div class="line">                tr.appendChild(td);</div><div class="line">            &#125;</div><div class="line">            table.appendChild(tr);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="例题4：输出序列1-1-2-3-5-8-13……-N个数"><a href="#例题4：输出序列1-1-2-3-5-8-13……-N个数" class="headerlink" title="例题4：输出序列1,1,2,3,5,8,13…… N个数"></a>例题4：输出序列1,1,2,3,5,8,13…… N个数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="number">1</span>;b=<span class="number">1</span>;</div><div class="line"><span class="keyword">if</span>(a=<span class="number">1</span>)&#123;</div><div class="line">    <span class="built_in">document</span>.write(a + <span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(b=<span class="number">1</span>)&#123;</div><div class="line">    <span class="built_in">document</span>.write(b + <span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> n=<span class="number">0</span>;n&lt;<span class="number">500</span>;n++)&#123;</div><div class="line">    n = a + b; <span class="comment">//1+1=2 ;n=2 n=3 n=5</span></div><div class="line">    a = b;    <span class="comment">//a=1; a=1; a=2; a=3;</span></div><div class="line">    b = n; <span class="comment">//b=1 b=2; b=3; b=5;</span></div><div class="line">    ocument.write(n + <span class="string">" "</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此段代码不够完善…待完善</p>
<h2 id="2017-7-10日厦门实训js作业"><a href="#2017-7-10日厦门实训js作业" class="headerlink" title="2017.7.10日厦门实训js作业"></a>2017.7.10日厦门实训js作业</h2><h3 id="例题1：动态的显示当前时间"><a href="#例题1：动态的显示当前时间" class="headerlink" title="例题1：动态的显示当前时间"></a>例题1：动态的显示当前时间</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">startTime</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">	<span class="keyword">var</span> year = today.getFullYear();</div><div class="line">	<span class="keyword">var</span> month = today.getMonth() + <span class="number">1</span>;</div><div class="line">	<span class="keyword">var</span> day = today.getDate();</div><div class="line">	<span class="keyword">var</span> h = today.getHours();</div><div class="line">	<span class="keyword">var</span> m = today.getMinutes();</div><div class="line">	<span class="keyword">var</span> s = today.getSeconds();</div><div class="line">	m = checkTime(m);</div><div class="line">	s = checkTime(s);</div><div class="line"></div><div class="line">	<span class="built_in">document</span>.getElementById(<span class="string">"time"</span>).innerHTML =<span class="string">"现在是北京时间："</span> + year + <span class="string">"年"</span> + month + <span class="string">"月"</span> + day + <span class="string">"日"</span> + <span class="string">" "</span> + h + <span class="string">":"</span> + m + <span class="string">":"</span> + s ;</div><div class="line"></div><div class="line">	t = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;startTime()&#125;,<span class="number">500</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkTime</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(i&lt;<span class="number">10</span>)&#123;</div><div class="line">        i = <span class="string">"0"</span> + i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> i;</div><div class="line">&#125;</div><div class="line">	</div><div class="line">&lt;body onload=<span class="string">"startTime()"</span>&gt;</div><div class="line">	<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"time"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">&lt;<span class="regexp">/body&gt;</span></div></pre></td></tr></table></figure>
<h3 id="例题2：计算器实现加减乘除（最简单的）"><a href="#例题2：计算器实现加减乘除（最简单的）" class="headerlink" title="例题2：计算器实现加减乘除（最简单的）"></a>例题2：计算器实现加减乘除（最简单的）</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">数字1：&lt;input id="num1"&gt;&lt;br/&gt;&lt;br/&gt;</div><div class="line">数字2：&lt;input id="num2"&gt;&lt;br/&gt;&lt;br/&gt;</div><div class="line">&lt;button onclick="add()"&gt;加法&lt;/button&gt;</div><div class="line">&lt;button onclick="del()"&gt;减法&lt;/button&gt;</div><div class="line">&lt;button onclick="mul()"&gt;乘法&lt;/button&gt;</div><div class="line">&lt;button onclick="division()"&gt;除法&lt;/button&gt;&lt;br/&gt;&lt;br/&gt;</div><div class="line">结果为：&lt;input id="result" value=""&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">	function add() &#123;</div><div class="line">		var num1 = document.getElementById("num1").value;</div><div class="line">		var num2 = document.getElementById("num2").value;</div><div class="line">		var result = parseFloat(num1) + parseFloat(num2);</div><div class="line">		document.getElementById("result").value = result;</div><div class="line">	&#125;</div><div class="line">	function del() &#123;</div><div class="line">		var num1 = document.getElementById("num1").value;</div><div class="line">		var num2 = document.getElementById("num2").value;</div><div class="line">		var result = parseFloat(num1) - parseFloat(num2);</div><div class="line">		document.getElementById("result").value = result;</div><div class="line">	&#125;</div><div class="line">	function mul() &#123;</div><div class="line">		var num1 = document.getElementById("num1").value;</div><div class="line">		var num2 = document.getElementById("num2").value;</div><div class="line">		var result = num1 * num2;</div><div class="line">		document.getElementById("result").value = result;</div><div class="line">	&#125;</div><div class="line">	function division() &#123;</div><div class="line">		var num1 = document.getElementById("num1").value;</div><div class="line">		var num2 = document.getElementById("num2").value;</div><div class="line">		var result = num1 / num2;</div><div class="line">		document.getElementById("result").value = result;</div><div class="line">	&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;厦门实训js几道小题练习。&lt;/p&gt;
    
    </summary>
    
      <category term="Web前端" scheme="http://yoursite.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>WechatApp基础</title>
    <link href="http://yoursite.com/2017/08/24/WechatApp%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2017/08/24/WechatApp基础/</id>
    <published>2017-08-24T13:50:30.000Z</published>
    <updated>2017-10-12T02:43:36.241Z</updated>
    
    <content type="html"><![CDATA[<p>小程序开发框架的目标是通过尽可能简单、高效的方式让开发者可以在微信中开发具有原生 APP 体验的服务。框架提供了自己的视图层描述语言 WXML 和 WXSS，以及基于 JavaScript 的逻辑层框架，并在视图层与逻辑层间提供了数据传输和事件系统，可以让开发者可以方便的聚焦于数据与逻辑上。</p>
<a id="more"></a>
<h2 id="从本地相册选择图片或使用相机拍照"><a href="#从本地相册选择图片或使用相机拍照" class="headerlink" title="从本地相册选择图片或使用相机拍照"></a>从本地相册选择图片或使用相机拍照</h2><p><strong>使用到的API是</strong>：<code>wx.chooseImage(OBJECT)</code></p>
<p>html代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;view bindtap=<span class="string">"bindViewTap"</span> class=<span class="string">"userinfo"</span>&gt;</div><div class="line">    &lt;image class=<span class="string">"userinfo-avatar"</span> src=<span class="string">"&#123;&#123;avatarUrl&#125;&#125;"</span> background-size=<span class="string">"cover"</span>&gt;&lt;/image&gt;</div><div class="line">    &lt;text class=<span class="string">"userinfo-nickname"</span>&gt;&#123;&#123;userInfo.nickName&#125;&#125;&lt;/text&gt;</div><div class="line">&lt;/view&gt;</div></pre></td></tr></table></figure></p>
<p>css代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.userinfo &#123; display: flex; flex-direction: column; align-items: center; &#125;</div><div class="line">.userinfo-avatar &#123; width: 128rpx; height: 128rpx; margin: 20rpx; border-radius: 50%; &#125;</div><div class="line">.userinfo-nickname &#123; color: #aaa; &#125;</div></pre></td></tr></table></figure></p>
<p>点击部分事件处理：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">data: &#123;</div><div class="line">    <span class="attr">userInfo</span>: &#123;&#125;,</div><div class="line">    <span class="attr">avatarUrl</span>: <span class="literal">null</span></div><div class="line">&#125;, </div><div class="line"><span class="attr">bindViewTap</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">    wx.chooseImage(&#123;</div><div class="line">      <span class="attr">count</span>: <span class="number">1</span>, <span class="comment">// 默认9</span></div><div class="line">      sizeType: [<span class="string">'original'</span>, <span class="string">'compressed'</span>], <span class="comment">// 可以指定是原图还是压缩图，默认二者都有</span></div><div class="line">      sourceType: [<span class="string">'album'</span>, <span class="string">'camera'</span>], <span class="comment">// 可以指定来源是相册还是相机，默认二者都有</span></div><div class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">        <span class="comment">// 返回选定照片的本地文件路径列表，tempFilePath可以作为img标签的src属性显示图片</span></div><div class="line">        <span class="keyword">var</span> tempFilePaths = res.tempFilePaths</div><div class="line">        that.setData(&#123;<span class="attr">avatarUrl</span>:tempFilePaths[<span class="number">0</span>]&#125;)</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><code>wx.chooseImage()</code> 中<code>success</code>方法必填，其他的可选。</li>
<li><code>tempFilePaths</code> 是图片的本地文件路径列表</li>
</ul>
<h2 id="文件的上传和下载"><a href="#文件的上传和下载" class="headerlink" title="文件的上传和下载"></a>文件的上传和下载</h2><p><strong>使用到的API是</strong>：<code>wx.uploadFile(OBJECT)</code>(将本地资源上传到开发者服务器);<code>wx.downloadFile(OBJECT)</code>(下载文件资源到本地)。</p>
<h2 id="音乐的播放和控制"><a href="#音乐的播放和控制" class="headerlink" title="音乐的播放和控制"></a>音乐的播放和控制</h2><h3 id="使用后台播放器播放音乐：wx-playBackgroundAudio-OBJECT"><a href="#使用后台播放器播放音乐：wx-playBackgroundAudio-OBJECT" class="headerlink" title="使用后台播放器播放音乐：wx.playBackgroundAudio(OBJECT)"></a>使用后台播放器播放音乐：<code>wx.playBackgroundAudio(OBJECT)</code></h3><p>在<code>onReady</code>中使用:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">onReady:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    wx.playBackgroundAudio(&#123;</div><div class="line">      <span class="attr">dataUrl</span>: <span class="string">'http://ws.stream.qqmusic.qq.com/M500001VfvsJ21xFqb.mp3?guid=ffffffff82def4af4b12b3cd9337d5e7&amp;uin=346897220&amp;vkey=6292F51E1E384E06DCBDC9AB7C49FD713D632D313AC4858BACB8DDD29067D3C601481D36E62053BF8DFEAF74C0A5CCFADD6471160CAF3E6A&amp;fromtag=46'</span>,</div><div class="line">      <span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">        <span class="comment">//success</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">fail</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">//fail</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">complete</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">//complete</span></div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h3 id="暂停播放音乐：wx-pauseBackgroundAudio"><a href="#暂停播放音乐：wx-pauseBackgroundAudio" class="headerlink" title="暂停播放音乐：wx.pauseBackgroundAudio()"></a>暂停播放音乐：<code>wx.pauseBackgroundAudio()</code></h3><p>添加点击事件，点击后暂停音乐：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">bindViewTap: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    wx.pauseBackgroundAudio(&#123;</div><div class="line">      <span class="comment">//暂停音乐</span></div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="获取后台音乐播放状态：wx-getBackgroundAudioPlayerState-OBJECT"><a href="#获取后台音乐播放状态：wx-getBackgroundAudioPlayerState-OBJECT" class="headerlink" title="获取后台音乐播放状态：wx.getBackgroundAudioPlayerState(OBJECT)"></a>获取后台音乐播放状态：<code>wx.getBackgroundAudioPlayerState(OBJECT)</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">bindViewTap: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    wx.pauseBackgroundAudio(&#123;</div><div class="line">      <span class="comment">//暂停音乐</span></div><div class="line">    &#125;)</div><div class="line">    wx.getBackgroundAudioPlayerState(&#123;</div><div class="line">      <span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(res)</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">fail</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//fail</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">complete</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//complete</span></div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>在控制台打印出的效果如图：<br><img src="http://ot4r4qnml.bkt.clouddn.com/music.png" alt="音乐播放"></p>
<h3 id="监听音乐播放：wx-onBackgroundAudioPlay-CALLBACK"><a href="#监听音乐播放：wx-onBackgroundAudioPlay-CALLBACK" class="headerlink" title="监听音乐播放：wx.onBackgroundAudioPlay(CALLBACK)"></a>监听音乐播放：<code>wx.onBackgroundAudioPlay(CALLBACK)</code></h3><p>在<code>onLoad</code>中使用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wx.onBackgroundAudioPlay(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//用在：播放器写真旋转，当使用该API时，写真开始旋转</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="数据缓存"><a href="#数据缓存" class="headerlink" title="数据缓存"></a>数据缓存</h2><p>本地数据存储的大小限制为10MB</p>
<h3 id="本地存储：wx-setStorage-OBJECT"><a href="#本地存储：wx-setStorage-OBJECT" class="headerlink" title="本地存储：wx.setStorage(OBJECT)"></a>本地存储：<code>wx.setStorage(OBJECT)</code></h3><p>将数据存储在本地缓存中指定的<code>key</code>中，会覆盖掉原来该<code>key</code>对应的内容，这是一个<strong>异步</strong>接口。</p>
<p>在<code>onLoad</code>中使用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">onLoad: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'onLoad'</span>)</div><div class="line">    wx.setStorage(&#123;</div><div class="line">      <span class="attr">key</span>: <span class="string">'testKey'</span>,</div><div class="line">      <span class="attr">data</span>: <span class="string">'testValue'</span></div><div class="line">    &#125;)</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/storage.png" alt="存储"></p>
<h3 id="异步移除：wx-removeStorage-OBJECT"><a href="#异步移除：wx-removeStorage-OBJECT" class="headerlink" title="异步移除：wx.removeStorage(OBJECT)"></a>异步移除：<code>wx.removeStorage(OBJECT)</code></h3><p>从本地缓存中异步移除指定<code>key</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">bindViewTap: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    wx.removeStorage(&#123; <span class="comment">//移除</span></div><div class="line">      key: <span class="string">'testKey'</span>,</div><div class="line">      <span class="attr">data</span>: <span class="string">'testValue'</span></div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="拓展知识：同步和异步"><a href="#拓展知识：同步和异步" class="headerlink" title="拓展知识：同步和异步"></a>拓展知识：同步和异步</h3><ul>
<li>进程同步：就是在发出一个功能调用时，在没有得到结果之前，该调用就不返回。也就是必须一件一件事做,等前一件做完了才能做下一件事。</li>
<li>进程异步：当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的部件在完成后，通过状态、通知和回调来通知调用者。</li>
<li>同步是阻塞模式，异步是非阻塞模式。</li>
<li>举个例子：普通B/S模式（同步）; AJAX技术（异步）</li>
<li>同步：提交请求-&gt;等待服务器处理-&gt;处理完毕返回。这个期间客户端浏览器不能干任何事</li>
<li>异步: 请求通过事件触发-&gt;服务器处理（这是浏览器仍然可以作其他事情）-&gt;处理完毕</li>
</ul>
<h2 id="获取当前位置-地图"><a href="#获取当前位置-地图" class="headerlink" title="获取当前位置(地图)"></a>获取当前位置(地图)</h2><h3 id="获取当前的地理位置：wx-getLocation-OBJECT"><a href="#获取当前的地理位置：wx-getLocation-OBJECT" class="headerlink" title="获取当前的地理位置：wx.getLocation(OBJECT)"></a>获取当前的地理位置：<code>wx.getLocation(OBJECT)</code></h3><p>在onLoad中使用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wx.getLocation(&#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'wgs84'</span>, <span class="comment">//默认为wgs84返回gps坐标，gcj02返回可用于wx.openLocation的坐标</span></div><div class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(res) <span class="comment">//可以在控制台看到返回的信息</span></div><div class="line">    &#125;)</div></pre></td></tr></table></figure></p>
<h3 id="使用微信内置地图查看位置：wx-openLocation-OBJECT"><a href="#使用微信内置地图查看位置：wx-openLocation-OBJECT" class="headerlink" title="使用微信内置地图查看位置：wx.openLocation(OBJECT)"></a>使用微信内置地图查看位置：<code>wx.openLocation(OBJECT)</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">wx.getLocation(&#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'gcj02'</span>,</div><div class="line">    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> latitude = res.latitude</div><div class="line">      <span class="keyword">var</span> longitude = res.longitude</div><div class="line">      wx.openLocation(&#123;</div><div class="line">        <span class="attr">latitude</span>: latitude,</div><div class="line">        <span class="attr">longitude</span>: longitude,</div><div class="line">        <span class="attr">scale</span>: <span class="number">28</span></div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/map.png" alt="openLocation"></p>
<h3 id="打开地图选择位置"><a href="#打开地图选择位置" class="headerlink" title="打开地图选择位置"></a>打开地图选择位置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">wx.getLocation(&#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'gcj02'</span>,</div><div class="line">    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> latitude = res.latitude</div><div class="line">        <span class="keyword">var</span> longitude = res.longitude</div><div class="line">        wx.chooseLocation(&#123;</div><div class="line">            <span class="attr">latitude</span>: latitude,</div><div class="line">            <span class="attr">longitude</span>: longitude,</div><div class="line">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(res) <span class="comment">//输出当前位置信息：经纬度等</span></div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/chooseLocation.png" alt="chooseLocation"></p>
<h2 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h2><h3 id="获取网络状态：wx-getNetworkType-OBJECT"><a href="#获取网络状态：wx-getNetworkType-OBJECT" class="headerlink" title="获取网络状态：wx.getNetworkType(OBJECT)"></a>获取网络状态：<code>wx.getNetworkType(OBJECT)</code></h3><p>在<code>onLunch</code>中使用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">wx.getNetworkType(&#123;</div><div class="line">    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">      <span class="comment">// 返回网络类型, 有效值：</span></div><div class="line">      <span class="comment">// wifi/2g/3g/4g/unknown(Android下不常见的网络类型)/none(无网络)</span></div><div class="line">      <span class="keyword">var</span> networkType = res.networkType</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="获取系统消息：wx-getSystemInfo-OBJECT"><a href="#获取系统消息：wx-getSystemInfo-OBJECT" class="headerlink" title="获取系统消息：wx.getSystemInfo(OBJECT)"></a>获取系统消息：<code>wx.getSystemInfo(OBJECT)</code></h3><p>success回调参数：手机品牌、手机型号、设备像素比、屏幕宽度、屏幕高度等</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wx.getSystemInfo(&#123;</div><div class="line">    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(res)</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="拨打电话：wx-makePhoneCall-OBJECT"><a href="#拨打电话：wx-makePhoneCall-OBJECT" class="headerlink" title="拨打电话：wx.makePhoneCall(OBJECT)"></a>拨打电话：<code>wx.makePhoneCall(OBJECT)</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wx.makePhoneCall(&#123;</div><div class="line">  <span class="attr">phoneNumber</span>: <span class="string">'1340000'</span> <span class="comment">//仅为示例，并非真实的电话号码</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>在<code>.wxml</code>中使用<code>animation</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">view</span>  <span class="attr">bindtap</span>=<span class="string">"bindViewTap"</span> <span class="attr">class</span>=<span class="string">"userinfo"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">animation</span>=<span class="string">"&#123;&#123;animationData&#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"userinfo-avatar"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;userInfo.avatarUrl&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"userinfo-nickname"</span>&gt;</span>&#123;&#123;userInfo.nickName&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Page(&#123;</div><div class="line">  <span class="attr">data</span>: &#123;</div><div class="line">    <span class="attr">userInfo</span>: &#123;&#125;,</div><div class="line">    <span class="attr">animationData</span>: []</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">//事件处理函数</span></div><div class="line">  bindViewTap: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> animation = wx.createAnimation(&#123;</div><div class="line">      <span class="attr">transformOrigin</span>: <span class="string">'50% 50% 0'</span>,</div><div class="line">      <span class="attr">duration</span>: <span class="number">3000</span>,</div><div class="line">      <span class="attr">timingFunction</span>: <span class="string">"ease"</span>,</div><div class="line">      <span class="attr">delay</span>: <span class="number">0</span></div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    animation.rotate(<span class="number">-180</span>).scale(<span class="number">2</span>).translate(<span class="number">50</span>).step()</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.setData(&#123;</div><div class="line">      <span class="attr">animationData</span>: animation.export()</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行效果如图：</p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/chapterList.png" alt="文章列表图"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小程序开发框架的目标是通过尽可能简单、高效的方式让开发者可以在微信中开发具有原生 APP 体验的服务。框架提供了自己的视图层描述语言 WXML 和 WXSS，以及基于 JavaScript 的逻辑层框架，并在视图层与逻辑层间提供了数据传输和事件系统，可以让开发者可以方便的聚焦于数据与逻辑上。&lt;/p&gt;
    
    </summary>
    
    
      <category term="WechatApp" scheme="http://yoursite.com/tags/WechatApp/"/>
    
  </entry>
  
  <entry>
    <title>Flex布局</title>
    <link href="http://yoursite.com/2017/08/17/Flex%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2017/08/17/Flex布局/</id>
    <published>2017-08-17T09:15:15.000Z</published>
    <updated>2017-09-17T13:23:07.709Z</updated>
    
    <content type="html"><![CDATA[<p>Flex是Flexible Box的缩写，意为“弹性布局”，用来为盒状模型提供最大的灵活性。</p>
<a id="more"></a>
<h2 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h2><p><img src="http://otf35fo4u.bkt.clouddn.com/flex.png" alt="容器图"></p>
<h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><p>该属性决定主轴的方向，即项目排列方向。</p>
<p>语法：<code>flex-direction: row | row-reverse | column | column-reverse</code></p>
<p><code>row</code>为默认值，主轴为水平方向，起点在左端。</p>
<h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><p>默认情况下，项目都排在一条线（又称”轴线”）上。<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。</p>
<p>语法：<code>flex-wrap: nowrap | wrap | wrap-reverse</code></p>
<p><code>nowrap</code>为默认值，不换行；<code>wrap</code>换行，第一行在上方；<code>wrap-reverse</code>换行，第一行在下面。</p>
<h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><p><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</p>
<h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p>该属性定义了项目在主轴上的对齐方式。</p>
<p>语法：<code>justify-content: flex-start | flex-end | center | space-between | space-around</code></p>
<p><img src="http://otf35fo4u.bkt.clouddn.com/justify-content.png" alt="主轴对其方式"></p>
<h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p>该属性定义项目在交叉轴上如何对齐。</p>
<p>语法：<code>align-items: flex-start | flex-end | center | baseline | stretch</code></p>
<p><img src="http://otf35fo4u.bkt.clouddn.com/align-items.png" alt="交叉轴对齐方式"></p>
<p><code>baseline</code>项目的第一行文字的基线对齐;<code>stretch</code>为默认值，如果项目未设置高度或设为auto，将占满整个容器的高度。</p>
<h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><p><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>
<p>语法：<code>align-content: flex-start | flex-end | center | space-between | space-around | stretch</code></p>
<p><img src="http://otf35fo4u.bkt.clouddn.com/align-content.png" alt="对齐"></p>
<h2 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h2><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><p><code>flex-grow</code>属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.item&#123; flex-grow: <span class="tag">&lt;<span class="name">number</span>&gt;</span>; /*default 0*/ &#125;</div></pre></td></tr></table></figure>
<h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。(负值对该属性无效)</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.item&#123; flex-shrink: <span class="tag">&lt;<span class="name">number</span>&gt;</span>; /*default 1*/ &#125;</div></pre></td></tr></table></figure>
<h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.item&#123; flex-basis: <span class="tag">&lt;<span class="name">length</span>&gt;</span>; /*default auto*/ &#125;</div></pre></td></tr></table></figure>
<h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code>和<code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.item&#123; flex: none | [&lt;'flex-grow'&gt;] &lt;'&lt;flex-shrink&gt;'&gt; || &lt;'flex-basis'&gt; &#125;</div></pre></td></tr></table></figure>
<p>该属性有两个快捷值：<code>auto (1 1 auto)</code>和<code>none (0 0 auto)</code>。建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关。</p>
<p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external">阮一峰 Flex布局</a><br><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="external">Flex布局 实例篇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Flex是Flexible Box的缩写，意为“弹性布局”，用来为盒状模型提供最大的灵活性。&lt;/p&gt;
    
    </summary>
    
      <category term="Web前端" scheme="http://yoursite.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>js几种常见排序算法</title>
    <link href="http://yoursite.com/2017/08/10/js%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2017/08/10/js几种常见排序算法/</id>
    <published>2017-08-10T08:09:46.000Z</published>
    <updated>2017-09-17T13:38:22.142Z</updated>
    
    <content type="html"><![CDATA[<p>这里整理几种常用的排序，以后再加入其他的。</p>
<a id="more"></a>
<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>最普通的排序算法，把待排序的纪录按其关键码值的大小逐个插入到一个已经排好序的有序序列中，直到所有的纪录插入完为止，得到一个新的有序序列。</p>
<p><strong>原理图：</strong> （插入操作要进行 <code>n-1</code> 次）</p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/insertSort.png" alt="插入排序"></p>
<p><strong>代码：</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span>(<span class="params">array</span>)</span>&#123;</div><div class="line">    <span class="comment">//假设第0个元素是一个有序的数列，第1个以后的是无序的序列，</span></div><div class="line">    <span class="comment">//所以从第1个元素开始将无序数列的元素插入到有序数列中</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;array.length;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(array[i] &lt; array[i<span class="number">-1</span>])&#123;</div><div class="line">            <span class="comment">//取出无序数列中的第i个作为被插入元素</span></div><div class="line">            <span class="keyword">var</span> temp = array[i];</div><div class="line">            <span class="comment">//记住有序数列的最后一个位置，并且将有序数列位置扩大一个</span></div><div class="line">            <span class="keyword">var</span> j = i - <span class="number">1</span>;</div><div class="line"></div><div class="line">            <span class="comment">//比大小，找到被插入元素所在的位置</span></div><div class="line">            <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; temp &lt; array[j])&#123;</div><div class="line">                array[j+<span class="number">1</span>] = array[j];</div><div class="line">                j--;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//插入</span></div><div class="line">            array[j+<span class="number">1</span>] = temp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//var array = new Array(36,27,15,20,45,10);</span></div><div class="line"><span class="keyword">var</span> array = [<span class="number">36</span>,<span class="number">27</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">45</span>,<span class="number">10</span>];</div><div class="line"><span class="built_in">document</span>.write(<span class="string">"before: "</span> + array + <span class="string">"&lt;br&gt;"</span>);</div><div class="line">insertSort(array);</div><div class="line"><span class="built_in">document</span>.write(<span class="string">"after: "</span> + array);</div></pre></td></tr></table></figure>
<p><strong>算法分析：</strong></p>
<ul>
<li>最佳情况：输入数组按升序排列。T(n) = O(n)</li>
<li>最坏情况：输入数组按降序排列。T(n) = O(n^2)</li>
<li>平均情况：T(n) = O(n^2)</li>
</ul>
<h2 id="二分插入排序-折半插入排序"><a href="#二分插入排序-折半插入排序" class="headerlink" title="二分插入排序(折半插入排序)"></a>二分插入排序(折半插入排序)</h2><p>二分法插入排序是在插入第i个元素时，对前面的0～i-1元素进行折半，先跟他们中间的那个元素比，如果小，则对前半再进行折半，否则对后半进行折半，直到left&lt;right，然后再把第i个元素前1位与目标位置之间的所有元素后移，再把第i个元素放在目标位置上。</p>
<p><strong>原理图：</strong> （high&lt;low，查找结束，插入位置为low或high+1）</p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/binaryInsertSort.png" alt="二分插入排序"></p>
<p><strong>代码：</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">BinaryInsertSort</span>(<span class="params">array</span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;array.length;i++)&#123;</div><div class="line">        <span class="keyword">var</span> key = array[i];</div><div class="line">        <span class="keyword">var</span> low = <span class="number">0</span>, high = i - <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(low &lt;= high)&#123;</div><div class="line">            <span class="keyword">var</span> mid = <span class="built_in">parseInt</span>((low+high)/<span class="number">2</span>);</div><div class="line">            <span class="keyword">if</span>(key&lt;array[mid])&#123;</div><div class="line">                high = mid <span class="number">-1</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                low = mid + <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=i<span class="number">-1</span>;j&gt;=low;j--)&#123;</div><div class="line">            array[j+<span class="number">1</span>] = array[j];</div><div class="line">        &#125;</div><div class="line">        array[low] = key;  <span class="comment">//插入位置为low或high+1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> array;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> array = [<span class="number">53</span>,<span class="number">27</span>,<span class="number">36</span>,<span class="number">15</span>,<span class="number">69</span>,<span class="number">42</span>];</div><div class="line"><span class="built_in">document</span>.write(<span class="string">"before: "</span> + array + <span class="string">"&lt;br&gt;"</span>);</div><div class="line">BinaryInsertSort(array);</div><div class="line"><span class="built_in">document</span>.write(<span class="string">"after: "</span> + array);</div></pre></td></tr></table></figure>
<p><strong>算法分析：</strong></p>
<ul>
<li>最佳情况：T(n) = O(nlogn)</li>
<li>最差情况：T(n) = O(n^2)</li>
<li>平均情况：T(n) = O(n^2)</li>
</ul>
<h2 id="冒泡排序-Bubble-Sort"><a href="#冒泡排序-Bubble-Sort" class="headerlink" title="冒泡排序(Bubble Sort)"></a>冒泡排序(Bubble Sort)</h2><p>它重复地走访过要排序的数列，一次比较两个元素，每次遍历就将最大（或最小）值推至最前。越往后遍历查询次数越少， 跟插入排序刚好相反。</p>
<p><strong>原理图：</strong></p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/bubbleSort.gif" alt="冒泡排序gif"></p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/bubbleSort.png" alt="冒泡排序"></p>
<p><strong>代码：</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">array</span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;array.length;i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=array.length<span class="number">-1</span>;j&gt;i;j--)&#123;</div><div class="line">            <span class="keyword">if</span>(array[j] &lt; array[j<span class="number">-1</span>])&#123;</div><div class="line">                <span class="keyword">var</span> temp = array[j<span class="number">-1</span>];</div><div class="line">                array[j<span class="number">-1</span>] = array[j];</div><div class="line">                array[j] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> array;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> array = [<span class="number">53</span>,<span class="number">27</span>,<span class="number">36</span>,<span class="number">15</span>,<span class="number">69</span>,<span class="number">42</span>];</div><div class="line"><span class="built_in">document</span>.write(<span class="string">"before: "</span> + array + <span class="string">"&lt;br&gt;"</span>);</div><div class="line">bubbleSort(array);</div><div class="line"><span class="built_in">document</span>.write(<span class="string">"after: "</span> + array);</div></pre></td></tr></table></figure>
<p><strong>算法分析：</strong></p>
<ul>
<li>最佳情况：T(n) = O(n)</li>
<li>最差情况：T(n) = O(n^2)</li>
<li>平均情况：T(n) = O(n^2)</li>
</ul>
<h2 id="改进的冒泡排序"><a href="#改进的冒泡排序" class="headerlink" title="改进的冒泡排序"></a>改进的冒泡排序</h2><p>如果在某次的排序中没有出现交换的情况，那么说明在无序的元素现在已经是有序了，就可以直接返回了</p>
<p><strong>代码：</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">array</span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;array.length;i++)&#123;</div><div class="line">        <span class="keyword">var</span> exchange = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=array.length<span class="number">-1</span>;j&gt;i;j--)&#123;</div><div class="line">            <span class="keyword">if</span>(array[j] &lt; array[j<span class="number">-1</span>])&#123;  <span class="comment">//使较小的元素浮在上面</span></div><div class="line">                <span class="keyword">var</span> temp = array[j<span class="number">-1</span>];</div><div class="line">                array[j<span class="number">-1</span>] = array[j];</div><div class="line">                array[j] = temp;</div><div class="line">                exchange = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!exchange) <span class="keyword">return</span> array;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> array;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> array = [<span class="number">53</span>,<span class="number">27</span>,<span class="number">36</span>,<span class="number">15</span>,<span class="number">69</span>,<span class="number">42</span>];</div><div class="line"><span class="built_in">document</span>.write(<span class="string">"before: "</span> + array + <span class="string">"&lt;br&gt;"</span>);</div><div class="line">bubbleSort(array);</div><div class="line"><span class="built_in">document</span>.write(<span class="string">"after: "</span> + array);</div></pre></td></tr></table></figure>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>在数据集之中，选择一个元素作为”基准”（pivot）。 所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。 对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。</p>
<p><strong>原理图：</strong></p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/quickSort.png" alt="快速排序"></p>
<p><strong>代码：</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array = [<span class="number">36</span>,<span class="number">53</span>,<span class="number">27</span>,<span class="number">20</span>,<span class="number">15</span>,<span class="number">69</span>,<span class="number">42</span>];</div><div class="line">    <span class="built_in">document</span>.write(<span class="string">"before: "</span> + array + <span class="string">"&lt;br&gt;"</span>);</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">array</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (array.length &lt;= <span class="number">1</span>) &#123;<span class="keyword">return</span> array&#125;;</div><div class="line">        <span class="keyword">var</span> pivotIndex = <span class="built_in">Math</span>.floor(array.length / <span class="number">2</span>);  <span class="comment">//pivot基准</span></div><div class="line">        <span class="keyword">var</span> pivot = array.splice(pivotIndex,<span class="number">1</span>);</div><div class="line">        <span class="keyword">var</span> left = [];</div><div class="line">        <span class="keyword">var</span> right = [];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(array[i] &lt; pivot) &#123;</div><div class="line">                left.push(array[i]);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                right.push(array[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> quickSort(left).concat([pivot],quickSort(right));</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">document</span>.write(<span class="string">"after: "</span> + quickSort(array));</div></pre></td></tr></table></figure>
<p><strong>算法分析：</strong></p>
<ul>
<li>最佳情况：T(n) = O(nlogn)</li>
<li>最差情况：T(n) = O(n^2)</li>
<li>平均情况：T(n) = O(nlogn)</li>
</ul>
<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>在无序区中选出最小的元素，然后将它和无序区的第一个元素交换位置。</p>
<p><strong>原理图：</strong></p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/selectSort.png" alt="选择排序"></p>
<p><strong>代码：</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectSort</span>(<span class="params">array</span>) </span>&#123;</div><div class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;array.length;i++)&#123;</div><div class="line">         <span class="keyword">var</span> min = array[i];</div><div class="line">         <span class="keyword">for</span>(<span class="keyword">var</span> j = i+<span class="number">1</span>;j&lt;array.length<span class="number">-1</span>;j++)&#123;</div><div class="line">             <span class="keyword">if</span>(min &gt; array[j])&#123;</div><div class="line">                 <span class="keyword">var</span> temp = min;</div><div class="line">                 min = array[j];</div><div class="line">                 array[j] = temp;</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">         array[i] = min;</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">return</span> array;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> array = [<span class="number">53</span>,<span class="number">27</span>,<span class="number">36</span>,<span class="number">15</span>,<span class="number">69</span>,<span class="number">42</span>];</div><div class="line"><span class="built_in">document</span>.write(<span class="string">"before: "</span> + array + <span class="string">"&lt;br&gt;"</span>);</div><div class="line">selectSort(array);</div><div class="line"><span class="built_in">document</span>.write(<span class="string">"after: "</span> + array);</div></pre></td></tr></table></figure>
<p><strong>算法分析：</strong></p>
<ul>
<li>最佳情况：T(n) = O(n^2)</li>
<li>最差情况：T(n) = O(n^2)</li>
<li>平均情况：T(n) = O(n^2)</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zhuanlan.zhihu.com/p/20177776" target="_blank" rel="external">知乎-浅谈前端</a><br><a href="http://www.cnblogs.com/JChen666/p/3360853.html" target="_blank" rel="external">博客园-9种排序算法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里整理几种常用的排序，以后再加入其他的。&lt;/p&gt;
    
    </summary>
    
      <category term="Web前端" scheme="http://yoursite.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoursite.com/2017/08/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/08/08/正则表达式/</id>
    <published>2017-08-08T11:33:30.000Z</published>
    <updated>2017-09-17T13:39:00.633Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式是对字符串操作的一种逻辑公式。</p>
<a id="more"></a>
<h2 id="为什么使用正则表达式"><a href="#为什么使用正则表达式" class="headerlink" title="为什么使用正则表达式?"></a>为什么使用正则表达式?</h2><ul>
<li>测试字符串内的模式</li>
<li>替换文本</li>
<li>基于模式匹配从字符串中提取子字符串</li>
</ul>
<h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><table>
<thead>
<tr>
<th style="text-align:center">字符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:left">匹配前面的子表达式至少一次</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:left">匹配前面的子表达式零次或多次</td>
</tr>
<tr>
<td style="text-align:center">?</td>
<td style="text-align:left">匹配前面的子表达式零次或一次</td>
</tr>
<tr>
<td style="text-align:center">{n}</td>
<td style="text-align:left">n是一个非负整数,匹配确定的n次</td>
</tr>
<tr>
<td style="text-align:center">{n,}</td>
<td style="text-align:left">n是一个非负整数,至少匹配n次</td>
</tr>
<tr>
<td style="text-align:center">{n,m}</td>
<td style="text-align:left">m和n均为非负整数,其中n&lt;=m,最少匹配n次且最多匹配m次</td>
</tr>
</tbody>
</table>
<p><strong><code>*</code>、<code>+</code>和<code>?</code>限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个<code>?</code>就可以实现非贪婪或最小匹配。</strong></p>
<p>例如，您可能搜索HTML文档，以查找括在<code>H1</code>标记内的章节标题。该文本在您的文档中如下：</p>
<pre><code>&lt;H1&gt;Chapter 1 - 介绍正则表达式&lt;/H1&gt;
</code></pre><p><strong>贪婪：</strong> 下面的表达式匹配从开始小于符号(&lt;)到关闭<code>H1</code>标记的大于符号(&gt;)之间的所有内容：</p>
<pre><code>/&lt;.*&gt;/
</code></pre><p><strong>非贪婪：</strong> 如果您只需要匹配开始和介绍<code>H1</code>标记，下面的非贪婪表达式只匹配<code>&lt;H1&gt;</code>：</p>
<pre><code>/&lt;.*?&gt;/
</code></pre><p>如果只想匹配开始的<code>H1</code>标签，表达式则是：</p>
<pre><code>/&lt;\w+?&gt;/
</code></pre><p>通过在<code>*</code>、<code>+</code>或<code>?</code>限定符之后放置<code>?</code>，该表达式从”贪心”表达式转换为”非贪心”表达式或者最小匹配。</p>
<h2 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h2><table>
<thead>
<tr>
<th style="text-align:center">字符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">^</td>
<td style="text-align:left">匹配输入字符串开始的位置</td>
</tr>
<tr>
<td style="text-align:center">$</td>
<td style="text-align:left">匹配输入字符串结尾的位置</td>
</tr>
<tr>
<td style="text-align:center">\b</td>
<td style="text-align:left">匹配一个字边界，即字与空格间的位置</td>
</tr>
<tr>
<td style="text-align:center">\B</td>
<td style="text-align:left">非字边界匹配</td>
</tr>
</tbody>
</table>
<p><strong>注意：</strong> 不能将限定符与定位符一起使用。由于在紧靠换行或者字边界的前面或后面不能有一个以上位置，因此不允许诸如<code>^*</code>之类的表达式。</p>
<h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p>下表从最高到最低说明了各种正则表达式运算符的优先级顺序：</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">\</td>
<td style="text-align:left">转义符</td>
</tr>
<tr>
<td style="text-align:left">(), (?:), (?=), []</td>
<td style="text-align:left">圆括号和方括号</td>
</tr>
<tr>
<td style="text-align:left">*, +, ?, {n}, {n,}, {n,m}</td>
<td style="text-align:left">限定符</td>
</tr>
<tr>
<td style="text-align:left">^, $, \任何元字符、任何字符</td>
<td style="text-align:left">定位点和序列(即：位置和顺序)</td>
</tr>
<tr>
<td style="text-align:left">I</td>
<td style="text-align:left">替换，”或”操作</td>
</tr>
</tbody>
</table>
<h2 id="for-example"><a href="#for-example" class="headerlink" title="for example"></a>for example</h2><p><strong><em>例1：</em></strong> 查找重复的单词</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'Is is the cost of of gasoline going up up'</span>;</div><div class="line">patt1 = <span class="regexp">/\b([a-z]+) \1\b/gi</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(patt1));  <span class="comment">//输出：Is is,of of,up up</span></div></pre></td></tr></table></figure>
<p><strong>解析：</strong> <code>[a-z]+</code> 包含最少一个字母。<code>\1</code> 指定第一个子匹配项。字边界元字符<code>\b</code>确保只检测整个单词，否则，诸如 “is issued” 或 “this is” 之类的词组将不能正确地被此表达式识别。正则表达式后面的全局标记<code>g</code>指定将该表达式应用到输入字符串中能够查找到的尽可能多的匹配。<code>i</code>标记指定不区分大小写。</p>
<p><strong><em>例2：</em></strong> 分解URL</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"http://www.runoob.com:80/html/html-tutorial.html"</span>;</div><div class="line"><span class="keyword">var</span> patt1 = <span class="regexp">/(\w+):\/\/([^/:]+)(:\d*)?([^# ]*)/</span>;</div><div class="line">arr = str.match(patt1);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length ; i++) &#123;</div><div class="line">    <span class="built_in">document</span>.write(arr[i]);</div><div class="line">	<span class="built_in">document</span>.write(<span class="string">"&lt;br&gt;"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 这里分解为四个括号<code>()</code>来看。</p>
<ol>
<li>第一个括号子表达式捕获 Web 地址的协议部分。该子表达式匹配在冒号和两个正斜杠前面的任何单词。(“http”)</li>
<li>第二个括号子表达式捕获地址的域地址部分。子表达式匹配 / 和 : 之外的一个或多个字符。(“www.runoob.com”)</li>
<li>第三个括号子表达式捕获端口号（如果指定了的话）。该子表达式匹配冒号后面的零个或多个数字。只能重复一次该子表达式。(“:80”)</li>
<li>第四个括号子表达式捕获 Web 地址指定的路径和 / 或页信息。该子表达式能匹配不包括 # 或空格字符的任何字符序列。(“/html/html-tutorial.html”)</li>
</ol>
<p><strong><em>例3：</em></strong> 一个小写字母和一位数字组成的字符串</p>
<pre><code>/^[a-z][0-9]$/
</code></pre><p>比如，<code>z2</code>,<code>a4</code>；但不能是<code>ab2</code>,<code>r2d4</code>。</p>
<p><strong><em>例4：</em></strong> 第一个字符串不能是数字</p>
<pre><code>/^[^0-9][0-9]$/
</code></pre><p>这个模式与<code>&amp;5</code>,<code>g7</code>,<code>-2</code>是匹配的，但与<code>12</code>,<code>66</code>不是匹配的。下面是几个排除特定字符的例子：</p>
<pre><code>/[^a-z]/        //除了小写字母以外的所有字符
/[^\\\/\^]/     //除了(\)(/)(^)之外的所有字符
/[^\&quot;\&apos;]       //除了双引号(&quot;)和单引号(&apos;)之外的所有字符
</code></pre><p><strong><em>例5：</em></strong> 更多的单词和数字</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/^[a-zA-Z0-9_]&#123;1,&#125;$/      //所有包含一个以上的字母、数字或下划线的字符串</div><div class="line">/^[1-9][0-9]&#123;0,&#125;$/        //所有的正整数</div><div class="line">/^\-&#123;0,1&#125;[0-9]&#123;1,&#125;$/      //所有的整数</div><div class="line">/^[-]?[0-9]+\.?[0-9]+$/   //所有的浮点数</div></pre></td></tr></table></figure>
<p>解释下上面的第4条：以一个可选的负号(<code>[-]?</code>) 开头(<code>^</code>)、跟着一个或更多的数字(<code>[0-9]+</code>)、和一个小数点(<code>.</code>) 再跟上1个或多个数字(<code>[0-9]+</code>)，并且后面没有其他任何东西(<code>$</code>)。</p>
<p>由于特殊字符<code>?</code> 和 <code>{0,1}</code> 是相等的，它们都代表着：<strong>0个或1个前面的内容</strong> 或 <strong>前面的内容是可选的</strong>。所以上面第四条可以简化为：</p>
<pre><code>/^\-?[0-9]{1,}\.?[0-9]{1,}$/
</code></pre><p>特殊字符<code>*</code> 和 <code>{0,}</code> 是相等的，它们代表着：<strong>0个或多个前面的内容</strong> 。</p>
<p>特殊字符<code>+</code> 和 <code>{1,}</code> 是相等的，它们代表着：<strong>1个或多个前面的内容</strong> 。所以上面的4条可以改为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/^[a-zA-Z0-9_]+$/</div><div class="line">/^[1-9][0-9]*$/</div><div class="line">/^\-?[0-9]+$/</div><div class="line">/^\-?[0-9]+\.?[0-9]+$/</div></pre></td></tr></table></figure>
<p><strong><em>例6：</em></strong> 字符匹配</p>
<pre><code>/a.c/
</code></pre><p>可以匹配出的结果有<code>aac</code>,<code>abc</code>,<code>acc</code>,<code>a4c</code>,<code>a#c</code>等等。</p>
<h2 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h2><h3 id="1-检验数字的表达式"><a href="#1-检验数字的表达式" class="headerlink" title="1.检验数字的表达式"></a>1.检验数字的表达式</h3><ul>
<li>数字：^[0-9]*$</li>
<li>n位的数字：^\d{n}$</li>
<li>至少n位的数字：^\d{n,}$</li>
<li>m-n位的数字：^\d{m,n}$</li>
<li>零和非零开头的数字：^(0|[1-9][0-9]*)$</li>
<li>非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$</li>
<li>带1-2位小数的正数或负数：^(-)?\d+(.\d{1,2})?$</li>
<li>正数、负数、和小数：^(-|+)?\d+(.\d+)?$</li>
<li>有两位小数的正实数：^[0-9]+(.[0-9]{2})?$</li>
<li>有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$</li>
<li>非零的正整数：^[1-9]\d<em>$ 或 ^([1-9][0-9]</em>){1,3}$ 或 ^+?[1-9][0-9]*$</li>
<li>非零的负整数：^-[1-9][]0-9”<em>$ 或 ^-[1-9]\d</em>$</li>
<li>非负整数：^\d+$ 或 ^[1-9]\d*|0$</li>
<li>非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</li>
<li>非负浮点数：^\d+(.\d+)?$ 或 ^[1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>|0?.0+|0$</li>
<li>非正浮点数：^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>))|0?.0+|0$</li>
<li>正浮点数：^[1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>$ 或 ^(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]</em>.[0-9]+)|([0-9]<em>[1-9][0-9]</em>))$</li>
<li>负浮点数：^-([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>)$ 或 ^(-(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]</em>.[0-9]+)|([0-9]<em>[1-9][0-9]</em>)))$</li>
<li>浮点数：^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>|0?.0+|0)$</li>
</ul>
<h3 id="2-检测字符的表达式"><a href="#2-检测字符的表达式" class="headerlink" title="2.检测字符的表达式"></a>2.检测字符的表达式</h3><ul>
<li>汉字：^[\u4e00-\u9fa5]{0,}$</li>
<li>英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</li>
<li>长度为3-20的所有字符：^.{3,20}$</li>
<li>由26个英文字母组成的字符串：^[A-Za-z]+$</li>
<li>由26个大写英文字母组成的字符串：^[A-Z]+$</li>
<li>由26个小写英文字母组成的字符串：^[a-z]+$</li>
<li>由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$</li>
<li>由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w{3,20}$</li>
<li>中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$</li>
<li>中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</li>
<li>可以输入含有^%&amp;’,;=?$\”等字符：[^%&amp;’,;=?$\x22]+</li>
<li>禁止输入含有~的字符：[^~\x22]+</li>
</ul>
<h3 id="3-特殊需求表达式"><a href="#3-特殊需求表达式" class="headerlink" title="3.特殊需求表达式"></a>3.特殊需求表达式</h3><ul>
<li>Email地址：^[a-z0-9]+([._\-]<em>[a-z0-9])</em>@([a-z0-9]+[-a-z0-9]*[a-z0-9]+.){1,63}[a-z0-9]+$</li>
<li>域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</li>
<li>InternetURL：[a-zA-z]+://[^\s]<em> 或 ^<a href="http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=" target="_blank" rel="external">http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=</a>]</em>)?$</li>
<li>手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</li>
<li>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$</li>
<li>国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7}</li>
<li>电话号码正则表达式（支持手机号码，3-4位区号，7-8位直播号码，1－4位分机号）: ((\d{11})|^((\d{7,8})|(\d{4}|\d{3})-(\d{7,8})|(\d{4}|\d{3})-(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1})|(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1}))$)</li>
<li>身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X：(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)</li>
<li>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$</li>
<li>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$</li>
<li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.<em>\d)(?=.</em>[a-z])(?=.*[A-Z]).{8,10}$</li>
<li>日期格式：^\d{4}-\d{1,2}-\d{1,2}</li>
<li>一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</li>
<li>一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$</li>
<li>钱的输入格式：<ol>
<li>有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：^[1-9][0-9]*$</li>
<li>这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$</li>
<li>一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$</li>
<li>这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧。下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$</li>
<li>必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：^[0-9]+(.[0-9]{2})?$</li>
<li>这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$</li>
<li>这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</li>
<li>1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</li>
<li>备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</li>
</ol>
</li>
<li>xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</li>
<li>中文字符的正则表达式：[\u4e00-\u9fa5]</li>
<li>双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</li>
<li>空白行的正则表达式：\n\s*\r (可以用来删除空白行)</li>
<li>HTML标记的正则表达式：&lt;(\S<em>?)[^&gt;]</em>&gt;.<em>?|&lt;.</em>? /&gt; ( 首尾空白字符的正则表达式：^\s<em>|\s</em>$或(^\s<em>)|(\s</em>$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</li>
<li>腾讯QQ号：[1-9][0-9]{4,} (腾讯QQ号从10000开始)</li>
<li>中国邮政编码：[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)</li>
<li>IP地址：((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</li>
</ul>
<p><a href="http://www.runoob.com/regexp/regexp-tutorial.html" target="_blank" rel="external">正则表达式教程–菜鸟教程</a><br><a href="http://www.w3school.com.cn/jsref/jsref_obj_regexp.asp" target="_blank" rel="external">JavaScript RegExp 对象–W3school</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正则表达式是对字符串操作的一种逻辑公式。&lt;/p&gt;
    
    </summary>
    
      <category term="Web前端" scheme="http://yoursite.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript手册</title>
    <link href="http://yoursite.com/2017/08/05/JavaScript%E6%89%8B%E5%86%8C/"/>
    <id>http://yoursite.com/2017/08/05/JavaScript手册/</id>
    <published>2017-08-05T14:51:43.000Z</published>
    <updated>2017-09-17T13:33:07.628Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。</p>
<a id="more"></a>
<h2 id="Event对象之事件句柄-Event-Handlers"><a href="#Event对象之事件句柄-Event-Handlers" class="headerlink" title="Event对象之事件句柄(Event Handlers)"></a>Event对象之事件句柄(Event Handlers)</h2><h3 id="onload-amp-onunload事件"><a href="#onload-amp-onunload事件" class="headerlink" title="onload &amp; onunload事件"></a>onload &amp; onunload事件</h3><p>是在用户进入或者离开页面的时候被触发。onload事件可用于检测访问者的浏览器类型和浏览器版本;onload和onunload事件可用于处理cookie。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;body onload=<span class="string">"checkCookies()"</span>&gt;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkCookies</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(navigator.cookieEnabled = <span class="literal">true</span>)&#123;</div><div class="line">        alert(<span class="string">"Cookies可用"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        alert(<span class="string">"不可用"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/body&gt;</span></div></pre></td></tr></table></figure>
<h3 id="onchange事件"><a href="#onchange事件" class="headerlink" title="onchange事件"></a>onchange事件</h3><p>在域的内容改变时发生。常结合对输入字段的验证来使用。</p>
<p>支持该事件的HTML标签：<code>&lt;input type=&quot;text&quot;&gt;</code> , <code>&lt;select&gt;</code> , <code>&lt;textarea&gt;</code> ;</p>
<p>支持该事件的JavaScript对象：<code>fileUpload</code> , <code>select</code> , <code>text</code> , <code>textarea</code>;</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">输入你的名字：&lt;input type=<span class="string">"text"</span> id=<span class="string">"name"</span> onchange=<span class="string">"myFunction()"</span>&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>当你离开输入框后，函数将被触发，将小写字母转为大写字母。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> name = <span class="built_in">document</span>.getElementById(<span class="string">"name"</span>);</div><div class="line">    name.value = name.value.toUpperCase();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="onmouseover-amp-onmouseout事件"><a href="#onmouseover-amp-onmouseout事件" class="headerlink" title="onmouseover &amp; onmouseout事件"></a>onmouseover &amp; onmouseout事件</h3><p>用于在用户的鼠标移至 HTML 元素上方或移出元素时触发函数。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;div onmouseover=<span class="string">"mOver(this)"</span> onmouseout=<span class="string">"mOut(this)"</span> style=<span class="string">"background: red;width: 120px;height: 120px;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mOut</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">    obj.innerHTML = <span class="string">"Move Over Me"</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mOver</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">    obj.innerHTML = <span class="string">"Thank you!"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="onmousedown-amp-onmouseup-amp-onclick事件"><a href="#onmousedown-amp-onmouseup-amp-onclick事件" class="headerlink" title="onmousedown &amp; onmouseup &amp; onclick事件"></a>onmousedown &amp; onmouseup &amp; onclick事件</h3><p>onmousedown, onmouseup 以及 onclick 构成了鼠标点击事件的所有部分。首先当点击鼠标按钮时，会触发 onmousedown 事件，当释放鼠标按钮时，会触发 onmouseup 事件，最后，当完成鼠标点击时，会触发 onclick 事件。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;img id=<span class="string">"img"</span> onmousedown=<span class="string">"lighton()"</span> onmouseup=<span class="string">"lightoff()"</span> src=<span class="string">"http://www.runoob.com/try/demo_source/bulboff.gif"</span> width=<span class="string">"100px"</span> height=<span class="string">"180px"</span>&gt;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">lightoff</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'img'</span>).src=<span class="string">"http://www.runoob.com/try/demo_source/bulboff.gif"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="button事件"><a href="#button事件" class="headerlink" title="button事件"></a>button事件</h3><p>指示当事件被触发时哪个鼠标按键被点击。语法：<code>event.button = 0|1|2</code> 。</p>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">规定鼠标左键</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">规定鼠标中键</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">规定鼠标右键</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onmousedown</span>=<span class="string">"whichbutton(event)"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>click in the document!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">whichbutton</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(event.button == <span class="number">2</span>)&#123;</div><div class="line">            alert(<span class="string">"you click the right mouse button!"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            alert(<span class="string">"you click the left mouse button!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="clientX-amp-clientY事件"><a href="#clientX-amp-clientY事件" class="headerlink" title="clientX &amp; clientY事件"></a>clientX &amp; clientY事件</h3><p>返回当事件被触发时鼠标指针向对于浏览器页面（或客户区：当前窗口）的<strong>水平坐标</strong>或者是<strong>垂直坐标</strong>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onmousedown</span>=<span class="string">"showCoords(event)"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>click in the document!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showCoords</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        x = event.clientX;</div><div class="line">        y = event.clientY;</div><div class="line">        alert(<span class="string">"X coords: "</span> + x + <span class="string">",Y coords: "</span> + y);</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="screenX-amp-screenY事件"><a href="#screenX-amp-screenY事件" class="headerlink" title="screenX &amp; screenY事件"></a>screenX &amp; screenY事件</h3><p>返回事件发生时鼠标指针相对于屏幕的<strong>水平坐标</strong>或者是<strong>垂直坐标</strong>。</p>
<h2 id="DOM-Element对象"><a href="#DOM-Element对象" class="headerlink" title="DOM Element对象"></a>DOM Element对象</h2><h3 id="node-appendChild-node"><a href="#node-appendChild-node" class="headerlink" title="node.appendChild(node)"></a>node.appendChild(node)</h3><p>向节点添加最后一个子节点:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;ul id=<span class="string">"myList"</span>&gt;&lt;li&gt;coffee&lt;/li&gt;&lt;li&gt;tea&lt;/li&gt;&lt;/ul&gt;</div><div class="line">&lt;button onclick=<span class="string">"myfunction()"</span>&gt;点击&lt;/button&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    <span class="keyword">function</span> <span class="function"><span class="title">myfunction</span></span>() &#123;</div><div class="line">        var node = document.createElement(<span class="string">"li"</span>);</div><div class="line">        var textnode = document.createTextNode(<span class="string">"water"</span>);</div><div class="line">        node.appendChild(textnode);</div><div class="line">        document.getElementById(<span class="string">"myList"</span>).appendChild(node);</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>从一个列表向另一个列表中移动列表项：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;ul id=<span class="string">"myList1"</span>&gt;&lt;li&gt;coffee&lt;/li&gt;&lt;li&gt;tea&lt;/li&gt;&lt;/ul&gt;</div><div class="line">&lt;ul id=<span class="string">"myList2"</span>&gt;&lt;li&gt;water&lt;/li&gt;&lt;li&gt;milk&lt;/li&gt;&lt;/ul&gt;</div><div class="line">&lt;button onclick=<span class="string">"myfunction()"</span>&gt;点击&lt;/button&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    <span class="keyword">function</span> <span class="function"><span class="title">myfunction</span></span>() &#123;</div><div class="line">        var node = document.getElementById(<span class="string">"myList2"</span>).firstChild;</div><div class="line">        document.getElementById(<span class="string">"myList1"</span>).appendChild(node);</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="node-attributes"><a href="#node-attributes" class="headerlink" title="node.attributes"></a>node.attributes</h3><p>返回指定节点的属性集合，即NamedNodeMap:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;button id=<span class="string">"btn"</span> onclick=<span class="string">"myFunction()"</span> class=<span class="string">"btn"</span>&gt;点击&lt;/button&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    <span class="keyword">function</span> <span class="function"><span class="title">myFunction</span></span>() &#123;</div><div class="line">        var x = document.getElementById(<span class="string">"btn"</span>).attributes.length;</div><div class="line">        document.write(x);</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;  //输出结果：3</div></pre></td></tr></table></figure>
<h3 id="element-childNodes"><a href="#element-childNodes" class="headerlink" title="element.childNodes"></a>element.childNodes</h3><p>返回元素子节点的NodeList。</p>
<h3 id="node-cloneNode-deep"><a href="#node-cloneNode-deep" class="headerlink" title="node.cloneNode(deep)"></a>node.cloneNode(deep)</h3><p>创建节点的拷贝，并返回该副本。克隆所有属性以及它们的值。如果您需要克隆所有后代，请把deep参数设置true，否则设置为false。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;ul id=<span class="string">"myList1"</span>&gt;&lt;li&gt;coffee&lt;/li&gt;&lt;li&gt;tea&lt;/li&gt;&lt;/ul&gt;</div><div class="line">&lt;ul id=<span class="string">"myList2"</span>&gt;&lt;li&gt;water&lt;/li&gt;&lt;li&gt;milk&lt;/li&gt;&lt;/ul&gt;</div><div class="line">&lt;button onclick=<span class="string">"myFunction()"</span>&gt;点击&lt;/button&gt;</div><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">myFunction</span></span>() &#123;</div><div class="line">    var <span class="built_in">clone</span> = document.getElementById(<span class="string">"myList2"</span>).lastChild.cloneNode(<span class="literal">true</span>);</div><div class="line">    document.getElementById(<span class="string">"myList1"</span>).appendChild(<span class="built_in">clone</span>);</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="node-insertBefore-newnode-existingnode"><a href="#node-insertBefore-newnode-existingnode" class="headerlink" title="node.insertBefore(newnode,existingnode)"></a>node.insertBefore(newnode,existingnode)</h3><p>在已有子节点之前插入新的子节点:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;ul id=<span class="string">"myList"</span>&gt;&lt;li&gt;coffee&lt;/li&gt;&lt;li&gt;tea&lt;/li&gt;&lt;/ul&gt;</div><div class="line">&lt;button onclick=<span class="string">"myFunction()"</span>&gt;点击&lt;/button&gt;</div><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">myFunction</span></span>() &#123;</div><div class="line">    var newItem = document.createElement(<span class="string">'li'</span>);</div><div class="line">    var textnode = document.createTextNode(<span class="string">'water'</span>);</div><div class="line">    newItem.appendChild(textnode);</div><div class="line"></div><div class="line">    var list = document.getElementById(<span class="string">'myList'</span>);</div><div class="line">    list.insertBefore(newItem,list.childNodes[0]);</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="node-nextSibling"><a href="#node-nextSibling" class="headerlink" title="node.nextSibling"></a>node.nextSibling</h3><p>返回指定节点之后紧跟的节点，在相同的树层级中:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;ul id=<span class="string">'myList'</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">'item1'</span>&gt;</span>coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">'item2'</span>&gt;</span>tea<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></div><div class="line">x = <span class="built_in">document</span>.getElementById(<span class="string">'item1'</span>).nextSibling.id;</div><div class="line"><span class="built_in">document</span>.write(x);  <span class="comment">//输出：item2</span></div></pre></td></tr></table></figure>
<h3 id="node-parentNode"><a href="#node-parentNode" class="headerlink" title="node.parentNode"></a>node.parentNode</h3><p>以Node对象的形式返回指定节点的父节点:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;<span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>tea<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></div><div class="line">x = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>)[<span class="number">0</span>];</div><div class="line"><span class="built_in">document</span>.write(x.parentNode.nodeName);  <span class="comment">//输出：UL</span></div></pre></td></tr></table></figure>
<h2 id="Array对象"><a href="#Array对象" class="headerlink" title="Array对象"></a>Array对象</h2><h3 id="concat-–连接"><a href="#concat-–连接" class="headerlink" title="concat() –连接"></a>concat() –连接</h3><p><strong>连接</strong>两个或更多的数组，并返回结果。如果要进行<code>concat()</code>操作的参数是数组，那么添加的是数组中的元素，而不是数组。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = [<span class="string">"Red"</span>,<span class="string">"Green"</span>,<span class="string">"Blue"</span>];</div><div class="line"><span class="keyword">var</span> name = [<span class="string">"Luya"</span>,<span class="string">"Awebone"</span>];</div><div class="line"><span class="keyword">var</span> kei = [<span class="string">"Robin"</span>];</div><div class="line"><span class="built_in">document</span>.write(color.concat(name,kei));</div><div class="line"><span class="comment">//输出：Red,Green,Blue,Luya,Awebone,Robin</span></div></pre></td></tr></table></figure>
<h3 id="shift-amp-pop-–删除"><a href="#shift-amp-pop-–删除" class="headerlink" title="shift() &amp; pop() –删除"></a>shift() &amp; pop() –删除</h3><p><code>shift()</code>方法用于把数组的<strong>第一个元素</strong>从其中<strong>删除</strong>，并返回第一个元素的值。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = [<span class="string">"Red"</span>,<span class="string">"Green"</span>,<span class="string">"Blue"</span>];</div><div class="line"><span class="built_in">document</span>.write(color+<span class="string">"&lt;br&gt;"</span>);  <span class="comment">//输出：Red,Green,Blue</span></div><div class="line"><span class="built_in">document</span>.write(color.shift()+<span class="string">"&lt;br&gt;"</span>);  <span class="comment">//输出：Red</span></div><div class="line"><span class="built_in">document</span>.write(color);  <span class="comment">//输出：Green,Blue</span></div></pre></td></tr></table></figure>
<p><code>pop()</code>方法用于删除数组的<strong>最后一个元素</strong>并返回<strong>删除</strong>的元素。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = [<span class="string">"Red"</span>,<span class="string">"Green"</span>,<span class="string">"Blue"</span>];</div><div class="line"><span class="built_in">document</span>.write(color+<span class="string">"&lt;br&gt;"</span>);  <span class="comment">//输出：Red,Green,Blue</span></div><div class="line"><span class="built_in">document</span>.write(color.pop()+<span class="string">"&lt;br&gt;"</span>);  <span class="comment">//输出：Blue</span></div><div class="line"><span class="built_in">document</span>.write(color);  <span class="comment">//输出：Red,Green</span></div></pre></td></tr></table></figure>
<h3 id="unshift-amp-push-–增加"><a href="#unshift-amp-push-–增加" class="headerlink" title="unshift() &amp; push() –增加"></a>unshift() &amp; push() –增加</h3><p><code>unshift()</code>方法可向数组的<strong>开头添加</strong>一个或更多元素，并返回新的长度。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = [<span class="string">"Red"</span>,<span class="string">"Green"</span>,<span class="string">"Blue"</span>];</div><div class="line">color.unshift(<span class="string">"hello"</span>,<span class="string">"world"</span>);</div><div class="line"><span class="built_in">document</span>.write(color);  <span class="comment">//输出：hello,world,Red,Green,Blue</span></div></pre></td></tr></table></figure>
<p><code>push()</code>方法可向数组的末尾添加一个或多个元素，并返回新的长度。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = [<span class="string">"Red"</span>,<span class="string">"Green"</span>,<span class="string">"Blue"</span>];</div><div class="line">color.push(<span class="string">"hello"</span>,<span class="string">"world"</span>);</div><div class="line"><span class="built_in">document</span>.write(color);  <span class="comment">//输出：Red,Green,Blue,hello,world</span></div></pre></td></tr></table></figure>
<h3 id="splice-–插入-删除-替换"><a href="#splice-–插入-删除-替换" class="headerlink" title="splice() –插入,删除,替换"></a>splice() –插入,删除,替换</h3><p>语法：<code>array.splice(index,howmany,item1,...,itemX)</code></p>
<p><code>index</code>必须，规定从何处添加或删除元素；<code>howmany</code>必须，规定应该删除多少元素，必须为数字，可以为“0”，若为规定此参数，则删除从index开始到原数组结尾的所有元素；<code>item</code>可选，要添加到数组的新元素。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = [<span class="string">"Red"</span>,<span class="string">"Green"</span>,<span class="string">"Blue"</span>,<span class="string">"pink"</span>];</div><div class="line">color.splice(<span class="number">2</span>,<span class="number">0</span>,<span class="string">"luya"</span>,<span class="string">"awebone"</span>);</div><div class="line"><span class="built_in">document</span>.write(color);  <span class="comment">//输出：Red,Green,luya,awebone,Blue,pink</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = [<span class="string">"Red"</span>,<span class="string">"Green"</span>,<span class="string">"Blue"</span>,<span class="string">"pink"</span>];</div><div class="line">color.splice(<span class="number">2</span>,<span class="number">1</span>,<span class="string">"luya"</span>);</div><div class="line"><span class="built_in">document</span>.write(color);  <span class="comment">//输出：Red,Green,luya,pink</span></div></pre></td></tr></table></figure>
<h3 id="reverse-–颠倒"><a href="#reverse-–颠倒" class="headerlink" title="reverse() –颠倒"></a>reverse() –颠倒</h3><p><code>reverse()</code>方法用于<strong>颠倒</strong>数组中元素的顺序。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = [<span class="string">"Red"</span>,<span class="string">"Green"</span>,<span class="string">"Blue"</span>];</div><div class="line"><span class="built_in">document</span>.write(color.reverse());</div><div class="line"><span class="comment">//输出：Blue,Green,Red</span></div></pre></td></tr></table></figure>
<h3 id="copyWithin-–拷贝"><a href="#copyWithin-–拷贝" class="headerlink" title="copyWithin() –拷贝"></a>copyWithin() –拷贝</h3><p><code>copyWithin()</code>方法用于从数组的指定位置<strong>拷贝</strong>元素到数组的另一个指定位置中。</p>
<p>语法：<code>array.copyWithin(target,start,end)</code></p>
<p><code>target</code>必须，从该位置开始替换数据；<code>start</code>必须，从该位置开始读取数据，默认为 0 。如果为负值，表示倒数；<code>end</code>可选，停止复制的索引位置(默认为array.length)。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = [<span class="string">"Red"</span>,<span class="string">"Green"</span>,<span class="string">"Blue"</span>,<span class="string">"pink"</span>];</div><div class="line"><span class="built_in">document</span>.write(color.copyWithin(<span class="number">0</span>,<span class="number">1</span>)+<span class="string">"&lt;br&gt;"</span>); <span class="comment">//Green,Blue,pink,pink</span></div><div class="line"><span class="built_in">document</span>.write(color.copyWithin(<span class="number">1</span>,<span class="number">1</span>)+<span class="string">"&lt;br&gt;"</span>); <span class="comment">//Red,Green,Blue,pink</span></div><div class="line"><span class="built_in">document</span>.write(color.copyWithin(<span class="number">2</span>,<span class="number">1</span>)+<span class="string">"&lt;br&gt;"</span>); <span class="comment">//Red,Green,Green,Blue</span></div><div class="line"><span class="built_in">document</span>.write(color.copyWithin(<span class="number">3</span>,<span class="number">1</span>)+<span class="string">"&lt;br&gt;"</span>); <span class="comment">//Red,Green,Blue,Green</span></div><div class="line"><span class="built_in">document</span>.write(color.copyWithin(<span class="number">2</span>,<span class="number">3</span>)+<span class="string">"&lt;br&gt;"</span>); <span class="comment">//Red,Green,pink,pink</span></div><div class="line"><span class="comment">//上边的document要一条一条的输出，一起输出结果会变</span></div></pre></td></tr></table></figure>
<h3 id="sort-–排序"><a href="#sort-–排序" class="headerlink" title="sort() –排序"></a>sort() –排序</h3><p><code>sort()</code>方法用于对数组的元素进行<strong>排序</strong>。排序顺序可以是字母或数字，并按升序或降序。默认排序顺序为按字母升序。</p>
<p><strong><em>注意：</em></strong> 当数字是按字母顺序排列时”40”将排在”5”前面；使用数字排序，你必须通过一个函数作为参数来调用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = [<span class="string">"Red"</span>,<span class="string">"Green"</span>,<span class="string">"Blue"</span>,<span class="string">"pink"</span>];</div><div class="line"><span class="built_in">document</span>.write(color.sort());  <span class="comment">//输出：Blue,Green,Red,pink</span></div></pre></td></tr></table></figure>
<p>数字排序(升序):</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> points = [<span class="number">40</span>,<span class="number">20</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">12</span>,<span class="number">23</span>];</div><div class="line">points.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>)</span>&#123; <span class="keyword">return</span> a-b; &#125;);</div><div class="line"><span class="built_in">document</span>.write(points);  <span class="comment">//输出：1,5,12,20,23,40</span></div></pre></td></tr></table></figure>
<p>若要实现数字降序则改为：<code>return b-a</code> 。</p>
<h3 id="some-–检测"><a href="#some-–检测" class="headerlink" title="some() –检测"></a>some() –检测</h3><p><code>some()</code>方法用于检测数组中的元素是否<strong>满足指定条件</strong>(函数提供)。会依次执行数组的每个元素，如果有一个元素满足条件，就返回<code>true</code>,剩下的元素不会在执行检测；如果没有满足条件的元素，则返回<code>false</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ages = [<span class="number">3</span>,<span class="number">10</span>,<span class="number">18</span>,<span class="number">20</span>];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">age</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> age &gt;= <span class="number">18</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">document</span>.write(ages.some(check));  <span class="comment">//输出：true</span></div></pre></td></tr></table></figure>
<h3 id="map-–处理"><a href="#map-–处理" class="headerlink" title="map() –处理"></a>map() –处理</h3><p><code>map()</code>方法返回一个新数组，数组中的元素为原始数组元素调用函数<strong>处理</strong>后的值。</p>
<p><strong><em>注意：</em></strong> <code>some()</code>和<code>map()</code>都不会对空数组进行检测。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">16</span>,<span class="number">100</span>];</div><div class="line"><span class="built_in">document</span>.write(num.map(<span class="built_in">Math</span>.sqrt));  <span class="comment">//输出：1,2,4,10</span></div></pre></td></tr></table></figure>
<h3 id="join-–转换"><a href="#join-–转换" class="headerlink" title="join() –转换"></a>join() –转换</h3><p><code>join()</code>方法用于把数组中的所有元素<strong>转换</strong>一个字符串，元素是通过指定的分隔符进行分隔的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = [<span class="string">"Red"</span>,<span class="string">"Green"</span>,<span class="string">"Blue"</span>];</div><div class="line"><span class="built_in">document</span>.write(color.join(<span class="string">" and "</span>));  <span class="comment">//输出：Red and Green and Blue</span></div></pre></td></tr></table></figure>
<h3 id="fill-–填充"><a href="#fill-–填充" class="headerlink" title="fill() –填充"></a>fill() –填充</h3><p><code>fill()</code>方法用于将一个固定值替换数组的元素。</p>
<p>语法：<code>array.fill(value,start,end)</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = [<span class="string">"Red"</span>,<span class="string">"Green"</span>,<span class="string">"Blue"</span>];</div><div class="line"><span class="built_in">document</span>.write(color.fill(<span class="string">"and"</span>));  <span class="comment">//输出：and,and,and</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = [<span class="string">"Red"</span>,<span class="string">"Green"</span>,<span class="string">"Blue"</span>,<span class="string">"pink"</span>];</div><div class="line"><span class="built_in">document</span>.write(color.fill(<span class="string">"and"</span>,<span class="number">1</span>,<span class="number">3</span>)); <span class="comment">//输出：Red,and,and,pink</span></div></pre></td></tr></table></figure>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><p><code>filter()</code>方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ages = [<span class="number">32</span>,<span class="number">15</span>,<span class="number">18</span>,<span class="number">7</span>,<span class="number">39</span>];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">age</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> age &gt;= <span class="number">18</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">document</span>.write(ages.filter(check));  <span class="comment">//输出：32,18,39</span></div></pre></td></tr></table></figure>
<p><a href="http://www.runoob.com/jsref/jsref-obj-array.html" target="_blank" rel="external">菜鸟教程JavaScript Array对象</a></p>
<h2 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h2><p>所有浏览器都支持date的各种方法。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"><span class="comment">//var d = new Date(year,month);</span></div><div class="line"><span class="built_in">document</span>.write(d.getDate());</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">getDate()</td>
<td style="text-align:center">返回一个月中的某一天 (1~31)</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td style="text-align:center">getDay()</td>
<td style="text-align:center">返回一周中的某一天 (0~6)</td>
<td style="text-align:center">周日是0，周一是1，依次类推</td>
</tr>
<tr>
<td style="text-align:center">getFullYear()</td>
<td style="text-align:center">返回一个表示年份的4位数字</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td style="text-align:center">getMonth()</td>
<td style="text-align:center">返回月份(0~11)</td>
<td style="text-align:center">0(一月)到11(十二月)</td>
</tr>
<tr>
<td style="text-align:center">getHours()</td>
<td style="text-align:center">返回Date对象的小时(0~23)</td>
<td style="text-align:center">0表示(午夜)</td>
</tr>
<tr>
<td style="text-align:center">getMinutes()</td>
<td style="text-align:center">返回Date对象的分钟(0~59)</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td style="text-align:center">getSeconds()</td>
<td style="text-align:center">返回Date对象的秒数(0~59)</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td style="text-align:center">getMilliseconds()</td>
<td style="text-align:center">返回Date对象的毫秒(0~999)</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td style="text-align:center">getTime()</td>
<td style="text-align:center">返回1970年1月1日至今的毫秒数</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td style="text-align:center">parse()</td>
<td style="text-align:center">返回1970年1月1日午夜到指定日期（字符串）的毫秒数</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td style="text-align:center">setDate()</td>
<td style="text-align:center">设置一个月的某一天</td>
<td style="text-align:center">其他的方法类似，这里就不一一列举</td>
</tr>
<tr>
<td style="text-align:center">toDateString()</td>
<td style="text-align:center">把Date对象的日期部分转换为字符串</td>
<td style="text-align:center">输出：Fri Aug 04 2017</td>
</tr>
<tr>
<td style="text-align:center">toLocaleDateString()</td>
<td style="text-align:center">根据本地时间格式，把Date对象的日期部分转换为字符串</td>
<td style="text-align:center">输出：2017/8/4</td>
</tr>
<tr>
<td style="text-align:center">toLocaleTimeString()</td>
<td style="text-align:center">根据本地时间格式，把Date对象的时间部分转换为字符串</td>
<td style="text-align:center">输出：上午10:59:41</td>
</tr>
<tr>
<td style="text-align:center">toLocaleString()</td>
<td style="text-align:center">据本地时间格式，把Date对象转换为字符串</td>
<td style="text-align:center">输出：2017/8/4 上午11:00:36</td>
</tr>
</tbody>
</table>
<p>setDate()方法:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">d.setDate(<span class="number">15</span>);</div><div class="line"><span class="built_in">document</span>.write(d); <span class="comment">//今天真是的是4号，输出：Tue Aug 15 2017 10:54:13 GMT+0800 (中国标准时间)</span></div></pre></td></tr></table></figure>
<p>getFullYear()方法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"><span class="built_in">document</span>.write(d.getFullYear());  <span class="comment">//输出：2017</span></div></pre></td></tr></table></figure>
<p>getHours()方法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"July 21,2017 21:00:00"</span>);</div><div class="line"><span class="built_in">document</span>.write(d.getHours());  <span class="comment">//输出：21</span></div></pre></td></tr></table></figure>
<p><a href="http://www.runoob.com/jsref/jsref-obj-date.html" target="_blank" rel="external">菜鸟教程JavaScipt Date对象</a></p>
<h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><h3 id="floor-x"><a href="#floor-x" class="headerlink" title="floor(x)"></a>floor(x)</h3><p>对x进行下舍入，返回小于等于x的最大整数：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.write(<span class="built_in">Math</span>.floor(<span class="number">1.6</span>));  <span class="comment">//输出：1</span></div></pre></td></tr></table></figure>
<h3 id="ceil-x"><a href="#ceil-x" class="headerlink" title="ceil(x)"></a>ceil(x)</h3><p>对x进行上舍入，返回大于等于x的最大整数：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.write(<span class="built_in">Math</span>.ceil(<span class="number">1.4</span>));  <span class="comment">//输出：2</span></div></pre></td></tr></table></figure>
<h3 id="round-x"><a href="#round-x" class="headerlink" title="round(x)"></a>round(x)</h3><p>对x进行四舍五入：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.write(<span class="built_in">Math</span>.round(<span class="number">1.4</span>));  <span class="comment">//输出：1</span></div></pre></td></tr></table></figure>
<h3 id="random"><a href="#random" class="headerlink" title="random()"></a>random()</h3><p>返回介于 0(包含) ~ 1(不包含) 之间的一个随机数：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;p id=<span class="string">"demo"</span>&gt;点击按钮随机显示1到10之间的随机数：&lt;/p&gt;</div><div class="line">&lt;button onclick=<span class="string">"myFunction()"</span>&gt;点击&lt;/button&gt;</div><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">myFunction</span></span>() &#123;</div><div class="line">    var demo = document.getElementById(<span class="string">"demo"</span>);</div><div class="line">    demo.innerHTML = Math.floor(Math.random() * 10 + 1);</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="max-x-y-…-n-amp-min"><a href="#max-x-y-…-n-amp-min" class="headerlink" title="max(x,y,…,n) &amp; min()"></a>max(x,y,…,n) &amp; min()</h3><p>max()返回两个指定的数中带有较大的值的那个数:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.write(<span class="built_in">Math</span>.max(<span class="number">1</span>,<span class="number">56</span>,<span class="number">4</span>,<span class="number">22</span>,<span class="number">-8</span>));  <span class="comment">//输出：56</span></div></pre></td></tr></table></figure>
<p><a href="http://www.runoob.com/jsref/jsref-obj-math.html" target="_blank" rel="external">菜鸟教程JavaScipt Math对象</a></p>
<h2 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h2><h3 id="substring-amp-slice-amp-substr-–提取"><a href="#substring-amp-slice-amp-substr-–提取" class="headerlink" title="substring() &amp; slice() &amp; substr() –提取"></a>substring() &amp; slice() &amp; substr() –提取</h3><p><code>substring()</code>用于提取字符串中介于两个指定下标之间的字符:</p>
<p>语法：<code>stringObject.substring(start,stop)</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">"Hello world!"</span></div><div class="line"><span class="built_in">document</span>.write(str.substring(<span class="number">3</span>));  <span class="comment">//输出：lo world!</span></div><div class="line"><span class="built_in">document</span>.write(str.substring(<span class="number">3</span>,<span class="number">7</span>));  <span class="comment">//输出：lo w</span></div></pre></td></tr></table></figure>
<p><code>slice()</code>可提取字符串的某个部分，并以新的字符串返回被提取的部分:</p>
<p>语法：<code>stringObject.slice(start,end)</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">"Hello happy world!"</span></div><div class="line"><span class="built_in">document</span>.write(str.slice(<span class="number">6</span>));  <span class="comment">//输出：happy world!</span></div><div class="line"><span class="built_in">document</span>.write(str.slice(<span class="number">6</span>,<span class="number">11</span>));  <span class="comment">//输出：happy</span></div></pre></td></tr></table></figure>
<p><code>substr()</code>可在字符串中抽取从 start 下标开始的指定数目的字符:</p>
<p>语法：<code>stringObject.substr(start,length)</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">"Hello world!"</span></div><div class="line"><span class="built_in">document</span>.write(str.substr(<span class="number">3</span>));  <span class="comment">//输出：lo world!</span></div><div class="line"><span class="built_in">document</span>.write(str.substr(<span class="number">3</span>,<span class="number">7</span>));  <span class="comment">//输出：lo worl</span></div></pre></td></tr></table></figure>
<h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h3><p>返回某个指定的字符串值在字符串中首次出现的位置。对大小写敏感；如果要检索的字符串值没有出现，则该方法返回-1。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">"Hello world!"</span></div><div class="line"><span class="built_in">document</span>.write(str.indexOf(<span class="string">"Hello"</span>) + <span class="string">" "</span>);</div><div class="line"><span class="built_in">document</span>.write(str.indexOf(<span class="string">"World"</span>) + <span class="string">" "</span>);</div><div class="line"><span class="built_in">document</span>.write(str.indexOf(<span class="string">"world"</span>));</div><div class="line"><span class="comment">//输出： 0 -1 6</span></div></pre></td></tr></table></figure>
<h2 id="RegExp对象"><a href="#RegExp对象" class="headerlink" title="RegExp对象"></a>RegExp对象</h2><p><code>RegExp</code>对象表示正则表达式，它是对字符串执行模式匹配的强大工具。</p>
<p>直接量语法：<code>/pattern/attributes</code></p>
<h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><table>
<thead>
<tr>
<th style="text-align:center">修饰符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">i</td>
<td style="text-align:left">执行对大小写不敏感的匹配</td>
</tr>
<tr>
<td style="text-align:center">g</td>
<td style="text-align:left">执行全局匹配(查找所有匹配而非在找到第一个匹配后停止)</td>
</tr>
<tr>
<td style="text-align:center">m</td>
<td style="text-align:left">执行多行匹配</td>
</tr>
</tbody>
</table>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"Visit W3School"</span>;</div><div class="line"><span class="keyword">var</span> patt1 = <span class="regexp">/w3school/i</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(patt1));  <span class="comment">//输出：W3School</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">"Is this all there is?"</span>;</div><div class="line"><span class="keyword">var</span> patt1=<span class="regexp">/is/gi</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(patt1));  <span class="comment">//输出：Is,is,is</span></div></pre></td></tr></table></figure>
<h3 id="方括号"><a href="#方括号" class="headerlink" title="方括号"></a>方括号</h3><ul>
<li><code>[abc]</code>表达式：用于查找方括号之间的任何字符,方括号内的字符可以是任何字符或字符范围。</li>
</ul>
<p>直接量语法：<code>/[abc]/</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"Is this all there is?"</span>;</div><div class="line"><span class="keyword">var</span> patt1 = <span class="regexp">/[a-h]/g</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(patt1));  <span class="comment">//输出：h,a,h,e,e</span></div></pre></td></tr></table></figure>
<ul>
<li><code>[^abc]</code>：用于查找任何不在方括号之间的字符。</li>
<li><code>[0-9]</code>：查找任何从0至9的数字。</li>
<li><code>[a-z]</code>：查找任何从小写a到小写z的字符。</li>
<li><code>(red|blue|green)</code>：查找任何指定的选项。</li>
</ul>
<h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><ul>
<li><code>.</code> : 查找单个字符，除了换行和行结束符。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"That's hot!"</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(<span class="regexp">/h.t/g</span>));  <span class="comment">//输出：hat,hot</span></div></pre></td></tr></table></figure>
<ul>
<li><p><code>\w</code> : 查找单词字符。<strong>单词字符包括：a-z、A-Z、0-9，以及下划线。</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'Give 100%!'</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(<span class="regexp">/\w/g</span>));  <span class="comment">//输出：G,i,v,e,1,0,0</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>\W</code> : 查找非单词字符。（上面的代码输出：<code>%</code>）</p>
</li>
<li><p><code>\d</code> &amp; <code>\D</code> : 查找数字/查找非数字字符。</p>
</li>
<li><p><code>\s</code> &amp; <code>\S</code> : 查找空白字符/查找非空白字符。空白字符可以是：</p>
<ul>
<li>空格符 (space character)</li>
<li>制表符 (tab character)</li>
<li>回车符 (carriage return character)</li>
<li>换行符 (new line character)</li>
<li>垂直换行符 (vertical tab character)</li>
<li>换页符 (form feed character)</li>
</ul>
</li>
<li><p><code>\b</code> : 匹配单词边界。在单词边界匹配的位置，单词字符后面或前面不与另一个单词字符直接相邻。请注意，匹配的单词边界并不包含在匹配中。换句话说，匹配的单词边界的长度为零。（不要与<code>[\b]</code>混淆。）如果未找到匹配，则返回<code>null</code>。</p>
</li>
</ul>
<p><em>注意</em>：<code>\b</code>元字符通常用于查找位于单词的开头或结尾的匹配。</p>
<p><strong><em>例子：</em></strong></p>
<p>1.<code>/\bm/</code> 匹配 “moon” 中的 ‘m’,返回<code>m</code>；</p>
<p>2.<code>/oo\b/</code> 不匹配 “moon” 中的 ‘oo’，因为 ‘oo’ 后面的 ‘n’ 是一个单词字符，返回<code>null</code>；</p>
<p>3.<code>/oon\b/</code> 匹配 “moon” 中的 ‘oon’，因为 ‘oon’ 位于字符串的末端，后面没有单词字符，返回<code>oon</code>；</p>
<p>4.<code>/\w\b\w/</code> 不匹配任何字符，因为单词字符之后绝不会同时紧跟着非单词字符和单词字符，返回<code>null</code>。</p>
<ul>
<li><code>\B</code> : 匹配非单词边界。匹配位置的上一个和下一个字符的类型是相同的：即必须同时是单词，或必须同时是非单词字符。字符串的开头和结尾处被视为非单词字符。如果未找到匹配，则返回<code>null</code></li>
</ul>
<p><em>注意</em>：<code>\B</code>元字符通常用于查找不处在单词的开头或结尾的匹配。</p>
<ul>
<li><code>\n</code> : 查找换行符。返回换行符被找到的位置。如果未找到匹配，则返回-1。</li>
</ul>
<h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><ul>
<li><code>n+</code> : 匹配包含<strong>至少一个</strong><code>n</code>的任何字符串。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'Hellooo World! Hello W3School!'</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(<span class="regexp">/o+/g</span>));  <span class="comment">//输出：ooo,o,o,oo</span></div></pre></td></tr></table></figure>
<ul>
<li><code>n*</code> : 匹配包含<strong>零个</strong>或<strong>多个</strong><code>n</code>的任何字符串。</li>
</ul>
<p><em>例：</em> 对<code>l</code>进行全局搜索，包括其后紧跟的一个或多个<code>o</code>：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'Hellooo World! Hello W3School!'</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(<span class="regexp">/lo*/g</span>));  <span class="comment">//输出：l,looo,l,l,lo,l</span></div></pre></td></tr></table></figure>
<ul>
<li><code>n?</code> : 匹配任何包含<strong>零个</strong>或<strong>一个</strong><code>n</code>的字符串。</li>
</ul>
<p><em>例：</em> 对<code>1</code>进行全局搜索，包括其后紧跟的零个或一个<code>0</code>：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'1,100 or 1000'</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(<span class="regexp">/10?/g</span>));  <span class="comment">//输出：1,10,10</span></div></pre></td></tr></table></figure>
<ul>
<li><code>n{x}</code> : 匹配包含X个<code>n</code>的序列的字符串。</li>
</ul>
<p><em>例：</em> 对包含四位数字序列的子串进行全局搜索：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'100,1000 or 10000'</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(<span class="regexp">/\d&#123;4&#125;/g</span>));  <span class="comment">//输出：1000,1000</span></div></pre></td></tr></table></figure>
<ul>
<li><code>n{x,Y}</code> : 匹配包含X至Y个<code>n</code>的序列的字符串。X和Y必须是数字。</li>
</ul>
<p><em>例：</em> 对包含三位至四位数字序列的子串进行全局搜索：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'100,1000 or 10000'</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(<span class="regexp">/\d&#123;3,4&#125;/g</span>));  <span class="comment">//输出：100,1000,1000</span></div></pre></td></tr></table></figure>
<ul>
<li><code>n{x,}</code> : 匹配包含至少X个<code>n</code>的序列的字符串。</li>
</ul>
<p><em>例：</em> 对包含至少三位数字序列的子串进行全局搜索：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'100,1000 or 10000'</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(<span class="regexp">/\d&#123;3,4&#125;/g</span>));  <span class="comment">//输出：100,1000,1000</span></div></pre></td></tr></table></figure>
<ul>
<li><code>n$</code> : 匹配任何结尾为<code>n</code>的字符串。</li>
</ul>
<p><em>例：</em> 对字符串结尾的 “is” 进行全局搜索：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'Is this his'</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(<span class="regexp">/is$/g</span>));  <span class="comment">//输出：is</span></div></pre></td></tr></table></figure>
<ul>
<li><code>^n</code> : 匹配任何开头为<code>n</code>的字符串。</li>
</ul>
<p><em>例：</em> 对字符串开头的 “is” 进行全局搜索：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'Is this his'</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(<span class="regexp">/^is/g</span>));  <span class="comment">//输出：Is</span></div></pre></td></tr></table></figure>
<ul>
<li><code>?=n</code> : 匹配任何其后紧接指定字符串<code>n</code>的字符串。</li>
</ul>
<p><em>例：</em> 对其后紧跟 “all” 的 “is” 进行全局搜索：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'Is this all there is'</span>;</div><div class="line">patt1 = <span class="regexp">/is(?=all)/</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(patt1));  <span class="comment">//输出：is</span></div></pre></td></tr></table></figure>
<ul>
<li><code>?!n</code> : 匹配其后没有紧接指定字符串<code>n</code>的任何字符串。</li>
</ul>
<p><em>例：</em> 对其后没有紧跟 “all” 的 “is” 进行全局搜索：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'Is this all there is'</span>;</div><div class="line">patt1 = <span class="regexp">/is(?! all)/gi</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(patt1));  <span class="comment">//输出：Is,is</span></div></pre></td></tr></table></figure>
<h3 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h3><ul>
<li><code>^</code> : 匹配输入字符串开始的位置。</li>
<li><code>$</code> : 匹配输入字符串结尾的位置。</li>
</ul>
<h3 id="RegExp对象方法"><a href="#RegExp对象方法" class="headerlink" title="RegExp对象方法"></a>RegExp对象方法</h3><ul>
<li><code>compile</code> : 编译正则表达式。</li>
<li><code>exec</code> : 检索字符串中指定的值。返回找到的值，并确定其位置。</li>
<li><code>test</code> : 检索字符串中指定的值。返回<code>true</code>或<code>false</code>。</li>
</ul>
<h3 id="支持正则表达式的String对象的方法"><a href="#支持正则表达式的String对象的方法" class="headerlink" title="支持正则表达式的String对象的方法"></a>支持正则表达式的String对象的方法</h3><ul>
<li><code>search()</code>用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。</li>
<li><code>match()</code>在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。</li>
<li><code>replace()</code>在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</li>
<li><code>split()</code>把一个字符串分割成字符串数组。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。&lt;/p&gt;
    
    </summary>
    
      <category term="Web前端" scheme="http://yoursite.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="http://yoursite.com/2017/08/03/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://yoursite.com/2017/08/03/二叉树/</id>
    <published>2017-08-03T10:48:00.000Z</published>
    <updated>2017-08-10T09:42:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>二叉树（Binary Tree）是n（n&gt;=0）个结点的有限集合，该集合或者为空集（空二叉树），或者由一个根结点和两棵互不相交的、分别称为根结点的左子树和右子树的二叉树组成。</p>
<a id="more"></a>
<h2 id="二叉树特点"><a href="#二叉树特点" class="headerlink" title="二叉树特点"></a>二叉树特点</h2><p>每个结点最多有两棵子树，所以二叉树中不存在度大于2的结点。二叉树中每一个节点都是一个对象，每一个数据节点都有三个指针，分别是指向父母、左孩子和右孩子的指针。每一个节点都是通过指针相互连接的。相连指针的关系都是父子关系。</p>
<h2 id="二叉树节点的定义"><a href="#二叉树节点的定义" class="headerlink" title="二叉树节点的定义"></a>二叉树节点的定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">struct binaryTreeNode&#123;</div><div class="line">    int m_nValue;</div><div class="line">    binaryTreeNode* m_pLeft;</div><div class="line">    binaryTreeNode* m_pRight;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="五种基本形态"><a href="#五种基本形态" class="headerlink" title="五种基本形态"></a>五种基本形态</h2><ul>
<li>空二叉树</li>
<li>只有一个根节点</li>
<li>根节点只有左子树</li>
<li>根节点只有右子树</li>
<li>根节点既有左子树又有右子树</li>
</ul>
<p><strong>又：</strong> 拥有三个节点的普通树只有两种情况：2层或3层。但由于二叉树要分左右，于是就有了如图5种情况：</p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/binaryTree.png" alt="二叉树节点"></p>
<h2 id="特殊二叉树"><a href="#特殊二叉树" class="headerlink" title="特殊二叉树"></a>特殊二叉树</h2><ol>
<li>斜树</li>
</ol>
<p>上图的第二、三个小树。</p>
<ol>
<li>满二叉树</li>
</ol>
<p>在一棵二叉树中，如果所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树称为满二叉树。</p>
<ol>
<li>完全二叉树</li>
</ol>
<p>完全二叉树是指最后一层左边是满的，右边可能满也可能不满，然后其余层都是满的。一个深度为k，节点个数为 2^k - 1 的二叉树为满二叉树（完全二叉树）。就是一棵树，深度为k，并且没有空位。</p>
<p><strong>特点：</strong></p>
<ul>
<li>叶子结点只能出现在最下两层。</li>
<li>最下层的叶子一定集中在左部连续位置。</li>
<li>倒数第二层，若有叶子结点，一定都在右部连续位置。</li>
<li>如果结点度为1，则该结点只有左孩子。</li>
<li>同样结点树的二叉树，完全二叉树的深度最小。</li>
</ul>
<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><ol>
<li>在二叉树的第i层上至多有2^(i-1)个结点(i&gt;=1)</li>
<li>深度为k的二叉树至多有2^k-1个结点(k&gt;=1)</li>
</ol>
<h2 id="各遍历特性"><a href="#各遍历特性" class="headerlink" title="各遍历特性"></a>各遍历特性</h2><ul>
<li>前序遍历<ol>
<li>访问根节点</li>
<li>前序遍历左子树</li>
<li>前序遍历右子树</li>
</ol>
</li>
<li>中序遍历<ol>
<li>中序遍历左子树</li>
<li>访问根节点</li>
<li>中序遍历右子树</li>
</ol>
</li>
<li>后序遍历<ol>
<li>后序遍历左子树</li>
<li>后序遍历右子树</li>
<li>访问根节点</li>
</ol>
</li>
</ul>
<h3 id="由二叉树得各遍历"><a href="#由二叉树得各遍历" class="headerlink" title="由二叉树得各遍历"></a>由二叉树得各遍历</h3><p><img src="http://ot4r4qnml.bkt.clouddn.com/erchashu1.png" alt="二叉树1"></p>
<p>先序遍历: <code>ABDGCEF</code> ;</p>
<p>中序遍历: <code>DGBAECF</code> ;</p>
<p>后序遍历: <code>GDBEFCA</code> ;</p>
<h3 id="已知前序、中序遍历，求后序遍历"><a href="#已知前序、中序遍历，求后序遍历" class="headerlink" title="已知前序、中序遍历，求后序遍历"></a>已知前序、中序遍历，求后序遍历</h3><blockquote>
<p>例：</p>
<p>前序遍历： GDAFEMHZ</p>
<p>中序遍历： ADEFGHMZ</p>
</blockquote>
<p><strong>解析:</strong></p>
<p>1.根据前序遍历的特点，得到根节点是 <code>G</code> ;</p>
<p>2.观察中序遍历，知：<code>ADEF</code>是根节点的左子树，<code>HMZ</code>是根节点的右子树;</p>
<p>3.接下来，知道左子树的根节点为 <code>D</code> ;</p>
<p>4.同理，<code>A</code> 为 <code>D</code> 的左子树，<code>EF</code> 为右子树</p>
<p>5.右子树的根节点是 <code>M</code> ，依次，画出的结果如图：</p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/%E4%BA%8C%E5%8F%89%E6%A0%912.png" alt="二叉树2"></p>
<p>那么，可以得到后序遍历顺序为：<code>AEFDHZMG</code></p>
<h3 id="已知中序、后序遍历，求前序遍历"><a href="#已知中序、后序遍历，求前序遍历" class="headerlink" title="已知中序、后序遍历，求前序遍历"></a>已知中序、后序遍历，求前序遍历</h3><blockquote>
<p>例：</p>
<p>中序遍历: ADEFGHMZ</p>
<p>后序遍历: AEFDHZMG</p>
</blockquote>
<p><strong>解析：</strong></p>
<p>1.由后序遍历知 <code>G</code> 为根节点,结合中序遍历知 <code>ADEF</code> 为左子树，<code>HMZ</code> 为右子树;</p>
<p>2.再观察后序遍历，知道 <code>D</code> 为左子树根节点， <code>M</code> 为右子树根节点;</p>
<p>3.分析结果如图：</p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/erchashu3.png" alt="二叉树3"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二叉树（Binary Tree）是n（n&amp;gt;=0）个结点的有限集合，该集合或者为空集（空二叉树），或者由一个根结点和两棵互不相交的、分别称为根结点的左子树和右子树的二叉树组成。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>jQuery手册</title>
    <link href="http://yoursite.com/2017/07/28/jQuery%E6%89%8B%E5%86%8C/"/>
    <id>http://yoursite.com/2017/07/28/jQuery手册/</id>
    <published>2017-07-28T15:09:06.000Z</published>
    <updated>2017-09-17T13:38:06.439Z</updated>
    
    <content type="html"><![CDATA[<p>jQuery是一个JavaScript函数库，极大的简化了JavaScript编程。</p>
<a id="more"></a>
<p>jQuery 版本 2 以上不支持 IE6、7、8 浏览器。如果需要支持 IE6/7/8，那么请选择1.9。你还可以通过条件注释在使用 IE6/7/8 时只包含进1.9。</p>
<pre><code>&lt;!--[if lt IE 9]&gt;
&lt;script src=&quot;jquery-1.9.0.js&quot;&gt;&lt;/script&gt;
&lt;![endif]--&gt;
&lt;!--[if gte IE 9]&gt;&lt;!--&gt;
&lt;script src=&quot;jquery-2.0.0.js&quot;&gt;&lt;/script&gt;
&lt;!--&lt;![endif]--&gt;
</code></pre><p><strong>添加jQuery：</strong> </p>
<ul>
<li>官网下载 </li>
<li>可以直接从百度CDN中引用jQuery：<code>src=&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</code></li>
</ul>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>文档就绪事件：</p>
<pre><code>$(document).ready(function(){
//代码部分
});
</code></pre><p>这是为了防止文档在完全加载之前运行jquery代码。</p>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><table>
<thead>
<tr>
<th style="text-align:center">语法</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">$(“p”)</td>
<td style="text-align:center">元素选择器</td>
</tr>
<tr>
<td style="text-align:center">$(“#id”)</td>
<td style="text-align:center">id选择器</td>
</tr>
<tr>
<td style="text-align:center">$(“.class”)</td>
<td style="text-align:center">class选择器</td>
</tr>
</tbody>
</table>
<p> <img src="http://otqcthsfv.bkt.clouddn.com/selector.PNG" alt="selector"></p>
<h3 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h3><p> <img src="http://otqcthsfv.bkt.clouddn.com/selector1.png" alt="selector1"></p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="什么是事件？"><a href="#什么是事件？" class="headerlink" title="什么是事件？"></a>什么是事件？</h3><p>页面对不同访问者的响应叫做事件。</p>
<h3 id="常用事件方法"><a href="#常用事件方法" class="headerlink" title="常用事件方法"></a>常用事件方法</h3><h5 id="1-document-ready"><a href="#1-document-ready" class="headerlink" title="1.$(document).ready()"></a>1.$(document).ready()</h5><h5 id="2-click-amp-dblclick"><a href="#2-click-amp-dblclick" class="headerlink" title="2.click() &amp; dblclick()"></a>2.click() &amp; dblclick()</h5><h5 id="3-bind"><a href="#3-bind" class="headerlink" title="3.bind()"></a>3.bind()</h5><p>将事件和函数绑定到元素上。为被选元素添加一个或多个事件处理程序，并规定事件发生时运行的函数。</p>
<pre><code>$(&quot;button&quot;).bind(&quot;click&quot;,function(){
    $(&quot;p&quot;).show();
});
</code></pre><h5 id="4-on-amp-off"><a href="#4-on-amp-off" class="headerlink" title="4.on() &amp; off()"></a>4.on() &amp; off()</h5><p>在被选元素及子元素上添加一个或多个事件处理程序。使用on()方法添加的事件处理程序适用于<em>当前及未来的元素</em>（比如由脚本创建的新元素）。</p>
<pre><code>$(&quot;p&quot;).on(&quot;click&quot;,function(){
    alert(&quot;The paragraph was clicked.&quot;);
});
</code></pre><p>提示：如需移除事件处理程序，使用off()方法</p>
<pre><code>$(&quot;button&quot;).click(function(){
    $(&quot;p&quot;).off(&quot;click&quot;);
});
</code></pre><p>向元素添加多个事件处理程序：</p>
<pre><code>$(&quot;p&quot;).on({
    mouseover:function(){$(&quot;body&quot;).css(&quot;background-color&quot;,&quot;lightgray&quot;);},
    mouseout:function(){$(&quot;body&quot;).css(&quot;background-color&quot;,&quot;lightblue&quot;);},
    click:function(){$(&quot;body&quot;).css(&quot;background-color&quot;,&quot;yellow&quot;);}
});
</code></pre><h5 id="5-toggle"><a href="#5-toggle" class="headerlink" title="5.toggle()"></a>5.toggle()</h5><p>用于绑定两个或多个事件处理器函数，以响应被选元素的轮流的click事件。</p>
<pre><code>&lt;button&gt;请点击这里，来切换不同的背景颜色&lt;/button&gt;

$(document).ready(function(){
    $(&quot;button&quot;).toggle(function(){
        $(&quot;body&quot;).css(&quot;background&quot;,&quot;green&quot;);}
        ,function(){
        $(&quot;body&quot;).css(&quot;background-color&quot;,&quot;red&quot;);}
        ,function(){
        $(&quot;body&quot;).css(&quot;background-color&quot;,&quot;yellow&quot;);}
    );
});
</code></pre><h5 id="6-mousedown-amp-mouseup"><a href="#6-mousedown-amp-mouseup" class="headerlink" title="6.mousedown() &amp; mouseup()"></a>6.mousedown() &amp; mouseup()</h5><p>当鼠标指针移动到元素上方，并按下鼠标按键时，会发生mousedown事件:</p>
<pre><code>$(&quot;button&quot;).mousedown(function(){
    $(&quot;p&quot;).slideToggle();
});
</code></pre><p>当在元素上松开鼠标按钮时，会发生mouseup事件</p>
<h5 id="7-focus-amp-blur"><a href="#7-focus-amp-blur" class="headerlink" title="7.focus() &amp; blur()"></a>7.focus() &amp; blur()</h5><p>当元素获得焦点时，发生focus事件;当元素失去焦点时发生blur事件:</p>
<pre><code>&lt;input type=&quot;text&quot; /&gt;

$(&quot;input&quot;).focus(function(){
    $(&quot;input&quot;).css(&quot;background-color&quot;,&quot;#FFFFCC&quot;);
});
$(&quot;input&quot;).blur(function(){
    $(&quot;input&quot;).css(&quot;background-color&quot;,&quot;#D6D6FF&quot;);
});
</code></pre><h5 id="8-hover"><a href="#8-hover" class="headerlink" title="8.hover()"></a>8.hover()</h5><p>光标悬停事件:</p>
<pre><code>$(&quot;p&quot;).hover(function(){
    $(&quot;p&quot;).css(&quot;background-color&quot;,&quot;yellow&quot;);
    },function(){
    $(&quot;p&quot;).css(&quot;background-color&quot;,&quot;pink&quot;);
});
</code></pre><h5 id="9-1-event-target"><a href="#9-1-event-target" class="headerlink" title="9.1. event.target"></a>9.1. event.target</h5><p>target属性规定哪个DOM元素触发了该事件:</p>
<pre><code>&lt;h1&gt;这是一个标题&lt;/h1&gt;
&lt;h2&gt;这是另一个标题&lt;/h2&gt;
&lt;p&gt;这是一个段落&lt;/p&gt;
&lt;div&gt;&lt;/div&gt;

$(&quot;p,h1,h2&quot;).click(function(event){
    $(&quot;div&quot;).html(&quot;点击事件由一个 &quot; + event.target.nodeName + &quot; 元素触发&quot;);
  });
</code></pre><h5 id="9-2-event-pageX-amp-event-pageY"><a href="#9-2-event-pageX-amp-event-pageY" class="headerlink" title="9.2. event.pageX &amp; event.pageY"></a>9.2. event.pageX &amp; event.pageY</h5><p>pageX()属性是鼠标指针的位置，相对于文档的左边缘;pageY()属性是鼠标指针的位置，相对于文档的上边缘:</p>
<pre><code>&lt;p&gt;鼠标指针位于：&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

$(document).mousemove(function(e){
    $(&quot;span&quot;).text(&quot;X:&quot; + e.pageX + &quot;,Y:&quot; + e.pageY);
})
</code></pre><h5 id="10-trigger"><a href="#10-trigger" class="headerlink" title="10.trigger()"></a>10.trigger()</h5><p>触发被选元素的指定事件类型:</p>
<pre><code>&lt;input type=&quot;text&quot; name=&quot;FirstName&quot; value=&quot;Hello World&quot; /&gt; &lt;br/&gt;
&lt;button&gt;激活input域的select事件&lt;/button&gt;

$(&quot;input&quot;).select(function(){
    $(&quot;input&quot;).after(&quot;文本被选中！&quot;);
  });
  $(&quot;button&quot;).click(function(){
    $(&quot;input&quot;).trigger(&quot;select&quot;);
  });
</code></pre><p>使用Event对象来触发事件：</p>
<pre><code>$(&quot;input&quot;).select(function(){
    $(&quot;input&quot;).after(&quot;文本被选中！&quot;);
});
var e = jQuery.Event(&quot;select&quot;);
$(&quot;button&quot;).click(function(){
    $(&quot;input&quot;).trigger(e);
});
</code></pre><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><ul>
<li>animate()</li>
</ul>
<p>语法：<code>animate(styles,speed,easing,callback);</code></p>
<pre><code>$(&quot;button&quot;).click(function(){
    $(&quot;div&quot;).animate({left:&apos;250px&apos;});
});
</code></pre><p>参数<code>styles</code>中的css样式值 见：<a href="http://www.w3school.com.cn/jquery/effect_animate.asp" target="_blank" rel="external">链接</a></p>
<p>注释：使用 “+=” 或 “-=” 来创建相对动画(relative animations)</p>
<h3 id="隐藏-显示"><a href="#隐藏-显示" class="headerlink" title="隐藏/显示"></a>隐藏/显示</h3><ul>
<li>hide(speed,callback);</li>
<li>show(speed,callback);</li>
<li>toggle(speed,callback);</li>
</ul>
<p><code>speed</code>参数可以取值：<code>slow</code>,<code>fast</code>,<code>normal</code>,毫秒;<code>callback</code>参数是隐藏或显示完成后所执行的函数名称。</p>
<pre><code>&lt;p&gt;This is a paragraph.&lt;/p&gt;
&lt;button class=&quot;btn1&quot;&gt;Toggle&lt;/button&gt;

$(&quot;.btn1&quot;).click(function(){
    $(&quot;p&quot;).toggle();
});
</code></pre><h3 id="淡入淡出"><a href="#淡入淡出" class="headerlink" title="淡入淡出"></a>淡入淡出</h3><ul>
<li>fadeIn(speed,callback);</li>
<li>fadeOut(speed,callback);</li>
<li>fadeToggle(speed,callback);</li>
<li>fadeTo(speed,opacity,callback);</li>
</ul>
<p><code>speed</code>参数可以取值：<code>slow</code>,<code>fast</code>,<code>normal</code>,毫秒;<code>opacity</code>必需，规定淡入或淡出的透明度，介于0.00与1.00;<code>callback</code>参数是隐藏或显示完成后所执行的函数名称。</p>
<pre><code>$(&quot;.btn1&quot;).click(function(){
  $(&quot;p&quot;).fadeTo(1000,0.4);
});
</code></pre><h3 id="滑动"><a href="#滑动" class="headerlink" title="滑动"></a>滑动</h3><ul>
<li>slideDown(speed,callback);</li>
<li>slideUp(speed,callback);</li>
<li>slideToggle(speed,callback);</li>
</ul>
<p><code>speed</code>参数可以取值：<code>slow</code>,<code>fast</code>,<code>normal</code>,毫秒;<code>callback</code>参数是隐藏或显示完成后所执行的函数名称。</p>
<pre><code>$(&quot;.btn1&quot;).click(function(){
    $(&quot;p&quot;).slideToggle();
});
</code></pre><h3 id="stop"><a href="#stop" class="headerlink" title="stop()"></a>stop()</h3><p>停止当前正在运行的动画:</p>
<pre><code>$(&quot;#stop&quot;).click(function(){
    $(&quot;#box&quot;).stop();
});
</code></pre><h3 id="链-Chaining"><a href="#链-Chaining" class="headerlink" title="链(Chaining)"></a>链(Chaining)</h3><pre><code>$(&quot;#p1&quot;).css(&quot;color&quot;,&quot;red&quot;).slideUp(2000).slideDown(2000);
</code></pre><h2 id="jQuery-HTML"><a href="#jQuery-HTML" class="headerlink" title="jQuery HTML"></a>jQuery HTML</h2><h3 id="获得内容-–-text-、html-、val"><a href="#获得内容-–-text-、html-、val" class="headerlink" title="获得内容 – text()、html()、val()"></a>获得内容 – text()、html()、val()</h3><pre><code>&lt;p&gt;名称: &lt;input type=&quot;text&quot; id=&quot;test&quot; value=&quot;菜鸟教程&quot;&gt;&lt;/p&gt;
&lt;button&gt;显示值&lt;/button&gt;

$(document).ready(function(){
$(&quot;button&quot;).click(function(){
    alert(&quot;值为: &quot; + $(&quot;#test&quot;).val());
    });
});
</code></pre><ul>
<li>text() -  设置或返回所选元素的文本内容</li>
<li>html() -  设置或返回所选元素的内容（包括 HTML 标记）</li>
<li>val() - 设置或返回表单字段的值</li>
</ul>
<h3 id="设置或返回属性-–-attr"><a href="#设置或返回属性-–-attr" class="headerlink" title="设置或返回属性 – attr()"></a>设置或返回属性 – attr()</h3><p>1.返回属性：</p>
<pre><code>&lt;p&gt;&lt;a href=&quot;http://www.runoob.com&quot; id=&quot;runoob&quot;&gt;菜鸟教程&lt;/a&gt;&lt;/p&gt;
&lt;button&gt;显示 href 属性的值&lt;/button&gt;

$(document).ready(function(){
    $(&quot;button&quot;).click(function(){
        alert($(&quot;#runoob&quot;).attr(&quot;href&quot;));
     });
});
</code></pre><p>2.设置属性：</p>
<pre><code>$(&quot;button&quot;).click(function(){
    $(&quot;img&quot;).attr(&quot;width&quot;,&quot;180&quot;);
});
</code></pre><p>3.设置多个属性：</p>
<pre><code>$(&quot;img&quot;).attr({width:&quot;50&quot;,height:&quot;80&quot;});
</code></pre><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><h5 id="append-amp-prepend"><a href="#append-amp-prepend" class="headerlink" title="append() &amp; prepend()"></a>append() &amp; prepend()</h5><p><code>append</code>是在被选元素的结尾(仍然在内部)插入内容;<code>prepend</code>是在被选元素的开头(仍然在内部)插入内容</p>
<pre><code>$(&quot;p&quot;).append(&quot; &lt;b&gt;Hello world!&lt;/b&gt;&quot;);
</code></pre><h5 id="after-amp-before"><a href="#after-amp-before" class="headerlink" title="after() &amp; before()"></a>after() &amp; before()</h5><p><code>after</code>在被选元素的之后插入内容;<code>before</code>在被选元素之前插入内容</p>
<pre><code>$(&quot;p&quot;).before(&quot;&lt;p&gt;Hello world!&lt;/p&gt;&quot;);
</code></pre><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><h5 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h5><p>删除被选元素及其子元素,该方法不会把匹配的元素从jQuery对象中删除，因而可以在将来再使用这些匹配的元素。</p>
<h5 id="empty"><a href="#empty" class="headerlink" title="empty()"></a>empty()</h5><p>从被选元素移除所有内容，包括所有文本和子节点:</p>
<pre><code>&lt;div id=&quot;div1&quot; style=&quot;height:100px;width:300px;border:1px solid black;background-color:yellow;&quot;&gt;这是 div 中的一些文本。
&lt;p&gt;这是在div中的一个段落。&lt;/p&gt;
&lt;p&gt;这是在div中的另外一个段落。&lt;/p&gt;
&lt;/div&gt;
&lt;button&gt;清空div元素&lt;/button&gt;

$(document).ready(function(){
    $(&quot;button&quot;).click(function(){
        $(&quot;#div1&quot;).empty();
    });
});
</code></pre><h3 id="clone"><a href="#clone" class="headerlink" title="clone()"></a>clone()</h3><p>生成被选元素的副本，包含子节点、文本和属性:</p>
<pre><code>&lt;p&gt;This is a paragraph.&lt;/p&gt;
&lt;button&gt;复制每个 p 元素，然后追加到 body 元素&lt;/button&gt;

$(&quot;button&quot;).click(function(){
    $(&quot;body&quot;).append($(&quot;p&quot;).clone());
});
</code></pre><h3 id="addClass-amp-removeClass-amp-toggleClass"><a href="#addClass-amp-removeClass-amp-toggleClass" class="headerlink" title="addClass() &amp; removeClass() &amp; toggleClass()"></a>addClass() &amp; removeClass() &amp; toggleClass()</h3><pre><code>&lt;div class=&quot;div1&quot;&gt;这是一些文本。&lt;/div&gt;
&lt;button&gt;为第一个div元素添加类&lt;/button&gt;

.blue{ color:blue; }
$(document).ready(function(){
    $(&quot;button&quot;).click(function(){
        $(&quot;#div1&quot;).addClass(&quot;blue&quot;);
    });
});
</code></pre><h3 id="CSS-方法"><a href="#CSS-方法" class="headerlink" title="CSS()方法"></a>CSS()方法</h3><p>设置css属性：</p>
<pre><code>$(&quot;p&quot;).css(&quot;background-color&quot;,&quot;yellow&quot;);
$(&quot;p&quot;).css(&quot;background-color&quot;,&quot;yellow&quot;,&quot;font-size&quot;,&quot;200%&quot;);
</code></pre><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><h3 id="祖先-向上遍历"><a href="#祖先-向上遍历" class="headerlink" title="祖先 (向上遍历)"></a>祖先 (向上遍历)</h3><p>1.parent() 返回被选元素的直接父元素，只会向上一级对DOM树进行遍历。</p>
<p>2.parsents() 从父元素开始，返回被选元素的所有祖先元素，它一路向上直到文档的根元素 (<html>)。返回包含零个、一个元素或多个元素的jquery对象。</html></p>
<p>3.closest() 从当前元素开始，获得匹配选择器的第一个祖先元素，从当前元素开始沿DOM树向上。返回包含零个或一个元素的jquery对象。（和.parents有点相似）</p>
<pre><code>$(&apos;li.item-a&apos;).closest(&apos;ul&apos;).css(&apos;background-color&apos;, &apos;red&apos;); //整个ul中的li元素颜色都会变红
</code></pre><p>4.parsentsUntil() 返回介于两个给定元素之间的所有祖先元素。</p>
<h3 id="后代-向下遍历"><a href="#后代-向下遍历" class="headerlink" title="后代 (向下遍历)"></a>后代 (向下遍历)</h3><p>1.children() 返回被选元素的所有直接子元素，该方法只会向<strong>下一级</strong>对DOM树进行遍历。</p>
<pre><code>$(&quot;div&quot;).children(&quot;.selected&quot;).css(&quot;color&quot;,&quot;blue&quot;);
</code></pre><p>2.find() 返回被选元素的后代元素，一路向下直到最后一个后代。</p>
<pre><code>`$(&apos;li.item-ii&apos;).find(&apos;li&apos;).css(&apos;background-color&apos;,&apos;red&apos;);`
</code></pre><p>也可以使用给定的jquery集合或元素来进行筛选：</p>
<pre><code>var $allListElements = $(&apos;li&apos;);
$(&apos;li.item-ii&apos;).find($allListElements).css(&apos;background-color&apos;,&apos;red&apos;);
</code></pre><p>3.contents() 获得匹配元素集合中每个元素的子节点，包括文本和注释节点。</p>
<pre><code>&lt;p&gt;Hello&lt;a href=&quot;#&quot;&gt;Apple&lt;/a&gt;,how are you doing?&lt;/p&gt;

&lt;script&gt;
    $(&quot;p&quot;).contents().filter(function(){ return this.nodeType != 1; }).wrap(&quot;&lt;b/&gt;&quot;);
&lt;/script&gt;
</code></pre><h3 id="同胞-水平遍历"><a href="#同胞-水平遍历" class="headerlink" title="同胞 (水平遍历)"></a>同胞 (水平遍历)</h3><p>1.siblings() 返回被选元素的所有同胞元素:</p>
<pre><code>$(&quot;p&quot;).siblings(&quot;.selected&quot;).css(&quot;background&quot;, &quot;yellow&quot;); //查找每个 p 元素的所有类名为 &quot;selected&quot; 的所有同胞元素：
</code></pre><p>2.next() 返回被选元素的下一个同胞元素</p>
<h3 id="过滤-缩小搜索元素的范围"><a href="#过滤-缩小搜索元素的范围" class="headerlink" title="过滤 (缩小搜索元素的范围)"></a>过滤 (缩小搜索元素的范围)</h3><p>1.first() 返回被选元素的首个元素。</p>
<p>2.last() 返回被选元素的最后一个元素。</p>
<p>3.eq() 返回被选元素中带有指定索引号的元素。</p>
<pre><code>.blue{ background-color:blue; }

$(&quot;body&quot;).find(&quot;div&quot;).eq(2).addClass(&quot;blue&quot;);
</code></pre><p>如果提供负数，则指示从集合结尾开始的位置，而不是从开头开始。</p>
<p>4.filter() 允许您规定一个标准。不匹配这个标准的元素会被从集合中删除，匹配的元素会被返回。</p>
<pre><code>&lt;div&gt;&lt;/div&gt;
&lt;div class=&quot;middle&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;middle&quot;&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;

&lt;script&gt;
  $(&quot;div&quot;).css(&quot;background&quot;, &quot;#c8ebcc&quot;)
    .filter(&quot;.middle&quot;)
    .css(&quot;border-color&quot;, &quot;red&quot;);
&lt;/script&gt;
</code></pre><p><img src="http://otqcthsfv.bkt.clouddn.com/filter.png" alt="filter"></p>
<p>5.not() 和filter()方法相反。</p>
<h3 id="others"><a href="#others" class="headerlink" title="others"></a>others</h3><p>1.add() 将元素添加到匹配元素的集合中:</p>
<pre><code>$(&quot;div&quot;).css(&quot;border&quot;, &quot;2px solid red&quot;)
    .add(&quot;p&quot;)
    .css(&quot;background&quot;, &quot;yellow&quot;);
</code></pre><p>2.each() 对jQuery对象进行迭代，为每个匹配元素执行函数。</p>
<pre><code>$(&quot;button).click(function(){
    $(&quot;li&quot;).each(function(){
        alert($(this).text())        
    });
});
</code></pre><p>3.end() 结束当前链条中的最近的筛选操作，并将匹配元素集还原为之前的状态。</p>
<pre><code>&lt;ul class=&quot;first&quot;&gt;
   &lt;li class=&quot;foo&quot;&gt;list item 1&lt;/li&gt;
   &lt;li&gt;list item 2&lt;/li&gt;
   &lt;li class=&quot;bar&quot;&gt;list item 3&lt;/li&gt;
&lt;/ul&gt;

$(&apos;ul.first&apos;).find(&apos;.foo&apos;).css(&apos;background-color&apos;, &apos;red&apos;)
  .end().find(&apos;.bar&apos;).css(&apos;background-color&apos;, &apos;green&apos;);
</code></pre><p><strong>说明</strong>: 这条命令链检索第一个列表中类名为foo的项目，并把它们的背景设置为红色。end()会将对象还原为调用find()之前的状态，所以第二个find()查找的是<code>&lt;ul class=&quot;first&quot;&gt;</code>内的<code>.bar&#39;</code>，而不是在列表的<code>&lt;li class=&quot;foo&quot;&gt;</code>中查找，并将匹配元素的背景设置为绿色。最后的结果是第一个列表中的项目1和项目3被设置了带颜色的背景，而第二个列表中的项目没有任何变化。</p>
<h2 id="DOM元素方法"><a href="#DOM元素方法" class="headerlink" title="DOM元素方法"></a>DOM元素方法</h2><h3 id="index"><a href="#index" class="headerlink" title="index()"></a>index()</h3><p>返回指定元素相对于其他指定元素的index位置：</p>
<pre><code>&lt;ul&gt;
    &lt;li&gt;Coffee&lt;/li&gt;
    &lt;li&gt;Milk&lt;/li&gt;
    &lt;li&gt;Soda&lt;/li&gt;
&lt;/ul&gt;

$(&quot;li&quot;).click(function(){
    alert($(this).index());
});
</code></pre><h3 id="toArray"><a href="#toArray" class="headerlink" title="toArray()"></a>toArray()</h3><p>以数组的形式返回jQuery选择器匹配的元素:</p>
<pre><code>x = $(&quot;li&quot;).toArray()
  for(i=0;i&lt;x.length;i++){
    alert(x[i].innerHTML);
  }
</code></pre><h3 id="size"><a href="#size" class="headerlink" title="size()"></a>size()</h3><p>返回被jQuery选择器匹配的元素的数量:</p>
<pre><code>$(document).ready(function(){
    alert($(&quot;li&quot;).size());
});  //输出结果：3
</code></pre><h3 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h3><p>获得由选择器指定的DOM元素:</p>
<pre><code>&lt;p&gt;This is a paragraph&lt;/p&gt;
&lt;button&gt;获得p DOM元素&lt;/button&gt;
&lt;div&gt;&lt;/div&gt;

$(&quot;button&quot;).click(function(){
    x = $(&quot;p&quot;).get(0);
    $(&quot;div&quot;).text(x.nodeName + &quot;: &quot; + x.innerHTML);
});  //输出结果：P: This is a paragraph
</code></pre><h2 id="AJAX！！"><a href="#AJAX！！" class="headerlink" title="AJAX！！"></a>AJAX！！</h2><p>AJAX 是与服务器交换数据的技术，通过后台加载数据，它在不重载全部页面的情况下，实现了对部分网页的更新。</p>
<h3 id="什么是AJAX"><a href="#什么是AJAX" class="headerlink" title="什么是AJAX?"></a>什么是AJAX?</h3><p>AJAX = 异步JavaScript和XML (Asynchronous JavaScript and XML)</p>
<h3 id="AJAX-load-方法"><a href="#AJAX-load-方法" class="headerlink" title="AJAX load()方法"></a>AJAX load()方法</h3><p>语法：<code>$(selector).load(URL,data,callback);</code></p>
<pre><code>&lt;div id=&quot;div1&quot;&gt;使用jquery AJAX修改文本内容&lt;/div&gt;
&lt;button&gt;获取外部内容&lt;/button&gt;

$(document).ready(function(){
    $(&quot;button&quot;).click(function(){
        $(&quot;#div1&quot;).load(&quot;/try/ajax/demo_test.txt&quot;);
    });  //此处的url是我引用过来的
});
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jQuery是一个JavaScript函数库，极大的简化了JavaScript编程。&lt;/p&gt;
    
    </summary>
    
      <category term="Web前端" scheme="http://yoursite.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>使用HBuilder</title>
    <link href="http://yoursite.com/2017/07/26/%E4%BD%BF%E7%94%A8HBuilder/"/>
    <id>http://yoursite.com/2017/07/26/使用HBuilder/</id>
    <published>2017-07-25T16:03:21.000Z</published>
    <updated>2017-09-17T14:04:45.823Z</updated>
    
    <content type="html"><![CDATA[<p>HBuilder下载地址：<a href="http://www.dcloud.io/" target="_blank" rel="external">HBuilder官网</a></p>
<a id="more"></a>
<p>HBuilder是DCloud（数字天堂）推出的一款支持HTML5的Web开发IDE。HBuilder的编写用到了Java、C、Web和Ruby。HBuilder本身主体是由Java编写，它基于Eclipse，所以顺其自然地兼容了Eclipse的插件。</p>
<h2 id="HBuilder设置外部web服务器测试移动Web"><a href="#HBuilder设置外部web服务器测试移动Web" class="headerlink" title="HBuilder设置外部web服务器测试移动Web"></a>HBuilder设置外部web服务器测试移动Web</h2><h3 id="1-打开开发工具"><a href="#1-打开开发工具" class="headerlink" title="1.打开开发工具"></a>1.打开开发工具</h3><ol>
<li><p>工具右上角更改开发视图模式为“<strong>边改边看模式</strong>” </p>
</li>
<li><p>打开设置web服务器</p>
</li>
</ol>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/web%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="web服务器"></p>
<h3 id="2-设置外置服务器"><a href="#2-设置外置服务器" class="headerlink" title="2.设置外置服务器"></a>2.设置外置服务器</h3><ol>
<li><p>选择“外置Web服务器” ☞ 右边“新建”</p>
</li>
<li><p>编辑服务配置界面，“名称”随意，“浏览器运行URL”填写本机ip地址</p>
</li>
</ol>
<h3 id="3-查看IP地址并配置web服务器"><a href="#3-查看IP地址并配置web服务器" class="headerlink" title="3.查看IP地址并配置web服务器"></a>3.查看IP地址并配置web服务器</h3><p>1.地址查看方式：在命令行中输入<code>ipconfig</code>，找到<code>IPv4</code>的地址</p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/ipconfig.png" alt="ipconfig"></p>
<p>2.填写在URL中，如图所示（要在IP地址后面加上HBuilder使用的<strong>端口8020</strong>）：</p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="web服务器配置"></p>
<p>3.使用新建的myWeb外部服务器</p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="使用服务器"></p>
<h3 id="4-扫码测试"><a href="#4-扫码测试" class="headerlink" title="4.扫码测试"></a>4.扫码测试</h3><p>在“web浏览器”网址右边有一个<strong>二维码</strong>标志，点击，使用手机扫描测试</p>
<p><strong><em>注意：</em></strong> 扫码测试需要电脑和手机在同一个局域网下！！！</p>
<p>电脑运行：</p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/%E8%BF%90%E8%A1%8C1.png" alt="电脑运行结果"></p>
<p>手机扫码运行：</p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/%E6%89%8B%E6%9C%BA%E8%BF%90%E8%A1%8C.png" alt="手机运行结果"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HBuilder下载地址：&lt;a href=&quot;http://www.dcloud.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HBuilder官网&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>学习Sass</title>
    <link href="http://yoursite.com/2017/07/25/%E5%AD%A6%E4%B9%A0Sass/"/>
    <id>http://yoursite.com/2017/07/25/学习Sass/</id>
    <published>2017-07-25T13:03:33.000Z</published>
    <updated>2017-09-17T13:37:28.213Z</updated>
    
    <content type="html"><![CDATA[<p>CSS 预处理器的主要目标：提供 CSS 缺失的样式层复用机制、减少冗余代码，提高样式代码的可维护性。这不是锦上添花，而恰恰是雪中送炭。</p>
<a id="more"></a>
<p>目前主流的三个<strong>预处理器</strong>：</p>
<ul>
<li>Less</li>
<li>Sass</li>
<li>Stylus</li>
</ul>
<h1 id="安装Sass"><a href="#安装Sass" class="headerlink" title="安装Sass"></a>安装Sass</h1><p><a href="http://rubyinstaller.org/downloads" target="_blank" rel="external">Ruby下载链接http://rubyinstaller.org/downloads</a></p>
<p>安装过程中请注意勾选 <code>Add Ruby executables to your PATH</code></p>
<p>安装完成后运行cmd输入<code>ruby -v</code>测试有没有安装成功。</p>
<p>若安装成功，使用<code>Ruby</code>自带的<code>RubyGems</code>系统安装Sass和Compass</p>
<pre><code>gem install sass
gem install compass
</code></pre><p>这样就安装好了！</p>
<p>如下sass常用更新、查看版本、sass命令帮助等命令：</p>
<pre><code>gem update sass
sass -v
sass -h
</code></pre><h1 id="编译Sass"><a href="#编译Sass" class="headerlink" title="编译Sass"></a>编译Sass</h1><p>Sass编译有很多种方式，如命令行编译模式、sublime插件<code>SASS-Build</code> 、编译软件<code>koala</code> 、前端自动化软件<code>codekit</code> 、Grunt打造前端自动化工作流<code>grunt-sass</code> 、Gulp打造前端自动化工作流<code>gulp-ruby-sass</code>等。</p>
<h2 id="命令行编译："><a href="#命令行编译：" class="headerlink" title="命令行编译："></a>命令行编译：</h2><pre><code>//单文件转换命令
sass input.scss output.css
//单文件监听命令
sass --watch input.scss:output.css
//如果你有很多的sass文件的目录，你也可以告诉sass监听整个目录：
sass --watch app/sass:public/stylesheets
</code></pre><h2 id="四种编译排版"><a href="#四种编译排版" class="headerlink" title="四种编译排版"></a>四种编译排版</h2><pre><code>//未编译样式
.box {
    width: 300px;
    height: 400px;
    &amp;-title {
        height: 30px;
        line-height: 30px;
    }
}
</code></pre><h3 id="nested-编译排版格式："><a href="#nested-编译排版格式：" class="headerlink" title="nested 编译排版格式："></a>nested 编译排版格式：</h3><pre><code>/*命令行内容*/
sass style.scss:style.css --style nested

/*编译过后样式*/
.box {
    width: 300px;
    height: 400px; }
    .box-title {
        height: 30px;
        line-height: 30px; }
</code></pre><h3 id="expanded-编译排版格式"><a href="#expanded-编译排版格式" class="headerlink" title="expanded 编译排版格式"></a>expanded 编译排版格式</h3><pre><code>/*命令行内容*/
sass style.scss:style.css --style expanded

/*编译过后样式*/
.box {
    width: 300px;
    height: 400px;
}   
.box-title {
    height: 30px;
    line-height: 30px;
}
</code></pre><h3 id="compact-编译排版格式"><a href="#compact-编译排版格式" class="headerlink" title="compact 编译排版格式"></a>compact 编译排版格式</h3><pre><code>/*命令行内容*/
sass style.scss:style.css --style compact

/*编译过后样式*/
.box { width: 300px; height: 400px; }
.box-title { height: 30px; line-height: 30px; }
</code></pre><h3 id="compressed-编译排版格式"><a href="#compressed-编译排版格式" class="headerlink" title="compressed 编译排版格式"></a>compressed 编译排版格式</h3><pre><code>/*命令行内容*/
sass style.scss:style.css --style compressed

/*编译过后样式*/
.box{width:300px;height:400px}.box-title{height:30px;line-height:30px}
</code></pre><h1 id="在webstrom中使用sass"><a href="#在webstrom中使用sass" class="headerlink" title="在webstrom中使用sass"></a>在webstrom中使用sass</h1><p>file ☛ settings  ☞ Tools  ☞ File Watchers  双击配置Sass</p>
<h1 id="嵌套CSS规则"><a href="#嵌套CSS规则" class="headerlink" title="嵌套CSS规则"></a>嵌套CSS规则</h1><p>sass文件:</p>
<pre><code>#content {
    article {
        h1 { color: #333 }
        p { margin-bottom: 1.4em }
    }
    aside { background-color: #EEE }
}
</code></pre><p>编译成css后：</p>
<pre><code>#content article h1 { color: #333 }
#content article p { margin-bottom: 1.4em }
#content aside { background-color: #EEE }
</code></pre><h2 id="父选择器的标识符-amp"><a href="#父选择器的标识符-amp" class="headerlink" title="父选择器的标识符&amp;"></a>父选择器的标识符&amp;</h2><pre><code>article a {
    color: blue;
    &amp;:hover { color: red }
}
</code></pre><p>当包含父选择器标识符的嵌套规则被打开时，他不会像后代选择器那样进行拼接，而是 &amp; 被父选择器直接替换：</p>
<pre><code>article a { color: blue; }
article a:hover { color: red }
</code></pre><h2 id="子组合选择器和同层组合选择器：-gt-、-和"><a href="#子组合选择器和同层组合选择器：-gt-、-和" class="headerlink" title="子组合选择器和同层组合选择器： &gt; 、 + 和 ~"></a>子组合选择器和同层组合选择器： &gt; 、 + 和 ~</h2><pre><code>article section { margin: 5px }
article &gt; section { border: 1px solid #ccc }
</code></pre><p>第一个选择器会选择article下的<strong>所有</strong>命中section选择器的元素。第二个选择器只会选择article下<strong>紧跟着的子元素</strong>中命中section选择器的元素。</p>
<pre><code>header + p { font-size: 1.1em }
</code></pre><p>在上例中，你可以用<strong>同层相邻组合选择器</strong> + 选择header元素后紧跟的p元素。</p>
<pre><code>article ~ article { border-top: 1px dashed #ccc }
</code></pre><p>你也可以用<strong>同层全体组合选择器</strong> ~ ，选择所有跟在article后的同层article元素，不管它们之间隔了多少其他元素。</p>
<p>例子：</p>
<pre><code>article {
    ~ article { border-top: 1px dashed #ccc }
    &gt; section { background: #eee }
    dl &gt; {
    dt { color: #333 }
    dd { color: #555 }
    }
    nav + &amp; { margin-top: 0 }
}    
</code></pre><p>sass解开组合之后：</p>
<pre><code>article ~ article { border-top: 1px dashed #ccc }
article &gt; footer { background: #eee }
article dl &gt; dt { color: #333 }
article dl &gt; dd { color: #555 }
nav + article { margin-top: 0 }
</code></pre><h2 id="嵌套属性"><a href="#嵌套属性" class="headerlink" title="嵌套属性"></a>嵌套属性</h2><p>重复编写<code>border-style</code>  <code>border-width</code>  <code>border-color</code>等非常烦人，所以在sass中，只要像以下这样书写就行：</p>
<pre><code>nav{
    border: {
    style: solid;
    width: 1px;
    color: #ccc;
    }
}
</code></pre><p><strong><em>规则：</em></strong> 把属性名从中划线-的地方断开，在根属性后边添加一个冒号:，紧跟一个{ }块，把子属性部分写在这个{ }块中。</p>
<p><strong><em>优点：</em></strong> 属性和选择器嵌套是非常伟大的特性，因为它们不仅大大减少了你的编写量，而且通过视觉上的缩进使你编写的样式结构更加清晰，更易于阅读和开发。</p>
<h1 id="导入Sass文件"><a href="#导入Sass文件" class="headerlink" title="导入Sass文件"></a>导入Sass文件</h1><p>随着你的样式表越来越多，我们要把大量样式分拆到多个文件中，使用 <strong>@import</strong> 规则。</p>
<h2 id="使用sass部分文件"><a href="#使用sass部分文件" class="headerlink" title="使用sass部分文件"></a>使用sass部分文件</h2><p>举例来说，你想导入 <code>themes/_night-sky.scss</code> 这个局部文件里的变量，你只需在样式表中写 <code>@import &quot;themes/night-sky&quot;;</code></p>
<h2 id="默认变量值"><a href="#默认变量值" class="headerlink" title="默认变量值;"></a>默认变量值;</h2><p>一般情况下，你反复声明一个变量，只有最后一处声明有效且它会覆盖前边的值。举例说明：</p>
<pre><code>$link-color: blue;
$link-color: red;
a {
    color: $link-color;
}
</code></pre><p>在上边的例子中，超链接的<code>color</code>会被设置为<code>red</code>。这可能并不是你想要的结果，假如你写了一个可被他人通过<code>@import</code>导入的sass库文件，你可能希望导入者可以定制修改sass库文件中的某些值。使用sass的<code>!default</code>标签可以实现这个目的。它很像css属性中<code>!important</code>标签的对立面，不同的是<code>!default</code>用于变量，含义是：如果这个变量被声明赋值了，那就用它声明的值，否则就用这个默认值。</p>
<pre><code>$fancybox-width: 400px !default;
.fancybox {
    width: $fancybox-width;
}
</code></pre><p>在上例中，如果用户在导入你的sass局部文件之前声明了一个<code>$fancybox-width</code>变量，那么你的局部文件中对<code>$fancybox-width</code>赋值<code>400px</code>的操作就无效。如果用户没有做这样的声明，则<code>$fancybox-width</code>将默认为<code>400px</code>。</p>
<h2 id="静默注释"><a href="#静默注释" class="headerlink" title="静默注释"></a>静默注释</h2><pre><code>body {
    color: #333;  // 这种注释内容不会出现在生成的css文件中
    padding: 0;  /* 这种注释内容会出现在生成的css文件中 */
}
</code></pre><h1 id="混合器"><a href="#混合器" class="headerlink" title="混合器"></a>混合器</h1><p>混合器使用 <code>@mixin</code> 标识符定义。</p>
<pre><code>@mixin rounded-corners {
    -moz-border-radius: 5px;
    -webkit-border-radius: 5px;
        border-radius: 5px;
}
</code></pre><p>然后就可以在样式表中通过 <code>@include</code> 来使用这个混合器。</p>
<pre><code>notice {
    background-color: green;
    border: 2px solid #00aa00;
    @include rounded-corners;
}
</code></pre><p>sass最终生成：</p>
<pre><code>.notice {
    background-color: green;
    border: 2px solid #00aa00;
    -moz-border-radius: 5px;
    -webkit-border-radius: 5px;
    border-radius: 5px;
}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS 预处理器的主要目标：提供 CSS 缺失的样式层复用机制、减少冗余代码，提高样式代码的可维护性。这不是锦上添花，而恰恰是雪中送炭。&lt;/p&gt;
    
    </summary>
    
      <category term="Web前端" scheme="http://yoursite.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 Web存储</title>
    <link href="http://yoursite.com/2017/07/24/HTML5-Web%E5%AD%98%E5%82%A8/"/>
    <id>http://yoursite.com/2017/07/24/HTML5-Web存储/</id>
    <published>2017-07-24T06:02:21.000Z</published>
    <updated>2017-09-17T13:37:10.807Z</updated>
    
    <content type="html"><![CDATA[<p>HTML5使用JavaScript来存储和访问数据，提供了两种在客户端存储数据的新方法：</p>
<a id="more"></a>
<ul>
<li>localStorage –没有时间限制的数据存储。第二天、第二周或下一年之后，数据依然可用。</li>
<li>sessionStorage –针对一个session的数据存储。当用户关闭浏览器窗口后，数据会被删除。</li>
</ul>
<h2 id="localStorage方法"><a href="#localStorage方法" class="headerlink" title="localStorage方法"></a>localStorage方法</h2><p>对用户访问页面的次数进行计数：</p>
<pre><code>&lt;script&gt;
    if (localStorage.pagecount) {
        localStorage.pagecount=Number(localStorage.pagecount) +1;
    } else {
        localStorage.pagecount=1;
    }
    document.write(&quot;Visits &quot;+ localStorage.pagecount + &quot; time(s).&quot;);
&lt;/script&gt;
</code></pre><h2 id="sessionStorage方法"><a href="#sessionStorage方法" class="headerlink" title="sessionStorage方法"></a>sessionStorage方法</h2><p>用户在当前 session 中访问页面的次数进行计数：</p>
<pre><code>&lt;script&gt;
    if(sessionStorage.pageCount){
        sessionStorage.pageCount = Number(sessionStorage.pageCount) +1;
     } else {
        sessionStorage.pageCount = 1;
    }
     document.write(&quot;visits: &quot; + sessionStorage.pageCount + &quot; 次&quot;);
&lt;/script&gt;
</code></pre><h2 id="如何工作"><a href="#如何工作" class="headerlink" title="如何工作?"></a>如何工作?</h2><p>早在1995,2010年，浏览器存储是利用cookie在浏览器上存储信息，但cookie仅限4k数据。</p>
<p>现如今的浏览器都很慷慨，都会提供5~10M（每个域）的存储空间。创建HTML5的本地存储时还充分考虑了Web应用（和移动应用）。所谓<strong>本地存储</strong>，就是指你的应用可以把数据存储在浏览器上，从而减少与服务器之间所需的通信。</p>
<h3 id="如何做到的？"><a href="#如何做到的？" class="headerlink" title="如何做到的？"></a>如何做到的？</h3><ol>
<li>使用这个API，页面可以在浏览器的本地存储中存储一个或多个键/值对；</li>
<li>然后用键来获取相应的值；</li>
</ol>
<p>键/值对，就是<code>key: &quot;pet&quot;</code>, <code>key</code>就是键，<code>pet</code>就是对。</p>
<h4 id="获取方法和设置方法-getItem和setItem"><a href="#获取方法和设置方法-getItem和setItem" class="headerlink" title="获取方法和设置方法(getItem和setItem)"></a>获取方法和设置方法(getItem和setItem)</h4><p><code>setItem</code>方法，用于存储某个数据，只能是string类型的数据项。</p>
<pre><code>localStorage.setItem(&quot;name&quot;,&quot;luya&quot;);
localStorage.setItem(&quot;age&quot;,21);
alert(localStorage.getItem(&quot;name&quot;));
//alert(parseInt(localStorage.getItem(&quot;age&quot;)));
//输出：luya
</code></pre><h4 id="看成一个关联数组"><a href="#看成一个关联数组" class="headerlink" title="看成一个关联数组"></a>看成一个关联数组</h4><pre><code>//为键赋值
localStorage[&quot;name&quot;] = &quot;luya&quot;;
//获取一个键存储的值,相当于getItem方法
var name = localStorage[&quot;name&quot;];
</code></pre><h3 id="另外两个特性"><a href="#另外两个特性" class="headerlink" title="另外两个特性"></a>另外两个特性</h3><p><code>length</code>属性，localStorage中有多少数据项；<code>key</code>方法，给出localStorage中各个数据项的键。</p>
<pre><code>for(var i=0;i&lt;localStorage.length;i++){
    var key = localStorage.key(i);
    var value = localStorage[key];
    alert(value);
}
</code></pre><h2 id="可以怎样使用？"><a href="#可以怎样使用？" class="headerlink" title="可以怎样使用？"></a>可以怎样使用？</h2><ul>
<li>在我的新Twitter客户端，为了提高效率，我要用localStorage把Twitter搜索结果缓存起来。用户搜索时，会先搜索本地结果。这对移动用户很有帮助。</li>
<li>用户存储播放列表（影片、音乐等）</li>
<li>使用sessionStorage实现购物车</li>
<li>有一个非常酷的游戏，他可以在两个不同的浏览器窗口同时工作，使用localStorage完成状态同步</li>
</ul>
<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><ul>
<li>JavaScript对象表示法（JavaScript Object Notation）</li>
<li>JSON是存储和交换文本信息的语法，类似XML；JSON比XML更小、更快、更易解析。</li>
</ul>
<p>JSON API只有两个方法：<code>stringify</code> 和 <code>parse</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTML5使用JavaScript来存储和访问数据，提供了两种在客户端存储数据的新方法：&lt;/p&gt;
    
    </summary>
    
      <category term="Web前端" scheme="http://yoursite.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
  </entry>
  
</feed>
