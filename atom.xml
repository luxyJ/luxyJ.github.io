<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>luyaJ的小博客</title>
  <subtitle>talk is cheap,show me the code</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-07T07:08:10.227Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>luyaJ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript手册</title>
    <link href="http://yoursite.com/2017/08/05/JavaScript%E6%89%8B%E5%86%8C/"/>
    <id>http://yoursite.com/2017/08/05/JavaScript手册/</id>
    <published>2017-08-05T14:51:43.000Z</published>
    <updated>2017-08-07T07:08:10.227Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。</p>
<a id="more"></a>
<h2 id="Event对象之事件句柄-Event-Handlers"><a href="#Event对象之事件句柄-Event-Handlers" class="headerlink" title="Event对象之事件句柄(Event Handlers)"></a>Event对象之事件句柄(Event Handlers)</h2><h3 id="onload-amp-onunload事件"><a href="#onload-amp-onunload事件" class="headerlink" title="onload &amp; onunload事件"></a>onload &amp; onunload事件</h3><p>是在用户进入或者离开页面的时候被触发。onload事件可用于检测访问者的浏览器类型和浏览器版本;onload和onunload事件可用于处理cookie。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;body onload=<span class="string">"checkCookies()"</span>&gt;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkCookies</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(navigator.cookieEnabled = <span class="literal">true</span>)&#123;</div><div class="line">        alert(<span class="string">"Cookies可用"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        alert(<span class="string">"不可用"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/body&gt;</span></div></pre></td></tr></table></figure>
<h3 id="onchange事件"><a href="#onchange事件" class="headerlink" title="onchange事件"></a>onchange事件</h3><p>在域的内容改变时发生。常结合对输入字段的验证来使用。</p>
<p>支持该事件的HTML标签：<code>&lt;input type=&quot;text&quot;&gt;</code> , <code>&lt;select&gt;</code> , <code>&lt;textarea&gt;</code> ;</p>
<p>支持该事件的JavaScript对象：<code>fileUpload</code> , <code>select</code> , <code>text</code> , <code>textarea</code>;</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">输入你的名字：&lt;input type=<span class="string">"text"</span> id=<span class="string">"name"</span> onchange=<span class="string">"myFunction()"</span>&gt;</div><div class="line">&lt;p&gt;当你离开输入框后，函数将被触发，将小写字母转为大写字母。&lt;/p&gt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> name = <span class="built_in">document</span>.getElementById(<span class="string">"name"</span>);</div><div class="line">    name.value = name.value.toUpperCase();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="onmouseover-amp-onmouseout事件"><a href="#onmouseover-amp-onmouseout事件" class="headerlink" title="onmouseover &amp; onmouseout事件"></a>onmouseover &amp; onmouseout事件</h3><p>用于在用户的鼠标移至 HTML 元素上方或移出元素时触发函数。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;div onmouseover=<span class="string">"mOver(this)"</span> onmouseout=<span class="string">"mOut(this)"</span> style=<span class="string">"background: red;width: 120px;height: 120px;"</span>&gt;&lt;/div&gt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mOut</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">    obj.innerHTML = <span class="string">"Move Over Me"</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mOver</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">    obj.innerHTML = <span class="string">"Thank you!"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="onmousedown-amp-onmouseup-amp-onclick事件"><a href="#onmousedown-amp-onmouseup-amp-onclick事件" class="headerlink" title="onmousedown &amp; onmouseup &amp; onclick事件"></a>onmousedown &amp; onmouseup &amp; onclick事件</h3><p>onmousedown, onmouseup 以及 onclick 构成了鼠标点击事件的所有部分。首先当点击鼠标按钮时，会触发 onmousedown 事件，当释放鼠标按钮时，会触发 onmouseup 事件，最后，当完成鼠标点击时，会触发 onclick 事件。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;img id=<span class="string">"img"</span> onmousedown=<span class="string">"lighton()"</span> onmouseup=<span class="string">"lightoff()"</span> src=<span class="string">"http://www.runoob.com/try/demo_source/bulboff.gif"</span> width=<span class="string">"100px"</span> height=<span class="string">"180px"</span>&gt;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">lightoff</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'img'</span>).src=<span class="string">"http://www.runoob.com/try/demo_source/bulboff.gif"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="button事件"><a href="#button事件" class="headerlink" title="button事件"></a>button事件</h3><p>指示当事件被触发时哪个鼠标按键被点击。语法：<code>event.button = 0|1|2</code> 。</p>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">规定鼠标左键</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">规定鼠标中键</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">规定鼠标右键</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onmousedown</span>=<span class="string">"whichbutton(event)"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>click in the document!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">whichbutton</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(event.button == <span class="number">2</span>)&#123;</div><div class="line">            alert(<span class="string">"you click the right mouse button!"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            alert(<span class="string">"you click the left mouse button!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="clientX-amp-clientY事件"><a href="#clientX-amp-clientY事件" class="headerlink" title="clientX &amp; clientY事件"></a>clientX &amp; clientY事件</h3><p>返回当事件被触发时鼠标指针向对于浏览器页面（或客户区：当前窗口）的<strong>水平坐标</strong>或者是<strong>垂直坐标</strong>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onmousedown</span>=<span class="string">"showCoords(event)"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>click in the document!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showCoords</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        x = event.clientX;</div><div class="line">        y = event.clientY;</div><div class="line">        alert(<span class="string">"X coords: "</span> + x + <span class="string">",Y coords: "</span> + y);</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="screenX-amp-screenY事件"><a href="#screenX-amp-screenY事件" class="headerlink" title="screenX &amp; screenY事件"></a>screenX &amp; screenY事件</h3><p>返回事件发生时鼠标指针相对于屏幕的<strong>水平坐标</strong>或者是<strong>垂直坐标</strong>。</p>
<h2 id="DOM-Element对象"><a href="#DOM-Element对象" class="headerlink" title="DOM Element对象"></a>DOM Element对象</h2><h3 id="node-appendChild-node"><a href="#node-appendChild-node" class="headerlink" title="node.appendChild(node)"></a>node.appendChild(node)</h3><p>向节点添加最后一个子节点:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;ul id=<span class="string">"myList"</span>&gt;&lt;li&gt;coffee&lt;/li&gt;&lt;li&gt;tea&lt;/li&gt;&lt;/ul&gt;</div><div class="line">&lt;button onclick=<span class="string">"myfunction()"</span>&gt;点击&lt;/button&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    <span class="keyword">function</span> <span class="function"><span class="title">myfunction</span></span>() &#123;</div><div class="line">        var node = document.createElement(<span class="string">"li"</span>);</div><div class="line">        var textnode = document.createTextNode(<span class="string">"water"</span>);</div><div class="line">        node.appendChild(textnode);</div><div class="line">        document.getElementById(<span class="string">"myList"</span>).appendChild(node);</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>从一个列表向另一个列表中移动列表项：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;ul id=<span class="string">"myList1"</span>&gt;&lt;li&gt;coffee&lt;/li&gt;&lt;li&gt;tea&lt;/li&gt;&lt;/ul&gt;</div><div class="line">&lt;ul id=<span class="string">"myList2"</span>&gt;&lt;li&gt;water&lt;/li&gt;&lt;li&gt;milk&lt;/li&gt;&lt;/ul&gt;</div><div class="line">&lt;button onclick=<span class="string">"myfunction()"</span>&gt;点击&lt;/button&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    <span class="keyword">function</span> <span class="function"><span class="title">myfunction</span></span>() &#123;</div><div class="line">        var node = document.getElementById(<span class="string">"myList2"</span>).firstChild;</div><div class="line">        document.getElementById(<span class="string">"myList1"</span>).appendChild(node);</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="node-attributes"><a href="#node-attributes" class="headerlink" title="node.attributes"></a>node.attributes</h3><p>返回指定节点的属性集合，即NamedNodeMap:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;button id=<span class="string">"btn"</span> onclick=<span class="string">"myFunction()"</span> class=<span class="string">"btn"</span>&gt;点击&lt;/button&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    <span class="keyword">function</span> <span class="function"><span class="title">myFunction</span></span>() &#123;</div><div class="line">        var x = document.getElementById(<span class="string">"btn"</span>).attributes.length;</div><div class="line">        document.write(x);</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;  //输出结果：3</div></pre></td></tr></table></figure>
<h3 id="element-childNodes"><a href="#element-childNodes" class="headerlink" title="element.childNodes"></a>element.childNodes</h3><p>返回元素子节点的NodeList。</p>
<h3 id="node-cloneNode-deep"><a href="#node-cloneNode-deep" class="headerlink" title="node.cloneNode(deep)"></a>node.cloneNode(deep)</h3><p>创建节点的拷贝，并返回该副本。克隆所有属性以及它们的值。如果您需要克隆所有后代，请把deep参数设置true，否则设置为false。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;ul id=<span class="string">"myList1"</span>&gt;&lt;li&gt;coffee&lt;/li&gt;&lt;li&gt;tea&lt;/li&gt;&lt;/ul&gt;</div><div class="line">&lt;ul id=<span class="string">"myList2"</span>&gt;&lt;li&gt;water&lt;/li&gt;&lt;li&gt;milk&lt;/li&gt;&lt;/ul&gt;</div><div class="line">&lt;button onclick=<span class="string">"myFunction()"</span>&gt;点击&lt;/button&gt;</div><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">myFunction</span></span>() &#123;</div><div class="line">    var <span class="built_in">clone</span> = document.getElementById(<span class="string">"myList2"</span>).lastChild.cloneNode(<span class="literal">true</span>);</div><div class="line">    document.getElementById(<span class="string">"myList1"</span>).appendChild(<span class="built_in">clone</span>);</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="node-insertBefore-newnode-existingnode"><a href="#node-insertBefore-newnode-existingnode" class="headerlink" title="node.insertBefore(newnode,existingnode)"></a>node.insertBefore(newnode,existingnode)</h3><p>在已有子节点之前插入新的子节点:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;ul id=<span class="string">"myList"</span>&gt;&lt;li&gt;coffee&lt;/li&gt;&lt;li&gt;tea&lt;/li&gt;&lt;/ul&gt;</div><div class="line">&lt;button onclick=<span class="string">"myFunction()"</span>&gt;点击&lt;/button&gt;</div><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">myFunction</span></span>() &#123;</div><div class="line">    var newItem = document.createElement(<span class="string">'li'</span>);</div><div class="line">    var textnode = document.createTextNode(<span class="string">'water'</span>);</div><div class="line">    newItem.appendChild(textnode);</div><div class="line"></div><div class="line">    var list = document.getElementById(<span class="string">'myList'</span>);</div><div class="line">    list.insertBefore(newItem,list.childNodes[0]);</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="node-nextSibling"><a href="#node-nextSibling" class="headerlink" title="node.nextSibling"></a>node.nextSibling</h3><p>返回指定节点之后紧跟的节点，在相同的树层级中:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;ul id=<span class="string">'myList'</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">'item1'</span>&gt;</span>coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">'item2'</span>&gt;</span>tea<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></div><div class="line">x = <span class="built_in">document</span>.getElementById(<span class="string">'item1'</span>).nextSibling.id;</div><div class="line"><span class="built_in">document</span>.write(x);  <span class="comment">//输出：item2</span></div></pre></td></tr></table></figure>
<h3 id="node-parentNode"><a href="#node-parentNode" class="headerlink" title="node.parentNode"></a>node.parentNode</h3><p>以Node对象的形式返回指定节点的父节点:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;<span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>tea<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></div><div class="line">x = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>)[<span class="number">0</span>];</div><div class="line"><span class="built_in">document</span>.write(x.parentNode.nodeName);  <span class="comment">//输出：UL</span></div></pre></td></tr></table></figure>
<h2 id="Array对象"><a href="#Array对象" class="headerlink" title="Array对象"></a>Array对象</h2><h3 id="concat-–连接"><a href="#concat-–连接" class="headerlink" title="concat() –连接"></a>concat() –连接</h3><p><strong>连接</strong>两个或更多的数组，并返回结果。如果要进行<code>concat()</code>操作的参数是数组，那么添加的是数组中的元素，而不是数组。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = [<span class="string">"Red"</span>,<span class="string">"Green"</span>,<span class="string">"Blue"</span>];</div><div class="line"><span class="keyword">var</span> name = [<span class="string">"Luya"</span>,<span class="string">"Awebone"</span>];</div><div class="line"><span class="keyword">var</span> kei = [<span class="string">"Robin"</span>];</div><div class="line"><span class="built_in">document</span>.write(color.concat(name,kei));</div><div class="line"><span class="comment">//输出：Red,Green,Blue,Luya,Awebone,Robin</span></div></pre></td></tr></table></figure>
<h3 id="shift-amp-pop-–删除"><a href="#shift-amp-pop-–删除" class="headerlink" title="shift() &amp; pop() –删除"></a>shift() &amp; pop() –删除</h3><p><code>shift()</code>方法用于把数组的<strong>第一个元素</strong>从其中<strong>删除</strong>，并返回第一个元素的值。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = [<span class="string">"Red"</span>,<span class="string">"Green"</span>,<span class="string">"Blue"</span>];</div><div class="line"><span class="built_in">document</span>.write(color+<span class="string">"&lt;br&gt;"</span>);  <span class="comment">//输出：Red,Green,Blue</span></div><div class="line"><span class="built_in">document</span>.write(color.shift()+<span class="string">"&lt;br&gt;"</span>);  <span class="comment">//输出：Red</span></div><div class="line"><span class="built_in">document</span>.write(color);  <span class="comment">//输出：Green,Blue</span></div></pre></td></tr></table></figure>
<p><code>pop()</code>方法用于删除数组的<strong>最后一个元素</strong>并返回<strong>删除</strong>的元素。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = [<span class="string">"Red"</span>,<span class="string">"Green"</span>,<span class="string">"Blue"</span>];</div><div class="line"><span class="built_in">document</span>.write(color+<span class="string">"&lt;br&gt;"</span>);  <span class="comment">//输出：Red,Green,Blue</span></div><div class="line"><span class="built_in">document</span>.write(color.pop()+<span class="string">"&lt;br&gt;"</span>);  <span class="comment">//输出：Blue</span></div><div class="line"><span class="built_in">document</span>.write(color);  <span class="comment">//输出：Red,Green</span></div></pre></td></tr></table></figure>
<h3 id="unshift-amp-push-–增加"><a href="#unshift-amp-push-–增加" class="headerlink" title="unshift() &amp; push() –增加"></a>unshift() &amp; push() –增加</h3><p><code>unshift()</code>方法可向数组的<strong>开头添加</strong>一个或更多元素，并返回新的长度。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = [<span class="string">"Red"</span>,<span class="string">"Green"</span>,<span class="string">"Blue"</span>];</div><div class="line">color.unshift(<span class="string">"hello"</span>,<span class="string">"world"</span>);</div><div class="line"><span class="built_in">document</span>.write(color);  <span class="comment">//输出：hello,world,Red,Green,Blue</span></div></pre></td></tr></table></figure>
<p><code>push()</code>方法可向数组的末尾添加一个或多个元素，并返回新的长度。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = [<span class="string">"Red"</span>,<span class="string">"Green"</span>,<span class="string">"Blue"</span>];</div><div class="line">color.push(<span class="string">"hello"</span>,<span class="string">"world"</span>);</div><div class="line"><span class="built_in">document</span>.write(color);  <span class="comment">//输出：Red,Green,Blue,hello,world</span></div></pre></td></tr></table></figure>
<h3 id="splice-–插入-删除-替换"><a href="#splice-–插入-删除-替换" class="headerlink" title="splice() –插入,删除,替换"></a>splice() –插入,删除,替换</h3><p>语法：<code>array.splice(index,howmany,item1,...,itemX)</code></p>
<p><code>index</code>必须，规定从何处添加或删除元素；<code>howmany</code>必须，规定应该删除多少元素，必须为数字，可以为“0”，若为规定此参数，则删除从index开始到原数组结尾的所有元素；<code>item</code>可选，要添加到数组的新元素。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = [<span class="string">"Red"</span>,<span class="string">"Green"</span>,<span class="string">"Blue"</span>,<span class="string">"pink"</span>];</div><div class="line">color.splice(<span class="number">2</span>,<span class="number">0</span>,<span class="string">"luya"</span>,<span class="string">"awebone"</span>);</div><div class="line"><span class="built_in">document</span>.write(color);  <span class="comment">//输出：Red,Green,luya,awebone,Blue,pink</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = [<span class="string">"Red"</span>,<span class="string">"Green"</span>,<span class="string">"Blue"</span>,<span class="string">"pink"</span>];</div><div class="line">color.splice(<span class="number">2</span>,<span class="number">1</span>,<span class="string">"luya"</span>);</div><div class="line"><span class="built_in">document</span>.write(color);  <span class="comment">//输出：Red,Green,luya,pink</span></div></pre></td></tr></table></figure>
<h3 id="reverse-–颠倒"><a href="#reverse-–颠倒" class="headerlink" title="reverse() –颠倒"></a>reverse() –颠倒</h3><p><code>reverse()</code>方法用于<strong>颠倒</strong>数组中元素的顺序。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = [<span class="string">"Red"</span>,<span class="string">"Green"</span>,<span class="string">"Blue"</span>];</div><div class="line"><span class="built_in">document</span>.write(color.reverse());</div><div class="line"><span class="comment">//输出：Blue,Green,Red</span></div></pre></td></tr></table></figure>
<h3 id="copyWithin-–拷贝"><a href="#copyWithin-–拷贝" class="headerlink" title="copyWithin() –拷贝"></a>copyWithin() –拷贝</h3><p><code>copyWithin()</code>方法用于从数组的指定位置<strong>拷贝</strong>元素到数组的另一个指定位置中。</p>
<p>语法：<code>array.copyWithin(target,start,end)</code></p>
<p><code>target</code>必须，从该位置开始替换数据；<code>start</code>必须，从该位置开始读取数据，默认为 0 。如果为负值，表示倒数；<code>end</code>可选，停止复制的索引位置(默认为array.length)。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = [<span class="string">"Red"</span>,<span class="string">"Green"</span>,<span class="string">"Blue"</span>,<span class="string">"pink"</span>];</div><div class="line"><span class="built_in">document</span>.write(color.copyWithin(<span class="number">0</span>,<span class="number">1</span>)+<span class="string">"&lt;br&gt;"</span>); <span class="comment">//Green,Blue,pink,pink</span></div><div class="line"><span class="built_in">document</span>.write(color.copyWithin(<span class="number">1</span>,<span class="number">1</span>)+<span class="string">"&lt;br&gt;"</span>); <span class="comment">//Red,Green,Blue,pink</span></div><div class="line"><span class="built_in">document</span>.write(color.copyWithin(<span class="number">2</span>,<span class="number">1</span>)+<span class="string">"&lt;br&gt;"</span>); <span class="comment">//Red,Green,Green,Blue</span></div><div class="line"><span class="built_in">document</span>.write(color.copyWithin(<span class="number">3</span>,<span class="number">1</span>)+<span class="string">"&lt;br&gt;"</span>); <span class="comment">//Red,Green,Blue,Green</span></div><div class="line"><span class="built_in">document</span>.write(color.copyWithin(<span class="number">2</span>,<span class="number">3</span>)+<span class="string">"&lt;br&gt;"</span>); <span class="comment">//Red,Green,pink,pink</span></div><div class="line"><span class="comment">//上边的document要一条一条的输出，一起输出结果会变</span></div></pre></td></tr></table></figure>
<h3 id="sort-–排序"><a href="#sort-–排序" class="headerlink" title="sort() –排序"></a>sort() –排序</h3><p><code>sort()</code>方法用于对数组的元素进行<strong>排序</strong>。排序顺序可以是字母或数字，并按升序或降序。默认排序顺序为按字母升序。</p>
<p><strong><em>注意：</em></strong> 当数字是按字母顺序排列时”40”将排在”5”前面；使用数字排序，你必须通过一个函数作为参数来调用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = [<span class="string">"Red"</span>,<span class="string">"Green"</span>,<span class="string">"Blue"</span>,<span class="string">"pink"</span>];</div><div class="line"><span class="built_in">document</span>.write(color.sort());  <span class="comment">//输出：Blue,Green,Red,pink</span></div></pre></td></tr></table></figure>
<p>数字排序(升序):</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> points = [<span class="number">40</span>,<span class="number">20</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">12</span>,<span class="number">23</span>];</div><div class="line">points.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>)</span>&#123; <span class="keyword">return</span> a-b; &#125;);</div><div class="line"><span class="built_in">document</span>.write(points);  <span class="comment">//输出：1,5,12,20,23,40</span></div></pre></td></tr></table></figure>
<p>若要实现数字降序则改为：<code>return b-a</code> 。</p>
<h3 id="some-–检测"><a href="#some-–检测" class="headerlink" title="some() –检测"></a>some() –检测</h3><p><code>some()</code>方法用于检测数组中的元素是否<strong>满足指定条件</strong>(函数提供)。会依次执行数组的每个元素，如果有一个元素满足条件，就返回<code>true</code>,剩下的元素不会在执行检测；如果没有满足条件的元素，则返回<code>false</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ages = [<span class="number">3</span>,<span class="number">10</span>,<span class="number">18</span>,<span class="number">20</span>];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">age</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> age &gt;= <span class="number">18</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">document</span>.write(ages.some(check));  <span class="comment">//输出：true</span></div></pre></td></tr></table></figure>
<h3 id="map-–处理"><a href="#map-–处理" class="headerlink" title="map() –处理"></a>map() –处理</h3><p><code>map()</code>方法返回一个新数组，数组中的元素为原始数组元素调用函数<strong>处理</strong>后的值。</p>
<p><strong><em>注意：</em></strong> <code>some()</code>和<code>map()</code>都不会对空数组进行检测。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">16</span>,<span class="number">100</span>];</div><div class="line"><span class="built_in">document</span>.write(num.map(<span class="built_in">Math</span>.sqrt));  <span class="comment">//输出：1,2,4,10</span></div></pre></td></tr></table></figure>
<h3 id="join-–转换"><a href="#join-–转换" class="headerlink" title="join() –转换"></a>join() –转换</h3><p><code>join()</code>方法用于把数组中的所有元素<strong>转换</strong>一个字符串，元素是通过指定的分隔符进行分隔的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = [<span class="string">"Red"</span>,<span class="string">"Green"</span>,<span class="string">"Blue"</span>];</div><div class="line"><span class="built_in">document</span>.write(color.join(<span class="string">" and "</span>));  <span class="comment">//输出：Red and Green and Blue</span></div></pre></td></tr></table></figure>
<h3 id="fill-–填充"><a href="#fill-–填充" class="headerlink" title="fill() –填充"></a>fill() –填充</h3><p><code>fill()</code>方法用于将一个固定值替换数组的元素。</p>
<p>语法：<code>array.fill(value,start,end)</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = [<span class="string">"Red"</span>,<span class="string">"Green"</span>,<span class="string">"Blue"</span>];</div><div class="line"><span class="built_in">document</span>.write(color.fill(<span class="string">"and"</span>));  <span class="comment">//输出：and,and,and</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = [<span class="string">"Red"</span>,<span class="string">"Green"</span>,<span class="string">"Blue"</span>,<span class="string">"pink"</span>];</div><div class="line"><span class="built_in">document</span>.write(color.fill(<span class="string">"and"</span>,<span class="number">1</span>,<span class="number">3</span>)); <span class="comment">//输出：Red,and,and,pink</span></div></pre></td></tr></table></figure>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><p><code>filter()</code>方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ages = [<span class="number">32</span>,<span class="number">15</span>,<span class="number">18</span>,<span class="number">7</span>,<span class="number">39</span>];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">age</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> age &gt;= <span class="number">18</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">document</span>.write(ages.filter(check));  <span class="comment">//输出：32,18,39</span></div></pre></td></tr></table></figure>
<p><a href="http://www.runoob.com/jsref/jsref-obj-array.html" target="_blank" rel="external">菜鸟教程JavaScript Array对象</a></p>
<h2 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h2><p>所有浏览器都支持date的各种方法。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"><span class="comment">//var d = new Date(year,month);</span></div><div class="line"><span class="built_in">document</span>.write(d.getDate());</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">getDate()</td>
<td style="text-align:center">返回一个月中的某一天 (1~31)</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td style="text-align:center">getDay()</td>
<td style="text-align:center">返回一周中的某一天 (0~6)</td>
<td style="text-align:center">周日是0，周一是1，依次类推</td>
</tr>
<tr>
<td style="text-align:center">getFullYear()</td>
<td style="text-align:center">返回一个表示年份的4位数字</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td style="text-align:center">getMonth()</td>
<td style="text-align:center">返回月份(0~11)</td>
<td style="text-align:center">0(一月)到11(十二月)</td>
</tr>
<tr>
<td style="text-align:center">getHours()</td>
<td style="text-align:center">返回Date对象的小时(0~23)</td>
<td style="text-align:center">0表示(午夜)</td>
</tr>
<tr>
<td style="text-align:center">getMinutes()</td>
<td style="text-align:center">返回Date对象的分钟(0~59)</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td style="text-align:center">getSeconds()</td>
<td style="text-align:center">返回Date对象的秒数(0~59)</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td style="text-align:center">getMilliseconds()</td>
<td style="text-align:center">返回Date对象的毫秒(0~999)</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td style="text-align:center">getTime()</td>
<td style="text-align:center">返回1970年1月1日至今的毫秒数</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td style="text-align:center">parse()</td>
<td style="text-align:center">返回1970年1月1日午夜到指定日期（字符串）的毫秒数</td>
<td style="text-align:center">/</td>
</tr>
<tr>
<td style="text-align:center">setDate()</td>
<td style="text-align:center">设置一个月的某一天</td>
<td style="text-align:center">其他的方法类似，这里就不一一列举</td>
</tr>
<tr>
<td style="text-align:center">toDateString()</td>
<td style="text-align:center">把Date对象的日期部分转换为字符串</td>
<td style="text-align:center">输出：Fri Aug 04 2017</td>
</tr>
<tr>
<td style="text-align:center">toLocaleDateString()</td>
<td style="text-align:center">根据本地时间格式，把Date对象的日期部分转换为字符串</td>
<td style="text-align:center">输出：2017/8/4</td>
</tr>
<tr>
<td style="text-align:center">toLocaleTimeString()</td>
<td style="text-align:center">根据本地时间格式，把Date对象的时间部分转换为字符串</td>
<td style="text-align:center">输出：上午10:59:41</td>
</tr>
<tr>
<td style="text-align:center">toLocaleString()</td>
<td style="text-align:center">据本地时间格式，把Date对象转换为字符串</td>
<td style="text-align:center">输出：2017/8/4 上午11:00:36</td>
</tr>
</tbody>
</table>
<p>setDate()方法:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">d.setDate(<span class="number">15</span>);</div><div class="line"><span class="built_in">document</span>.write(d); <span class="comment">//今天真是的是4号，输出：Tue Aug 15 2017 10:54:13 GMT+0800 (中国标准时间)</span></div></pre></td></tr></table></figure>
<p>getFullYear()方法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"><span class="built_in">document</span>.write(d.getFullYear());  <span class="comment">//输出：2017</span></div></pre></td></tr></table></figure>
<p>getHours()方法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"July 21,2017 21:00:00"</span>);</div><div class="line"><span class="built_in">document</span>.write(d.getHours());  <span class="comment">//输出：21</span></div></pre></td></tr></table></figure>
<p><a href="http://www.runoob.com/jsref/jsref-obj-date.html" target="_blank" rel="external">菜鸟教程JavaScipt Date对象</a></p>
<h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><h3 id="floor-x"><a href="#floor-x" class="headerlink" title="floor(x)"></a>floor(x)</h3><p>对x进行下舍入，返回小于等于x的最大整数：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.write(<span class="built_in">Math</span>.floor(<span class="number">1.6</span>));  <span class="comment">//输出：1</span></div></pre></td></tr></table></figure>
<h3 id="ceil-x"><a href="#ceil-x" class="headerlink" title="ceil(x)"></a>ceil(x)</h3><p>对x进行上舍入，返回大于等于x的最大整数：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.write(<span class="built_in">Math</span>.ceil(<span class="number">1.4</span>));  <span class="comment">//输出：2</span></div></pre></td></tr></table></figure>
<h3 id="round-x"><a href="#round-x" class="headerlink" title="round(x)"></a>round(x)</h3><p>对x进行四舍五入：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.write(<span class="built_in">Math</span>.round(<span class="number">1.4</span>));  <span class="comment">//输出：1</span></div></pre></td></tr></table></figure>
<h3 id="random"><a href="#random" class="headerlink" title="random()"></a>random()</h3><p>返回介于 0(包含) ~ 1(不包含) 之间的一个随机数：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;p id=<span class="string">"demo"</span>&gt;点击按钮随机显示1到10之间的随机数：&lt;/p&gt;</div><div class="line">&lt;button onclick=<span class="string">"myFunction()"</span>&gt;点击&lt;/button&gt;</div><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">myFunction</span></span>() &#123;</div><div class="line">    var demo = document.getElementById(<span class="string">"demo"</span>);</div><div class="line">    demo.innerHTML = Math.floor(Math.random() * 10 + 1);</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="max-x-y-…-n-amp-min"><a href="#max-x-y-…-n-amp-min" class="headerlink" title="max(x,y,…,n) &amp; min()"></a>max(x,y,…,n) &amp; min()</h3><p>max()返回两个指定的数中带有较大的值的那个数:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.write(<span class="built_in">Math</span>.max(<span class="number">1</span>,<span class="number">56</span>,<span class="number">4</span>,<span class="number">22</span>,<span class="number">-8</span>));  <span class="comment">//输出：56</span></div></pre></td></tr></table></figure>
<p><a href="http://www.runoob.com/jsref/jsref-obj-math.html" target="_blank" rel="external">菜鸟教程JavaScipt Math对象</a></p>
<h2 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h2><h3 id="substring-amp-slice-amp-substr-–提取"><a href="#substring-amp-slice-amp-substr-–提取" class="headerlink" title="substring() &amp; slice() &amp; substr() –提取"></a>substring() &amp; slice() &amp; substr() –提取</h3><p><code>substring()</code>用于提取字符串中介于两个指定下标之间的字符:</p>
<p>语法：<code>stringObject.substring(start,stop)</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">"Hello world!"</span></div><div class="line"><span class="built_in">document</span>.write(str.substring(<span class="number">3</span>));  <span class="comment">//输出：lo world!</span></div><div class="line"><span class="built_in">document</span>.write(str.substring(<span class="number">3</span>,<span class="number">7</span>));  <span class="comment">//输出：lo w</span></div></pre></td></tr></table></figure>
<p><code>slice()</code>可提取字符串的某个部分，并以新的字符串返回被提取的部分:</p>
<p>语法：<code>stringObject.slice(start,end)</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">"Hello happy world!"</span></div><div class="line"><span class="built_in">document</span>.write(str.slice(<span class="number">6</span>));  <span class="comment">//输出：happy world!</span></div><div class="line"><span class="built_in">document</span>.write(str.slice(<span class="number">6</span>,<span class="number">11</span>));  <span class="comment">//输出：happy</span></div></pre></td></tr></table></figure>
<p><code>substr()</code>可在字符串中抽取从 start 下标开始的指定数目的字符:</p>
<p>语法：<code>stringObject.substr(start,length)</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">"Hello world!"</span></div><div class="line"><span class="built_in">document</span>.write(str.substr(<span class="number">3</span>));  <span class="comment">//输出：lo world!</span></div><div class="line"><span class="built_in">document</span>.write(str.substr(<span class="number">3</span>,<span class="number">7</span>));  <span class="comment">//输出：lo worl</span></div></pre></td></tr></table></figure>
<h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h3><p>返回某个指定的字符串值在字符串中首次出现的位置。对大小写敏感；如果要检索的字符串值没有出现，则该方法返回-1。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">"Hello world!"</span></div><div class="line"><span class="built_in">document</span>.write(str.indexOf(<span class="string">"Hello"</span>) + <span class="string">" "</span>);</div><div class="line"><span class="built_in">document</span>.write(str.indexOf(<span class="string">"World"</span>) + <span class="string">" "</span>);</div><div class="line"><span class="built_in">document</span>.write(str.indexOf(<span class="string">"world"</span>));</div><div class="line"><span class="comment">//输出： 0 -1 6</span></div></pre></td></tr></table></figure>
<h2 id="RegExp对象"><a href="#RegExp对象" class="headerlink" title="RegExp对象"></a>RegExp对象</h2><p><code>RegExp</code>对象表示正则表达式，它是对字符串执行模式匹配的强大工具。</p>
<p>直接量语法：<code>/pattern/attributes</code></p>
<h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><table>
<thead>
<tr>
<th style="text-align:center">修饰符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">i</td>
<td style="text-align:left">执行对大小写不敏感的匹配</td>
</tr>
<tr>
<td style="text-align:center">g</td>
<td style="text-align:left">执行全局匹配(查找所有匹配而非在找到第一个匹配后停止)</td>
</tr>
<tr>
<td style="text-align:center">m</td>
<td style="text-align:left">执行多行匹配</td>
</tr>
</tbody>
</table>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"Visit W3School"</span>;</div><div class="line"><span class="keyword">var</span> patt1 = <span class="regexp">/w3school/i</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(patt1));  <span class="comment">//输出：W3School</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">"Is this all there is?"</span>;</div><div class="line"><span class="keyword">var</span> patt1=<span class="regexp">/is/gi</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(patt1));  <span class="comment">//输出：Is,is,is</span></div></pre></td></tr></table></figure>
<h3 id="方括号"><a href="#方括号" class="headerlink" title="方括号"></a>方括号</h3><ul>
<li><code>[abc]</code>表达式：用于查找方括号之间的任何字符,方括号内的字符可以是任何字符或字符范围。</li>
</ul>
<p>直接量语法：<code>/[abc]/</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"Is this all there is?"</span>;</div><div class="line"><span class="keyword">var</span> patt1 = <span class="regexp">/[a-h]/g</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(patt1));  <span class="comment">//输出：h,a,h,e,e</span></div></pre></td></tr></table></figure>
<ul>
<li><code>[^abc]</code>：用于查找任何不在方括号之间的字符。</li>
<li><code>[0-9]</code>：查找任何从0至9的数字。</li>
<li><code>[a-z]</code>：查找任何从小写a到小写z的字符。</li>
<li><code>(red|blue|green)</code>：查找任何指定的选项。</li>
</ul>
<h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><ul>
<li><code>.</code> : 查找单个字符，除了换行和行结束符。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"That's hot!"</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(<span class="regexp">/h.t/g</span>));  <span class="comment">//输出：hat,hot</span></div></pre></td></tr></table></figure>
<ul>
<li><p><code>\w</code> : 查找单词字符。<strong>单词字符包括：a-z、A-Z、0-9，以及下划线。</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'Give 100%!'</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(<span class="regexp">/\w/g</span>));  <span class="comment">//输出：G,i,v,e,1,0,0</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>\W</code> : 查找非单词字符。（上面的代码输出：<code>%</code>）</p>
</li>
<li><p><code>\d</code> &amp; <code>\D</code> : 查找数字/查找非数字字符。</p>
</li>
<li><p><code>\s</code> &amp; <code>\S</code> : 查找空白字符/查找非空白字符。空白字符可以是：</p>
<ul>
<li>空格符 (space character)</li>
<li>制表符 (tab character)</li>
<li>回车符 (carriage return character)</li>
<li>换行符 (new line character)</li>
<li>垂直换行符 (vertical tab character)</li>
<li>换页符 (form feed character)</li>
</ul>
</li>
<li><p><code>\b</code> : 匹配单词边界。在单词边界匹配的位置，单词字符后面或前面不与另一个单词字符直接相邻。请注意，匹配的单词边界并不包含在匹配中。换句话说，匹配的单词边界的长度为零。（不要与<code>[\b]</code>混淆。）如果未找到匹配，则返回<code>null</code>。</p>
</li>
</ul>
<p><em>注意</em>：<code>\b</code>元字符通常用于查找位于单词的开头或结尾的匹配。</p>
<p><strong><em>例子：</em></strong></p>
<p>1.<code>/\bm/</code> 匹配 “moon” 中的 ‘m’,返回<code>m</code>；</p>
<p>2.<code>/oo\b/</code> 不匹配 “moon” 中的 ‘oo’，因为 ‘oo’ 后面的 ‘n’ 是一个单词字符，返回<code>null</code>；</p>
<p>3.<code>/oon\b/</code> 匹配 “moon” 中的 ‘oon’，因为 ‘oon’ 位于字符串的末端，后面没有单词字符，返回<code>oon</code>；</p>
<p>4.<code>/\w\b\w/</code> 不匹配任何字符，因为单词字符之后绝不会同时紧跟着非单词字符和单词字符，返回<code>null</code>。</p>
<ul>
<li><code>\B</code> : 匹配非单词边界。匹配位置的上一个和下一个字符的类型是相同的：即必须同时是单词，或必须同时是非单词字符。字符串的开头和结尾处被视为非单词字符。如果未找到匹配，则返回<code>null</code></li>
</ul>
<p><em>注意</em>：<code>\B</code>元字符通常用于查找不处在单词的开头或结尾的匹配。</p>
<ul>
<li><code>\n</code> : 查找换行符。返回换行符被找到的位置。如果未找到匹配，则返回-1。</li>
</ul>
<h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><ul>
<li><code>n+</code> : 匹配包含<strong>至少一个</strong><code>n</code>的任何字符串。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'Hellooo World! Hello W3School!'</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(<span class="regexp">/o+/g</span>));  <span class="comment">//输出：ooo,o,o,oo</span></div></pre></td></tr></table></figure>
<ul>
<li><code>n*</code> : 匹配包含<strong>零个</strong>或<strong>多个</strong><code>n</code>的任何字符串。</li>
</ul>
<p><em>例：</em> 对<code>l</code>进行全局搜索，包括其后紧跟的一个或多个<code>o</code>：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'Hellooo World! Hello W3School!'</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(<span class="regexp">/lo*/g</span>));  <span class="comment">//输出：l,looo,l,l,lo,l</span></div></pre></td></tr></table></figure>
<ul>
<li><code>n?</code> : 匹配任何包含<strong>零个</strong>或<strong>一个</strong><code>n</code>的字符串。</li>
</ul>
<p><em>例：</em> 对<code>1</code>进行全局搜索，包括其后紧跟的零个或一个<code>0</code>：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'1,100 or 1000'</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(<span class="regexp">/10?/g</span>));  <span class="comment">//输出：1,10,10</span></div></pre></td></tr></table></figure>
<ul>
<li><code>n{x}</code> : 匹配包含X个<code>n</code>的序列的字符串。</li>
</ul>
<p><em>例：</em> 对包含四位数字序列的子串进行全局搜索：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'100,1000 or 10000'</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(<span class="regexp">/\d&#123;4&#125;/g</span>));  <span class="comment">//输出：1000,1000</span></div></pre></td></tr></table></figure>
<ul>
<li><code>n{x,Y}</code> : 匹配包含X至Y个<code>n</code>的序列的字符串。X和Y必须是数字。</li>
</ul>
<p><em>例：</em> 对包含三位至四位数字序列的子串进行全局搜索：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'100,1000 or 10000'</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(<span class="regexp">/\d&#123;3,4&#125;/g</span>));  <span class="comment">//输出：100,1000,1000</span></div></pre></td></tr></table></figure>
<ul>
<li><code>n{x,}</code> : 匹配包含至少X个<code>n</code>的序列的字符串。</li>
</ul>
<p><em>例：</em> 对包含至少三位数字序列的子串进行全局搜索：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'100,1000 or 10000'</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(<span class="regexp">/\d&#123;3,4&#125;/g</span>));  <span class="comment">//输出：100,1000,1000</span></div></pre></td></tr></table></figure>
<ul>
<li><code>n$</code> : 匹配任何结尾为<code>n</code>的字符串。</li>
</ul>
<p><em>例：</em> 对字符串结尾的 “is” 进行全局搜索：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'Is this his'</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(<span class="regexp">/is$/g</span>));  <span class="comment">//输出：is</span></div></pre></td></tr></table></figure>
<ul>
<li><code>^n</code> : 匹配任何开头为<code>n</code>的字符串。</li>
</ul>
<p><em>例：</em> 对字符串开头的 “is” 进行全局搜索：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'Is this his'</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(<span class="regexp">/is$/g</span>));  <span class="comment">//输出：Is</span></div></pre></td></tr></table></figure>
<ul>
<li><code>?=n</code> : 匹配任何其后紧接指定字符串<code>n</code>的字符串。</li>
</ul>
<p><em>例：</em> 对其后紧跟 “all” 的 “is” 进行全局搜索：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'Is this all there is'</span>;</div><div class="line">patt1 = <span class="regexp">/is(?=all)/</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(patt1));  <span class="comment">//输出：is</span></div></pre></td></tr></table></figure>
<ul>
<li><code>?!n</code> : 匹配其后没有紧接指定字符串<code>n</code>的任何字符串。</li>
</ul>
<p><em>例：</em> 对其后没有紧跟 “all” 的 “is” 进行全局搜索：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'Is this all there is'</span>;</div><div class="line">patt1 = <span class="regexp">/is(?! all)/gi</span>;</div><div class="line"><span class="built_in">document</span>.write(str.match(patt1));  <span class="comment">//输出：Is,is</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。&lt;/p&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>二叉树遍历</title>
    <link href="http://yoursite.com/2017/08/03/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/"/>
    <id>http://yoursite.com/2017/08/03/二叉树遍历/</id>
    <published>2017-08-03T10:48:00.000Z</published>
    <updated>2017-08-03T10:48:22.826Z</updated>
    
    <content type="html"><![CDATA[<p>总结二叉树前序、中序、后序遍历互相求法，知二求三。</p>
<a id="more"></a>
<h2 id="各遍历特性"><a href="#各遍历特性" class="headerlink" title="各遍历特性"></a>各遍历特性</h2><ul>
<li>前序遍历<ol>
<li>访问根节点</li>
<li>前序遍历左子树</li>
<li>前序遍历右子树</li>
</ol>
</li>
<li>中序遍历<ol>
<li>中序遍历左子树</li>
<li>访问根节点</li>
<li>中序遍历右子树</li>
</ol>
</li>
<li>后序遍历<ol>
<li>后序遍历左子树</li>
<li>后序遍历右子树</li>
<li>访问根节点</li>
</ol>
</li>
</ul>
<h2 id="由二叉树得各遍历"><a href="#由二叉树得各遍历" class="headerlink" title="由二叉树得各遍历"></a>由二叉树得各遍历</h2><p><img src="http://ot4r4qnml.bkt.clouddn.com/erchashu1.png" alt="二叉树1"></p>
<p>先序遍历: <code>ABDGCEF</code> ;</p>
<p>中序遍历: <code>DGBAECF</code> ;</p>
<p>后序遍历: <code>GDBEFCA</code> ;</p>
<h2 id="已知前序、中序遍历，求后序遍历"><a href="#已知前序、中序遍历，求后序遍历" class="headerlink" title="已知前序、中序遍历，求后序遍历"></a>已知前序、中序遍历，求后序遍历</h2><blockquote>
<p>例：</p>
<p>前序遍历： GDAFEMHZ</p>
<p>中序遍历： ADEFGHMZ</p>
</blockquote>
<p><strong>解析:</strong></p>
<p>1.根据前序遍历的特点，得到根节点是 <code>G</code> ;</p>
<p>2.观察中序遍历，知：<code>ADEF</code>是根节点的左子树，<code>HMZ</code>是根节点的右子树;</p>
<p>3.接下来，知道左子树的根节点为 <code>D</code> ;</p>
<p>4.同理，<code>A</code> 为 <code>D</code> 的左子树，<code>EF</code> 为右子树</p>
<p>5.右子树的根节点是 <code>M</code> ，依次，画出的结果如图：</p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/%E4%BA%8C%E5%8F%89%E6%A0%912.png" alt="二叉树2"></p>
<p>那么，可以得到后序遍历顺序为：<code>AEFDHZMG</code></p>
<h2 id="已知中序、后序遍历，求前序遍历"><a href="#已知中序、后序遍历，求前序遍历" class="headerlink" title="已知中序、后序遍历，求前序遍历"></a>已知中序、后序遍历，求前序遍历</h2><blockquote>
<p>例：</p>
<p>中序遍历: ADEFGHMZ</p>
<p>后序遍历: AEFDHZMG</p>
</blockquote>
<p><strong>解析：</strong></p>
<p>1.由后序遍历知 <code>G</code> 为根节点,结合中序遍历知 <code>ADEF</code> 为左子树，<code>HMZ</code> 为右子树;</p>
<p>2.再观察后序遍历，知道 <code>D</code> 为左子树根节点， <code>M</code> 为右子树根节点;</p>
<p>3.分析结果如图：</p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/erchashu3.png" alt="二叉树3"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结二叉树前序、中序、后序遍历互相求法，知二求三。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>jQuery手册</title>
    <link href="http://yoursite.com/2017/07/28/jQuery%E6%89%8B%E5%86%8C/"/>
    <id>http://yoursite.com/2017/07/28/jQuery手册/</id>
    <published>2017-07-28T15:09:06.000Z</published>
    <updated>2017-07-28T15:21:36.824Z</updated>
    
    <content type="html"><![CDATA[<p>jQuery是一个JavaScript函数库，极大的简化了JavaScript编程。</p>
<a id="more"></a>
<p>jQuery 版本 2 以上不支持 IE6、7、8 浏览器。如果需要支持 IE6/7/8，那么请选择1.9。你还可以通过条件注释在使用 IE6/7/8 时只包含进1.9。</p>
<pre><code>&lt;!--[if lt IE 9]&gt;
&lt;script src=&quot;jquery-1.9.0.js&quot;&gt;&lt;/script&gt;
&lt;![endif]--&gt;
&lt;!--[if gte IE 9]&gt;&lt;!--&gt;
&lt;script src=&quot;jquery-2.0.0.js&quot;&gt;&lt;/script&gt;
&lt;!--&lt;![endif]--&gt;
</code></pre><p><strong>添加jQuery：</strong> </p>
<ul>
<li>官网下载 </li>
<li>可以直接从百度CDN中引用jQuery：<code>src=&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</code></li>
</ul>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>文档就绪事件：</p>
<pre><code>$(document).ready(function(){
//代码部分
});
</code></pre><p>这是为了防止文档在完全加载之前运行jquery代码。</p>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><table>
<thead>
<tr>
<th style="text-align:center">语法</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">$(“p”)</td>
<td style="text-align:center">元素选择器</td>
</tr>
<tr>
<td style="text-align:center">$(“#id”)</td>
<td style="text-align:center">id选择器</td>
</tr>
<tr>
<td style="text-align:center">$(“.class”)</td>
<td style="text-align:center">class选择器</td>
</tr>
</tbody>
</table>
<p> <img src="http://otqcthsfv.bkt.clouddn.com/selector.PNG" alt="selector"></p>
<h3 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h3><p> <img src="http://otqcthsfv.bkt.clouddn.com/selector1.png" alt="selector1"></p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="什么是事件？"><a href="#什么是事件？" class="headerlink" title="什么是事件？"></a>什么是事件？</h3><p>页面对不同访问者的响应叫做事件。</p>
<h3 id="常用事件方法"><a href="#常用事件方法" class="headerlink" title="常用事件方法"></a>常用事件方法</h3><h5 id="1-document-ready"><a href="#1-document-ready" class="headerlink" title="1.$(document).ready()"></a>1.$(document).ready()</h5><h5 id="2-click-amp-dblclick"><a href="#2-click-amp-dblclick" class="headerlink" title="2.click() &amp; dblclick()"></a>2.click() &amp; dblclick()</h5><h5 id="3-bind"><a href="#3-bind" class="headerlink" title="3.bind()"></a>3.bind()</h5><p>将事件和函数绑定到元素上。为被选元素添加一个或多个事件处理程序，并规定事件发生时运行的函数。</p>
<pre><code>$(&quot;button&quot;).bind(&quot;click&quot;,function(){
    $(&quot;p&quot;).show();
});
</code></pre><h5 id="4-on-amp-off"><a href="#4-on-amp-off" class="headerlink" title="4.on() &amp; off()"></a>4.on() &amp; off()</h5><p>在被选元素及子元素上添加一个或多个事件处理程序。使用on()方法添加的事件处理程序适用于<em>当前及未来的元素</em>（比如由脚本创建的新元素）。</p>
<pre><code>$(&quot;p&quot;).on(&quot;click&quot;,function(){
    alert(&quot;The paragraph was clicked.&quot;);
});
</code></pre><p>提示：如需移除事件处理程序，使用off()方法</p>
<pre><code>$(&quot;button&quot;).click(function(){
    $(&quot;p&quot;).off(&quot;click&quot;);
});
</code></pre><p>向元素添加多个事件处理程序：</p>
<pre><code>$(&quot;p&quot;).on({
    mouseover:function(){$(&quot;body&quot;).css(&quot;background-color&quot;,&quot;lightgray&quot;);},
    mouseout:function(){$(&quot;body&quot;).css(&quot;background-color&quot;,&quot;lightblue&quot;);},
    click:function(){$(&quot;body&quot;).css(&quot;background-color&quot;,&quot;yellow&quot;);}
});
</code></pre><h5 id="5-toggle"><a href="#5-toggle" class="headerlink" title="5.toggle()"></a>5.toggle()</h5><p>用于绑定两个或多个事件处理器函数，以响应被选元素的轮流的click事件。</p>
<pre><code>&lt;button&gt;请点击这里，来切换不同的背景颜色&lt;/button&gt;

$(document).ready(function(){
    $(&quot;button&quot;).toggle(function(){
        $(&quot;body&quot;).css(&quot;background&quot;,&quot;green&quot;);}
        ,function(){
        $(&quot;body&quot;).css(&quot;background-color&quot;,&quot;red&quot;);}
        ,function(){
        $(&quot;body&quot;).css(&quot;background-color&quot;,&quot;yellow&quot;);}
    );
});
</code></pre><h5 id="6-mousedown-amp-mouseup"><a href="#6-mousedown-amp-mouseup" class="headerlink" title="6.mousedown() &amp; mouseup()"></a>6.mousedown() &amp; mouseup()</h5><p>当鼠标指针移动到元素上方，并按下鼠标按键时，会发生mousedown事件:</p>
<pre><code>$(&quot;button&quot;).mousedown(function(){
    $(&quot;p&quot;).slideToggle();
});
</code></pre><p>当在元素上松开鼠标按钮时，会发生mouseup事件</p>
<h5 id="7-focus-amp-blur"><a href="#7-focus-amp-blur" class="headerlink" title="7.focus() &amp; blur()"></a>7.focus() &amp; blur()</h5><p>当元素获得焦点时，发生focus事件;当元素失去焦点时发生blur事件:</p>
<pre><code>&lt;input type=&quot;text&quot; /&gt;

$(&quot;input&quot;).focus(function(){
    $(&quot;input&quot;).css(&quot;background-color&quot;,&quot;#FFFFCC&quot;);
});
$(&quot;input&quot;).blur(function(){
    $(&quot;input&quot;).css(&quot;background-color&quot;,&quot;#D6D6FF&quot;);
});
</code></pre><h5 id="8-hover"><a href="#8-hover" class="headerlink" title="8.hover()"></a>8.hover()</h5><p>光标悬停事件:</p>
<pre><code>$(&quot;p&quot;).hover(function(){
    $(&quot;p&quot;).css(&quot;background-color&quot;,&quot;yellow&quot;);
    },function(){
    $(&quot;p&quot;).css(&quot;background-color&quot;,&quot;pink&quot;);
});
</code></pre><h5 id="9-1-event-target"><a href="#9-1-event-target" class="headerlink" title="9.1. event.target"></a>9.1. event.target</h5><p>target属性规定哪个DOM元素触发了该事件:</p>
<pre><code>&lt;h1&gt;这是一个标题&lt;/h1&gt;
&lt;h2&gt;这是另一个标题&lt;/h2&gt;
&lt;p&gt;这是一个段落&lt;/p&gt;
&lt;div&gt;&lt;/div&gt;

$(&quot;p,h1,h2&quot;).click(function(event){
    $(&quot;div&quot;).html(&quot;点击事件由一个 &quot; + event.target.nodeName + &quot; 元素触发&quot;);
  });
</code></pre><h5 id="9-2-event-pageX-amp-event-pageY"><a href="#9-2-event-pageX-amp-event-pageY" class="headerlink" title="9.2. event.pageX &amp; event.pageY"></a>9.2. event.pageX &amp; event.pageY</h5><p>pageX()属性是鼠标指针的位置，相对于文档的左边缘;pageY()属性是鼠标指针的位置，相对于文档的上边缘:</p>
<pre><code>&lt;p&gt;鼠标指针位于：&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

$(document).mousemove(function(e){
    $(&quot;span&quot;).text(&quot;X:&quot; + e.pageX + &quot;,Y:&quot; + e.pageY);
})
</code></pre><h5 id="10-trigger"><a href="#10-trigger" class="headerlink" title="10.trigger()"></a>10.trigger()</h5><p>触发被选元素的指定事件类型:</p>
<pre><code>&lt;input type=&quot;text&quot; name=&quot;FirstName&quot; value=&quot;Hello World&quot; /&gt; &lt;br/&gt;
&lt;button&gt;激活input域的select事件&lt;/button&gt;

$(&quot;input&quot;).select(function(){
    $(&quot;input&quot;).after(&quot;文本被选中！&quot;);
  });
  $(&quot;button&quot;).click(function(){
    $(&quot;input&quot;).trigger(&quot;select&quot;);
  });
</code></pre><p>使用Event对象来触发事件：</p>
<pre><code>$(&quot;input&quot;).select(function(){
    $(&quot;input&quot;).after(&quot;文本被选中！&quot;);
});
var e = jQuery.Event(&quot;select&quot;);
$(&quot;button&quot;).click(function(){
    $(&quot;input&quot;).trigger(e);
});
</code></pre><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><ul>
<li>animate()</li>
</ul>
<p>语法：<code>animate(styles,speed,easing,callback);</code></p>
<pre><code>$(&quot;button&quot;).click(function(){
    $(&quot;div&quot;).animate({left:&apos;250px&apos;});
});
</code></pre><p>参数<code>styles</code>中的css样式值 见：<a href="http://www.w3school.com.cn/jquery/effect_animate.asp" target="_blank" rel="external">链接</a></p>
<p>注释：使用 “+=” 或 “-=” 来创建相对动画(relative animations)</p>
<h3 id="隐藏-显示"><a href="#隐藏-显示" class="headerlink" title="隐藏/显示"></a>隐藏/显示</h3><ul>
<li>hide(speed,callback);</li>
<li>show(speed,callback);</li>
<li>toggle(speed,callback);</li>
</ul>
<p><code>speed</code>参数可以取值：<code>slow</code>,<code>fast</code>,<code>normal</code>,毫秒;<code>callback</code>参数是隐藏或显示完成后所执行的函数名称。</p>
<pre><code>&lt;p&gt;This is a paragraph.&lt;/p&gt;
&lt;button class=&quot;btn1&quot;&gt;Toggle&lt;/button&gt;

$(&quot;.btn1&quot;).click(function(){
    $(&quot;p&quot;).toggle();
});
</code></pre><h3 id="淡入淡出"><a href="#淡入淡出" class="headerlink" title="淡入淡出"></a>淡入淡出</h3><ul>
<li>fadeIn(speed,callback);</li>
<li>fadeOut(speed,callback);</li>
<li>fadeToggle(speed,callback);</li>
<li>fadeTo(speed,opacity,callback);</li>
</ul>
<p><code>speed</code>参数可以取值：<code>slow</code>,<code>fast</code>,<code>normal</code>,毫秒;<code>opacity</code>必需，规定淡入或淡出的透明度，介于0.00与1.00;<code>callback</code>参数是隐藏或显示完成后所执行的函数名称。</p>
<pre><code>$(&quot;.btn1&quot;).click(function(){
  $(&quot;p&quot;).fadeTo(1000,0.4);
});
</code></pre><h3 id="滑动"><a href="#滑动" class="headerlink" title="滑动"></a>滑动</h3><ul>
<li>slideDown(speed,callback);</li>
<li>slideUp(speed,callback);</li>
<li>slideToggle(speed,callback);</li>
</ul>
<p><code>speed</code>参数可以取值：<code>slow</code>,<code>fast</code>,<code>normal</code>,毫秒;<code>callback</code>参数是隐藏或显示完成后所执行的函数名称。</p>
<pre><code>$(&quot;.btn1&quot;).click(function(){
    $(&quot;p&quot;).slideToggle();
});
</code></pre><h3 id="stop"><a href="#stop" class="headerlink" title="stop()"></a>stop()</h3><p>停止当前正在运行的动画:</p>
<pre><code>$(&quot;#stop&quot;).click(function(){
    $(&quot;#box&quot;).stop();
});
</code></pre><h3 id="链-Chaining"><a href="#链-Chaining" class="headerlink" title="链(Chaining)"></a>链(Chaining)</h3><pre><code>$(&quot;#p1&quot;).css(&quot;color&quot;,&quot;red&quot;).slideUp(2000).slideDown(2000);
</code></pre><h2 id="jQuery-HTML"><a href="#jQuery-HTML" class="headerlink" title="jQuery HTML"></a>jQuery HTML</h2><h3 id="获得内容-–-text-、html-、val"><a href="#获得内容-–-text-、html-、val" class="headerlink" title="获得内容 – text()、html()、val()"></a>获得内容 – text()、html()、val()</h3><pre><code>&lt;p&gt;名称: &lt;input type=&quot;text&quot; id=&quot;test&quot; value=&quot;菜鸟教程&quot;&gt;&lt;/p&gt;
&lt;button&gt;显示值&lt;/button&gt;

$(document).ready(function(){
$(&quot;button&quot;).click(function(){
    alert(&quot;值为: &quot; + $(&quot;#test&quot;).val());
    });
});
</code></pre><ul>
<li>text() -  设置或返回所选元素的文本内容</li>
<li>html() -  设置或返回所选元素的内容（包括 HTML 标记）</li>
<li>val() - 设置或返回表单字段的值</li>
</ul>
<h3 id="设置或返回属性-–-attr"><a href="#设置或返回属性-–-attr" class="headerlink" title="设置或返回属性 – attr()"></a>设置或返回属性 – attr()</h3><p>1.返回属性：</p>
<pre><code>&lt;p&gt;&lt;a href=&quot;http://www.runoob.com&quot; id=&quot;runoob&quot;&gt;菜鸟教程&lt;/a&gt;&lt;/p&gt;
&lt;button&gt;显示 href 属性的值&lt;/button&gt;

$(document).ready(function(){
    $(&quot;button&quot;).click(function(){
        alert($(&quot;#runoob&quot;).attr(&quot;href&quot;));
     });
});
</code></pre><p>2.设置属性：</p>
<pre><code>$(&quot;button&quot;).click(function(){
    $(&quot;img&quot;).attr(&quot;width&quot;,&quot;180&quot;);
});
</code></pre><p>3.设置多个属性：</p>
<pre><code>$(&quot;img&quot;).attr({width:&quot;50&quot;,height:&quot;80&quot;});
</code></pre><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><h5 id="append-amp-prepend"><a href="#append-amp-prepend" class="headerlink" title="append() &amp; prepend()"></a>append() &amp; prepend()</h5><p><code>append</code>是在被选元素的结尾(仍然在内部)插入内容;<code>prepend</code>是在被选元素的开头(仍然在内部)插入内容</p>
<pre><code>$(&quot;p&quot;).append(&quot; &lt;b&gt;Hello world!&lt;/b&gt;&quot;);
</code></pre><h5 id="after-amp-before"><a href="#after-amp-before" class="headerlink" title="after() &amp; before()"></a>after() &amp; before()</h5><p><code>after</code>在被选元素的之后插入内容;<code>before</code>在被选元素之前插入内容</p>
<pre><code>$(&quot;p&quot;).before(&quot;&lt;p&gt;Hello world!&lt;/p&gt;&quot;);
</code></pre><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><h5 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h5><p>删除被选元素及其子元素,该方法不会把匹配的元素从jQuery对象中删除，因而可以在将来再使用这些匹配的元素。</p>
<h5 id="empty"><a href="#empty" class="headerlink" title="empty()"></a>empty()</h5><p>从被选元素移除所有内容，包括所有文本和子节点:</p>
<pre><code>&lt;div id=&quot;div1&quot; style=&quot;height:100px;width:300px;border:1px solid black;background-color:yellow;&quot;&gt;这是 div 中的一些文本。
&lt;p&gt;这是在div中的一个段落。&lt;/p&gt;
&lt;p&gt;这是在div中的另外一个段落。&lt;/p&gt;
&lt;/div&gt;
&lt;button&gt;清空div元素&lt;/button&gt;

$(document).ready(function(){
    $(&quot;button&quot;).click(function(){
        $(&quot;#div1&quot;).empty();
    });
});
</code></pre><h3 id="clone"><a href="#clone" class="headerlink" title="clone()"></a>clone()</h3><p>生成被选元素的副本，包含子节点、文本和属性:</p>
<pre><code>&lt;p&gt;This is a paragraph.&lt;/p&gt;
&lt;button&gt;复制每个 p 元素，然后追加到 body 元素&lt;/button&gt;

$(&quot;button&quot;).click(function(){
    $(&quot;body&quot;).append($(&quot;p&quot;).clone());
});
</code></pre><h3 id="addClass-amp-removeClass-amp-toggleClass"><a href="#addClass-amp-removeClass-amp-toggleClass" class="headerlink" title="addClass() &amp; removeClass() &amp; toggleClass()"></a>addClass() &amp; removeClass() &amp; toggleClass()</h3><pre><code>&lt;div class=&quot;div1&quot;&gt;这是一些文本。&lt;/div&gt;
&lt;button&gt;为第一个div元素添加类&lt;/button&gt;

.blue{ color:blue; }
$(document).ready(function(){
    $(&quot;button&quot;).click(function(){
        $(&quot;#div1&quot;).addClass(&quot;blue&quot;);
    });
});
</code></pre><h3 id="CSS-方法"><a href="#CSS-方法" class="headerlink" title="CSS()方法"></a>CSS()方法</h3><p>设置css属性：</p>
<pre><code>$(&quot;p&quot;).css(&quot;background-color&quot;,&quot;yellow&quot;);
$(&quot;p&quot;).css(&quot;background-color&quot;,&quot;yellow&quot;,&quot;font-size&quot;,&quot;200%&quot;);
</code></pre><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><h3 id="祖先-向上遍历"><a href="#祖先-向上遍历" class="headerlink" title="祖先 (向上遍历)"></a>祖先 (向上遍历)</h3><p>1.parent() 返回被选元素的直接父元素，只会向上一级对DOM树进行遍历。</p>
<p>2.parsents() 从父元素开始，返回被选元素的所有祖先元素，它一路向上直到文档的根元素 (<html>)。返回包含零个、一个元素或多个元素的jquery对象。</html></p>
<p>3.closest() 从当前元素开始，获得匹配选择器的第一个祖先元素，从当前元素开始沿DOM树向上。返回包含零个或一个元素的jquery对象。（和.parents有点相似）</p>
<pre><code>$(&apos;li.item-a&apos;).closest(&apos;ul&apos;).css(&apos;background-color&apos;, &apos;red&apos;); //整个ul中的li元素颜色都会变红
</code></pre><p>4.parsentsUntil() 返回介于两个给定元素之间的所有祖先元素。</p>
<h3 id="后代-向下遍历"><a href="#后代-向下遍历" class="headerlink" title="后代 (向下遍历)"></a>后代 (向下遍历)</h3><p>1.children() 返回被选元素的所有直接子元素，该方法只会向<strong>下一级</strong>对DOM树进行遍历。</p>
<pre><code>$(&quot;div&quot;).children(&quot;.selected&quot;).css(&quot;color&quot;,&quot;blue&quot;);
</code></pre><p>2.find() 返回被选元素的后代元素，一路向下直到最后一个后代。</p>
<pre><code>`$(&apos;li.item-ii&apos;).find(&apos;li&apos;).css(&apos;background-color&apos;,&apos;red&apos;);`
</code></pre><p>也可以使用给定的jquery集合或元素来进行筛选：</p>
<pre><code>var $allListElements = $(&apos;li&apos;);
$(&apos;li.item-ii&apos;).find($allListElements).css(&apos;background-color&apos;,&apos;red&apos;);
</code></pre><p>3.contents() 获得匹配元素集合中每个元素的子节点，包括文本和注释节点。</p>
<pre><code>&lt;p&gt;Hello&lt;a href=&quot;#&quot;&gt;Apple&lt;/a&gt;,how are you doing?&lt;/p&gt;

&lt;script&gt;
    $(&quot;p&quot;).contents().filter(function(){ return this.nodeType != 1; }).wrap(&quot;&lt;b/&gt;&quot;);
&lt;/script&gt;
</code></pre><h3 id="同胞-水平遍历"><a href="#同胞-水平遍历" class="headerlink" title="同胞 (水平遍历)"></a>同胞 (水平遍历)</h3><p>1.siblings() 返回被选元素的所有同胞元素:</p>
<pre><code>$(&quot;p&quot;).siblings(&quot;.selected&quot;).css(&quot;background&quot;, &quot;yellow&quot;); //查找每个 p 元素的所有类名为 &quot;selected&quot; 的所有同胞元素：
</code></pre><p>2.next() 返回被选元素的下一个同胞元素</p>
<h3 id="过滤-缩小搜索元素的范围"><a href="#过滤-缩小搜索元素的范围" class="headerlink" title="过滤 (缩小搜索元素的范围)"></a>过滤 (缩小搜索元素的范围)</h3><p>1.first() 返回被选元素的首个元素。</p>
<p>2.last() 返回被选元素的最后一个元素。</p>
<p>3.eq() 返回被选元素中带有指定索引号的元素。</p>
<pre><code>.blue{ background-color:blue; }

$(&quot;body&quot;).find(&quot;div&quot;).eq(2).addClass(&quot;blue&quot;);
</code></pre><p>如果提供负数，则指示从集合结尾开始的位置，而不是从开头开始。</p>
<p>4.filter() 允许您规定一个标准。不匹配这个标准的元素会被从集合中删除，匹配的元素会被返回。</p>
<pre><code>&lt;div&gt;&lt;/div&gt;
&lt;div class=&quot;middle&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;middle&quot;&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;

&lt;script&gt;
  $(&quot;div&quot;).css(&quot;background&quot;, &quot;#c8ebcc&quot;)
    .filter(&quot;.middle&quot;)
    .css(&quot;border-color&quot;, &quot;red&quot;);
&lt;/script&gt;
</code></pre><p><img src="http://otqcthsfv.bkt.clouddn.com/filter.png" alt="filter"></p>
<p>5.not() 和filter()方法相反。</p>
<h3 id="others"><a href="#others" class="headerlink" title="others"></a>others</h3><p>1.add() 将元素添加到匹配元素的集合中:</p>
<pre><code>$(&quot;div&quot;).css(&quot;border&quot;, &quot;2px solid red&quot;)
    .add(&quot;p&quot;)
    .css(&quot;background&quot;, &quot;yellow&quot;);
</code></pre><p>2.each() 对jQuery对象进行迭代，为每个匹配元素执行函数。</p>
<pre><code>$(&quot;button).click(function(){
    $(&quot;li&quot;).each(function(){
        alert($(this).text())        
    });
});
</code></pre><p>3.end() 结束当前链条中的最近的筛选操作，并将匹配元素集还原为之前的状态。</p>
<pre><code>&lt;ul class=&quot;first&quot;&gt;
   &lt;li class=&quot;foo&quot;&gt;list item 1&lt;/li&gt;
   &lt;li&gt;list item 2&lt;/li&gt;
   &lt;li class=&quot;bar&quot;&gt;list item 3&lt;/li&gt;
&lt;/ul&gt;

$(&apos;ul.first&apos;).find(&apos;.foo&apos;).css(&apos;background-color&apos;, &apos;red&apos;)
  .end().find(&apos;.bar&apos;).css(&apos;background-color&apos;, &apos;green&apos;);
</code></pre><p><strong>说明</strong>: 这条命令链检索第一个列表中类名为foo的项目，并把它们的背景设置为红色。end()会将对象还原为调用find()之前的状态，所以第二个find()查找的是<code>&lt;ul class=&quot;first&quot;&gt;</code>内的<code>.bar&#39;</code>，而不是在列表的<code>&lt;li class=&quot;foo&quot;&gt;</code>中查找，并将匹配元素的背景设置为绿色。最后的结果是第一个列表中的项目1和项目3被设置了带颜色的背景，而第二个列表中的项目没有任何变化。</p>
<h2 id="DOM元素方法"><a href="#DOM元素方法" class="headerlink" title="DOM元素方法"></a>DOM元素方法</h2><h3 id="index"><a href="#index" class="headerlink" title="index()"></a>index()</h3><p>返回指定元素相对于其他指定元素的index位置：</p>
<pre><code>&lt;ul&gt;
    &lt;li&gt;Coffee&lt;/li&gt;
    &lt;li&gt;Milk&lt;/li&gt;
    &lt;li&gt;Soda&lt;/li&gt;
&lt;/ul&gt;

$(&quot;li&quot;).click(function(){
    alert($(this).index());
});
</code></pre><h3 id="toArray"><a href="#toArray" class="headerlink" title="toArray()"></a>toArray()</h3><p>以数组的形式返回jQuery选择器匹配的元素:</p>
<pre><code>x = $(&quot;li&quot;).toArray()
  for(i=0;i&lt;x.length;i++){
    alert(x[i].innerHTML);
  }
</code></pre><h3 id="size"><a href="#size" class="headerlink" title="size()"></a>size()</h3><p>返回被jQuery选择器匹配的元素的数量:</p>
<pre><code>$(document).ready(function(){
    alert($(&quot;li&quot;).size());
});  //输出结果：3
</code></pre><h3 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h3><p>获得由选择器指定的DOM元素:</p>
<pre><code>&lt;p&gt;This is a paragraph&lt;/p&gt;
&lt;button&gt;获得p DOM元素&lt;/button&gt;
&lt;div&gt;&lt;/div&gt;

$(&quot;button&quot;).click(function(){
    x = $(&quot;p&quot;).get(0);
    $(&quot;div&quot;).text(x.nodeName + &quot;: &quot; + x.innerHTML);
});  //输出结果：P: This is a paragraph
</code></pre><h2 id="AJAX！！"><a href="#AJAX！！" class="headerlink" title="AJAX！！"></a>AJAX！！</h2><p>AJAX 是与服务器交换数据的技术，通过后台加载数据，它在不重载全部页面的情况下，实现了对部分网页的更新。</p>
<h3 id="什么是AJAX"><a href="#什么是AJAX" class="headerlink" title="什么是AJAX?"></a>什么是AJAX?</h3><p>AJAX = 异步JavaScript和XML (Asynchronous JavaScript and XML)</p>
<h3 id="AJAX-load-方法"><a href="#AJAX-load-方法" class="headerlink" title="AJAX load()方法"></a>AJAX load()方法</h3><p>语法：<code>$(selector).load(URL,data,callback);</code></p>
<pre><code>&lt;div id=&quot;div1&quot;&gt;使用jquery AJAX修改文本内容&lt;/div&gt;
&lt;button&gt;获取外部内容&lt;/button&gt;

$(document).ready(function(){
    $(&quot;button&quot;).click(function(){
        $(&quot;#div1&quot;).load(&quot;/try/ajax/demo_test.txt&quot;);
    });  //此处的url是我引用过来的
});
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jQuery是一个JavaScript函数库，极大的简化了JavaScript编程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>使用HBuilder</title>
    <link href="http://yoursite.com/2017/07/26/%E4%BD%BF%E7%94%A8HBuilder/"/>
    <id>http://yoursite.com/2017/07/26/使用HBuilder/</id>
    <published>2017-07-25T16:03:21.000Z</published>
    <updated>2017-07-28T12:37:41.667Z</updated>
    
    <content type="html"><![CDATA[<p>HBuilder下载地址：<a href="http://www.dcloud.io/" target="_blank" rel="external">HBuilder官网</a></p>
<a id="more"></a>
<p>HBuilder是DCloud（数字天堂）推出的一款支持HTML5的Web开发IDE。HBuilder的编写用到了Java、C、Web和Ruby。HBuilder本身主体是由Java编写，它基于Eclipse，所以顺其自然地兼容了Eclipse的插件。</p>
<h2 id="HBuilder设置外部web服务器测试移动Web"><a href="#HBuilder设置外部web服务器测试移动Web" class="headerlink" title="HBuilder设置外部web服务器测试移动Web"></a>HBuilder设置外部web服务器测试移动Web</h2><h3 id="1-打开开发工具"><a href="#1-打开开发工具" class="headerlink" title="1.打开开发工具"></a>1.打开开发工具</h3><ol>
<li><p>工具右上角更改开发视图模式为“<strong>边改边看模式</strong>” </p>
</li>
<li><p>打开设置web服务器</p>
</li>
</ol>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/web%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="web服务器"></p>
<h3 id="2-设置外置服务器"><a href="#2-设置外置服务器" class="headerlink" title="2.设置外置服务器"></a>2.设置外置服务器</h3><ol>
<li><p>选择“外置Web服务器” ☞ 右边“新建”</p>
</li>
<li><p>编辑服务配置界面，“名称”随意，“浏览器运行URL”填写本机ip地址</p>
</li>
</ol>
<h3 id="3-查看IP地址并配置web服务器"><a href="#3-查看IP地址并配置web服务器" class="headerlink" title="3.查看IP地址并配置web服务器"></a>3.查看IP地址并配置web服务器</h3><p>1.地址查看方式：在命令行中输入<code>ipconfig</code>，找到<code>IPv4</code>的地址</p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/ipconfig.png" alt="ipconfig"></p>
<p>2.填写在URL中，如图所示（要在IP地址后面加上HBuilder使用的<strong>端口8020</strong>）：</p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="web服务器配置"></p>
<p>3.使用新建的myWeb外部服务器</p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="使用服务器"></p>
<h3 id="4-扫码测试"><a href="#4-扫码测试" class="headerlink" title="4.扫码测试"></a>4.扫码测试</h3><p>在“web浏览器”网址右边有一个<strong>二维码</strong>标志，点击，使用手机扫描测试</p>
<p><strong><em>注意：</em></strong> 扫码测试需要电脑和手机在同一个局域网下！！！</p>
<p>电脑运行：</p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/%E8%BF%90%E8%A1%8C1.png" alt="电脑运行结果"></p>
<p>手机扫码运行：</p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/%E6%89%8B%E6%9C%BA%E8%BF%90%E8%A1%8C.png" alt="手机运行结果"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HBuilder下载地址：&lt;a href=&quot;http://www.dcloud.io/&quot;&gt;HBuilder官网&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>学习Sass</title>
    <link href="http://yoursite.com/2017/07/25/%E5%AD%A6%E4%B9%A0Sass/"/>
    <id>http://yoursite.com/2017/07/25/学习Sass/</id>
    <published>2017-07-25T13:03:33.000Z</published>
    <updated>2017-07-25T13:42:04.134Z</updated>
    
    <content type="html"><![CDATA[<p>CSS 预处理器的主要目标：提供 CSS 缺失的样式层复用机制、减少冗余代码，提高样式代码的可维护性。这不是锦上添花，而恰恰是雪中送炭。</p>
<a id="more"></a>
<p>目前主流的三个<strong>预处理器</strong>：</p>
<ul>
<li>Less</li>
<li>Sass</li>
<li>Stylus</li>
</ul>
<h1 id="安装Sass"><a href="#安装Sass" class="headerlink" title="安装Sass"></a>安装Sass</h1><p><a href="http://rubyinstaller.org/downloads" target="_blank" rel="external">Ruby下载链接http://rubyinstaller.org/downloads</a></p>
<p>安装过程中请注意勾选 <code>Add Ruby executables to your PATH</code></p>
<p>安装完成后运行cmd输入<code>ruby -v</code>测试有没有安装成功。</p>
<p>若安装成功，使用<code>Ruby</code>自带的<code>RubyGems</code>系统安装Sass和Compass</p>
<pre><code>gem install sass
gem install compass
</code></pre><p>这样就安装好了！</p>
<p>如下sass常用更新、查看版本、sass命令帮助等命令：</p>
<pre><code>gem update sass
sass -v
sass -h
</code></pre><h1 id="编译Sass"><a href="#编译Sass" class="headerlink" title="编译Sass"></a>编译Sass</h1><p>Sass编译有很多种方式，如命令行编译模式、sublime插件<code>SASS-Build</code> 、编译软件<code>koala</code> 、前端自动化软件<code>codekit</code> 、Grunt打造前端自动化工作流<code>grunt-sass</code> 、Gulp打造前端自动化工作流<code>gulp-ruby-sass</code>等。</p>
<h2 id="命令行编译："><a href="#命令行编译：" class="headerlink" title="命令行编译："></a>命令行编译：</h2><pre><code>//单文件转换命令
sass input.scss output.css
//单文件监听命令
sass --watch input.scss:output.css
//如果你有很多的sass文件的目录，你也可以告诉sass监听整个目录：
sass --watch app/sass:public/stylesheets
</code></pre><h2 id="四种编译排版"><a href="#四种编译排版" class="headerlink" title="四种编译排版"></a>四种编译排版</h2><pre><code>//未编译样式
.box {
    width: 300px;
    height: 400px;
    &amp;-title {
        height: 30px;
        line-height: 30px;
    }
}
</code></pre><h3 id="nested-编译排版格式："><a href="#nested-编译排版格式：" class="headerlink" title="nested 编译排版格式："></a>nested 编译排版格式：</h3><pre><code>/*命令行内容*/
sass style.scss:style.css --style nested

/*编译过后样式*/
.box {
    width: 300px;
    height: 400px; }
    .box-title {
        height: 30px;
        line-height: 30px; }
</code></pre><h3 id="expanded-编译排版格式"><a href="#expanded-编译排版格式" class="headerlink" title="expanded 编译排版格式"></a>expanded 编译排版格式</h3><pre><code>/*命令行内容*/
sass style.scss:style.css --style expanded

/*编译过后样式*/
.box {
    width: 300px;
    height: 400px;
}   
.box-title {
    height: 30px;
    line-height: 30px;
}
</code></pre><h3 id="compact-编译排版格式"><a href="#compact-编译排版格式" class="headerlink" title="compact 编译排版格式"></a>compact 编译排版格式</h3><pre><code>/*命令行内容*/
sass style.scss:style.css --style compact

/*编译过后样式*/
.box { width: 300px; height: 400px; }
.box-title { height: 30px; line-height: 30px; }
</code></pre><h3 id="compressed-编译排版格式"><a href="#compressed-编译排版格式" class="headerlink" title="compressed 编译排版格式"></a>compressed 编译排版格式</h3><pre><code>/*命令行内容*/
sass style.scss:style.css --style compressed

/*编译过后样式*/
.box{width:300px;height:400px}.box-title{height:30px;line-height:30px}
</code></pre><h1 id="在webstrom中使用sass"><a href="#在webstrom中使用sass" class="headerlink" title="在webstrom中使用sass"></a>在webstrom中使用sass</h1><p>file ☛ settings  ☞ Tools  ☞ File Watchers  双击配置Sass</p>
<h1 id="嵌套CSS规则"><a href="#嵌套CSS规则" class="headerlink" title="嵌套CSS规则"></a>嵌套CSS规则</h1><p>sass文件:</p>
<pre><code>#content {
    article {
        h1 { color: #333 }
        p { margin-bottom: 1.4em }
    }
    aside { background-color: #EEE }
}
</code></pre><p>编译成css后：</p>
<pre><code>#content article h1 { color: #333 }
#content article p { margin-bottom: 1.4em }
#content aside { background-color: #EEE }
</code></pre><h2 id="父选择器的标识符-amp"><a href="#父选择器的标识符-amp" class="headerlink" title="父选择器的标识符&amp;"></a>父选择器的标识符&amp;</h2><pre><code>article a {
    color: blue;
    &amp;:hover { color: red }
}
</code></pre><p>当包含父选择器标识符的嵌套规则被打开时，他不会像后代选择器那样进行拼接，而是 &amp; 被父选择器直接替换：</p>
<pre><code>article a { color: blue; }
article a:hover { color: red }
</code></pre><h2 id="子组合选择器和同层组合选择器：-gt-、-和"><a href="#子组合选择器和同层组合选择器：-gt-、-和" class="headerlink" title="子组合选择器和同层组合选择器： &gt; 、 + 和 ~"></a>子组合选择器和同层组合选择器： &gt; 、 + 和 ~</h2><pre><code>article section { margin: 5px }
article &gt; section { border: 1px solid #ccc }
</code></pre><p>第一个选择器会选择article下的<strong>所有</strong>命中section选择器的元素。第二个选择器只会选择article下<strong>紧跟着的子元素</strong>中命中section选择器的元素。</p>
<pre><code>header + p { font-size: 1.1em }
</code></pre><p>在上例中，你可以用<strong>同层相邻组合选择器</strong> + 选择header元素后紧跟的p元素。</p>
<pre><code>article ~ article { border-top: 1px dashed #ccc }
</code></pre><p>你也可以用<strong>同层全体组合选择器</strong> ~ ，选择所有跟在article后的同层article元素，不管它们之间隔了多少其他元素。</p>
<p>例子：</p>
<pre><code>article {
    ~ article { border-top: 1px dashed #ccc }
    &gt; section { background: #eee }
    dl &gt; {
    dt { color: #333 }
    dd { color: #555 }
    }
    nav + &amp; { margin-top: 0 }
}    
</code></pre><p>sass解开组合之后：</p>
<pre><code>article ~ article { border-top: 1px dashed #ccc }
article &gt; footer { background: #eee }
article dl &gt; dt { color: #333 }
article dl &gt; dd { color: #555 }
nav + article { margin-top: 0 }
</code></pre><h2 id="嵌套属性"><a href="#嵌套属性" class="headerlink" title="嵌套属性"></a>嵌套属性</h2><p>重复编写<code>border-style</code>  <code>border-width</code>  <code>border-color</code>等非常烦人，所以在sass中，只要像以下这样书写就行：</p>
<pre><code>nav{
    border: {
    style: solid;
    width: 1px;
    color: #ccc;
    }
}
</code></pre><p><strong><em>规则：</em></strong> 把属性名从中划线-的地方断开，在根属性后边添加一个冒号:，紧跟一个{ }块，把子属性部分写在这个{ }块中。</p>
<p><strong><em>优点：</em></strong> 属性和选择器嵌套是非常伟大的特性，因为它们不仅大大减少了你的编写量，而且通过视觉上的缩进使你编写的样式结构更加清晰，更易于阅读和开发。</p>
<h1 id="导入Sass文件"><a href="#导入Sass文件" class="headerlink" title="导入Sass文件"></a>导入Sass文件</h1><p>随着你的样式表越来越多，我们要把大量样式分拆到多个文件中，使用 <strong>@import</strong> 规则。</p>
<h2 id="使用sass部分文件"><a href="#使用sass部分文件" class="headerlink" title="使用sass部分文件"></a>使用sass部分文件</h2><p>举例来说，你想导入 <code>themes/_night-sky.scss</code> 这个局部文件里的变量，你只需在样式表中写 <code>@import &quot;themes/night-sky&quot;;</code></p>
<h2 id="默认变量值"><a href="#默认变量值" class="headerlink" title="默认变量值;"></a>默认变量值;</h2><p>一般情况下，你反复声明一个变量，只有最后一处声明有效且它会覆盖前边的值。举例说明：</p>
<pre><code>$link-color: blue;
$link-color: red;
a {
    color: $link-color;
}
</code></pre><p>在上边的例子中，超链接的<code>color</code>会被设置为<code>red</code>。这可能并不是你想要的结果，假如你写了一个可被他人通过<code>@import</code>导入的sass库文件，你可能希望导入者可以定制修改sass库文件中的某些值。使用sass的<code>!default</code>标签可以实现这个目的。它很像css属性中<code>!important</code>标签的对立面，不同的是<code>!default</code>用于变量，含义是：如果这个变量被声明赋值了，那就用它声明的值，否则就用这个默认值。</p>
<pre><code>$fancybox-width: 400px !default;
.fancybox {
    width: $fancybox-width;
}
</code></pre><p>在上例中，如果用户在导入你的sass局部文件之前声明了一个<code>$fancybox-width</code>变量，那么你的局部文件中对<code>$fancybox-width</code>赋值<code>400px</code>的操作就无效。如果用户没有做这样的声明，则<code>$fancybox-width</code>将默认为<code>400px</code>。</p>
<h2 id="静默注释"><a href="#静默注释" class="headerlink" title="静默注释"></a>静默注释</h2><pre><code>body {
    color: #333;  // 这种注释内容不会出现在生成的css文件中
    padding: 0;  /* 这种注释内容会出现在生成的css文件中 */
}
</code></pre><h1 id="混合器"><a href="#混合器" class="headerlink" title="混合器"></a>混合器</h1><p>混合器使用 <code>@mixin</code> 标识符定义。</p>
<pre><code>@mixin rounded-corners {
    -moz-border-radius: 5px;
    -webkit-border-radius: 5px;
        border-radius: 5px;
}
</code></pre><p>然后就可以在样式表中通过 <code>@include</code> 来使用这个混合器。</p>
<pre><code>notice {
    background-color: green;
    border: 2px solid #00aa00;
    @include rounded-corners;
}
</code></pre><p>sass最终生成：</p>
<pre><code>.notice {
    background-color: green;
    border: 2px solid #00aa00;
    -moz-border-radius: 5px;
    -webkit-border-radius: 5px;
    border-radius: 5px;
}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS 预处理器的主要目标：提供 CSS 缺失的样式层复用机制、减少冗余代码，提高样式代码的可维护性。这不是锦上添花，而恰恰是雪中送炭。&lt;/p&gt;
    
    </summary>
    
    
      <category term="css预处理器" scheme="http://yoursite.com/tags/css%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 Web存储</title>
    <link href="http://yoursite.com/2017/07/24/HTML5-Web%E5%AD%98%E5%82%A8/"/>
    <id>http://yoursite.com/2017/07/24/HTML5-Web存储/</id>
    <published>2017-07-24T06:02:21.000Z</published>
    <updated>2017-07-24T16:17:06.046Z</updated>
    
    <content type="html"><![CDATA[<p>HTML5使用JavaScript来存储和访问数据，提供了两种在客户端存储数据的新方法：</p>
<a id="more"></a>
<ul>
<li>localStorage –没有时间限制的数据存储。第二天、第二周或下一年之后，数据依然可用。</li>
<li>sessionStorage –针对一个session的数据存储。当用户关闭浏览器窗口后，数据会被删除。</li>
</ul>
<h2 id="localStorage方法"><a href="#localStorage方法" class="headerlink" title="localStorage方法"></a>localStorage方法</h2><p>对用户访问页面的次数进行计数：</p>
<pre><code>&lt;script&gt;
    if (localStorage.pagecount) {
        localStorage.pagecount=Number(localStorage.pagecount) +1;
    } else {
        localStorage.pagecount=1;
    }
    document.write(&quot;Visits &quot;+ localStorage.pagecount + &quot; time(s).&quot;);
&lt;/script&gt;
</code></pre><h2 id="sessionStorage方法"><a href="#sessionStorage方法" class="headerlink" title="sessionStorage方法"></a>sessionStorage方法</h2><p>用户在当前 session 中访问页面的次数进行计数：</p>
<pre><code>&lt;script&gt;
    if(sessionStorage.pageCount){
        sessionStorage.pageCount = Number(sessionStorage.pageCount) +1;
     } else {
        sessionStorage.pageCount = 1;
    }
     document.write(&quot;visits: &quot; + sessionStorage.pageCount + &quot; 次&quot;);
&lt;/script&gt;
</code></pre><h2 id="如何工作"><a href="#如何工作" class="headerlink" title="如何工作?"></a>如何工作?</h2><p>早在1995,2010年，浏览器存储是利用cookie在浏览器上存储信息，但cookie仅限4k数据。</p>
<p>现如今的浏览器都很慷慨，都会提供5~10M（每个域）的存储空间。创建HTML5的本地存储时还充分考虑了Web应用（和移动应用）。所谓<strong>本地存储</strong>，就是指你的应用可以把数据存储在浏览器上，从而减少与服务器之间所需的通信。</p>
<h3 id="如何做到的？"><a href="#如何做到的？" class="headerlink" title="如何做到的？"></a>如何做到的？</h3><ol>
<li>使用这个API，页面可以在浏览器的本地存储中存储一个或多个键/值对；</li>
<li>然后用键来获取相应的值；</li>
</ol>
<p>键/值对，就是<code>key: &quot;pet&quot;</code>, <code>key</code>就是键，<code>pet</code>就是对。</p>
<h4 id="获取方法和设置方法-getItem和setItem"><a href="#获取方法和设置方法-getItem和setItem" class="headerlink" title="获取方法和设置方法(getItem和setItem)"></a>获取方法和设置方法(getItem和setItem)</h4><p><code>setItem</code>方法，用于存储某个数据，只能是string类型的数据项。</p>
<pre><code>localStorage.setItem(&quot;name&quot;,&quot;luya&quot;);
localStorage.setItem(&quot;age&quot;,21);
alert(localStorage.getItem(&quot;name&quot;));
//alert(parseInt(localStorage.getItem(&quot;age&quot;)));
//输出：luya
</code></pre><h4 id="看成一个关联数组"><a href="#看成一个关联数组" class="headerlink" title="看成一个关联数组"></a>看成一个关联数组</h4><pre><code>//为键赋值
localStorage[&quot;name&quot;] = &quot;luya&quot;;
//获取一个键存储的值,相当于getItem方法
var name = localStorage[&quot;name&quot;];
</code></pre><h3 id="另外两个特性"><a href="#另外两个特性" class="headerlink" title="另外两个特性"></a>另外两个特性</h3><p><code>length</code>属性，localStorage中有多少数据项；<code>key</code>方法，给出localStorage中各个数据项的键。</p>
<pre><code>for(var i=0;i&lt;localStorage.length;i++){
    var key = localStorage.key(i);
    var value = localStorage[key];
    alert(value);
}
</code></pre><h2 id="可以怎样使用？"><a href="#可以怎样使用？" class="headerlink" title="可以怎样使用？"></a>可以怎样使用？</h2><ul>
<li>在我的新Twitter客户端，为了提高效率，我要用localStorage把Twitter搜索结果缓存起来。用户搜索时，会先搜索本地结果。这对移动用户很有帮助。</li>
<li>用户存储播放列表（影片、音乐等）</li>
<li>使用sessionStorage实现购物车</li>
<li>有一个非常酷的游戏，他可以在两个不同的浏览器窗口同时工作，使用localStorage完成状态同步</li>
</ul>
<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><ul>
<li>JavaScript对象表示法（JavaScript Object Notation）</li>
<li>JSON是存储和交换文本信息的语法，类似XML；JSON比XML更小、更快、更易解析。</li>
</ul>
<p>JSON API只有两个方法：<code>stringify</code> 和 <code>parse</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTML5使用JavaScript来存储和访问数据，提供了两种在客户端存储数据的新方法：&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>JSP学习笔记</title>
    <link href="http://yoursite.com/2017/07/23/JSP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/07/23/JSP学习笔记/</id>
    <published>2017-07-23T14:19:34.000Z</published>
    <updated>2017-07-23T14:29:07.731Z</updated>
    
    <content type="html"><![CDATA[<p>JSP – Java Server Pages</p>
<a id="more"></a>
<h3 id="区别jsp和servlet"><a href="#区别jsp和servlet" class="headerlink" title="区别jsp和servlet"></a>区别jsp和servlet</h3><p>1.jsp就是在html里面写java代码，servlet就是在java里面写html代码。</p>
<p>2.servlet在java代码中通过HttpServletResponse对象动态输出HTML内容；jsp在静态HTML内容中嵌入Java代码，Java代码被动态执行后生成HTML内容。</p>
<p>3.两者通过MVC双剑合璧：MVC(Model-View-Controller)</p>
<ul>
<li>Controller(控制器) -负责转发请求，对请求进行处理</li>
<li>View(视图) -负责界面显示</li>
<li>Model(模型) -业务功能编写（例如算法实现）、数据库设计以及数据存取操作实现</li>
</ul>
<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>myeclipse,tomcat</p>
<h3 id="使用myeclipse"><a href="#使用myeclipse" class="headerlink" title="使用myeclipse"></a>使用myeclipse</h3><p>1.new – web project;</p>
<p>2.输入project name (imoocjsp);</p>
<p>3.打开imoocjsp 下的 Webroot 文件，双击index.jsp。删除<code>pageEncoding=&quot;ISO-8859-1&quot;</code>之后 使用 <code>alt+/</code> 选择<code>contentType</code>,将其中charset值改为<code>charset=utf-8</code>;(解决中文编码问题)</p>
<p>4.点击图中红色区域内图标，选择Project – imoocjsp – add – Server – tomcat7 –ok;</p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/eclipse1.PNG" alt=""></p>
<p>5.启动Tomcat服务器，在地址栏输入：localhost:8080/imoocjsp/index.jsp</p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/eclipse2.PNG" alt=""></p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/eclipse3.PNG" alt=""></p>
<h3 id="JSP指令"><a href="#JSP指令" class="headerlink" title="JSP指令"></a>JSP指令</h3><p>用来设置与整个JSP页面相关的属性。<br>语法：<code>&lt;%@ directive attribute=&quot;value&quot; %&gt;</code></p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/instruct.PNG" alt=""></p>
<ul>
<li>include<ul>
<li>指令: <code>&lt;%@ include file=&quot;url&quot; %&gt;</code></li>
<li>动作：<code>&lt;jsp:include page=&quot;url&quot; flush=&quot;true|false&quot; /&gt;</code> </li>
</ul>
</li>
<li>page(要包含的页面)；</li>
<li>flush(被包含的页面是否从缓冲区读取)</li>
</ul>
<h3 id="JSP注释"><a href="#JSP注释" class="headerlink" title="JSP注释"></a>JSP注释</h3><ul>
<li>HTML注释： <!-- html注释 -->  //客户端可见</li>
<li>JSP注释： &lt;%– html注释 –%&gt;  //客户端不可见</li>
<li>JSP脚本注释： //单行注释  / ** /多行注释</li>
</ul>
<h3 id="JSP脚本"><a href="#JSP脚本" class="headerlink" title="JSP脚本"></a>JSP脚本</h3><p>写在<code>&lt;% %&gt;</code> 中的叫做JSP脚本。</p>
<pre><code>&lt;%
out.println(&quot;大家好，JSP脚本&quot;);
%&gt;
</code></pre><h3 id="JSP声明"><a href="#JSP声明" class="headerlink" title="JSP声明"></a>JSP声明</h3><p>在JSP页面中定义变量或者方法。<br>语法：<code>&lt;%! JAVA代码 %&gt;</code></p>
<pre><code>&lt;%!
String s=&quot;张三&quot;; //声明了一个字符串变量
int add(int a,int b){  //声明了一个返回整型函数，实现两个整数的求和
    return a+b;
}
%&gt;
</code></pre><h3 id="JSP表达式"><a href="#JSP表达式" class="headerlink" title="JSP表达式"></a>JSP表达式</h3><p>语法：<code>&lt;%=表达式 %&gt;</code><br>注意：表达式不以分号结束</p>
<h3 id="做一个九九乘法表"><a href="#做一个九九乘法表" class="headerlink" title="做一个九九乘法表"></a>做一个九九乘法表</h3><pre><code>&lt;%!
String printMultiTable() {
String s=&quot;&quot;;
for(int i=1;i&lt;=9;i++) {
for(int j=1;j&lt;=i;j++) {
    s+=i+&quot;*&quot;+j+&quot;=&quot;+(i*j)+&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;;
    }
    s+=&quot;&lt;br&gt;&quot;;
}
return s;
}
%&gt;
&lt;h1&gt;九九乘法表&lt;/h1&gt;&lt;br&gt;
&lt;%=printMultiTable() %&gt;
</code></pre><h3 id="JSP内置对象"><a href="#JSP内置对象" class="headerlink" title="JSP内置对象"></a>JSP内置对象</h3><h4 id="out对象"><a href="#out对象" class="headerlink" title="out对象"></a>out对象</h4><ul>
<li>什么事缓冲区？</li>
</ul>
<p>Buffer,所谓缓冲区就是内存的一块区域来保存临时数据。</p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/out%E5%AF%B9%E8%B1%A1.PNG" alt=""></p>
<pre><code>&lt;%
out.println(&quot;&lt;h2&gt;静夜思&lt;/h2&gt;&quot;);
out.println(&quot;床前明月光&lt;br&gt;&quot;);
out.clear();
out.println(&quot;疑是地上霜&lt;br&gt;&quot;);
%&gt;
缓冲区大小：&lt;%=out.getBufferSize() %&gt;Byte&lt;br&gt;
缓冲区剩余大小：&lt;%=out.getRemaining() %&gt;&lt;br&gt;
缓冲区满时：&lt;%=out.isAutoFlush() %&gt;&lt;br&gt;
</code></pre><h4 id="get-post"><a href="#get-post" class="headerlink" title="get/post"></a>get/post</h4><p>method=”get/post”</p>
<ul>
<li><code>get</code>: 提交的数据最多不超过2KB，安全性较低但效率比post高。适合提交数据量不大。安全性不高的数据。比如：搜索、查询等功能。</li>
<li><p><code>post</code>: 将用户提交的信息封装在HTML HEADER内。适合提交数据量大，安全性高的用户信息。比如：注册、修改、上传等功能。</p>
  <form action="dologin.jsp" method="post"><br>      用户名:<input type="text" name="username"><br><br>      密码:<input type="password" name="password"><br><br>      <input type="submit" value="登录"><br>  </form>

</li>
</ul>
<h4 id="request-response"><a href="#request-response" class="headerlink" title="request/response"></a>request/response</h4><p><img src="http://ot4r4qnml.bkt.clouddn.com/request.PNG" alt=""></p>
<pre><code>//login.jsp:
&lt;form action=&quot;request.jsp&quot; method=&quot;post&quot;&gt;
    用户名:&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;br&gt;
    爱好:&lt;input type=&quot;checkbox&quot; name=&quot;favorite&quot; value=&quot;read&quot;&gt;读书
    &lt;input type=&quot;checkbox&quot; name=&quot;favorite&quot; value=&quot;music&quot;&gt;音乐
    &lt;input type=&quot;checkbox&quot; name=&quot;favorite&quot; value=&quot;movie&quot;&gt;电影
    &lt;input type=&quot;checkbox&quot; name=&quot;favorite&quot; value=&quot;internet&quot;&gt;上网
    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;
&lt;/form&gt;
&lt;a href=&quot;request.jsp?username=lisi&quot;&gt;测试URL传参数&lt;/a&gt;

//request.jsp:
&lt;%
request.setCharacterEncoding(&quot;utf-8&quot;); //解决中文乱码问题
%&gt;
用户：&lt;%=request.getParameter(&quot;username&quot;) %&gt;&lt;br/&gt;
爱好：&lt;%
    if(request.getParameterValues(&quot;favorite&quot;)!=null){
        String[] favorites=request.getParameterValues(&quot;favorite&quot;);
        for(int i=0;i&lt;favorites.length;i++){
            out.println(favorites[i]+&quot;&amp;nbsp;&amp;nbsp;&quot;);
         }
    }
    %&gt;
%&gt;
</code></pre><h4 id="session"><a href="#session" class="headerlink" title="session"></a>session</h4><h4 id="application"><a href="#application" class="headerlink" title="application"></a>application</h4><h4 id="page对象"><a href="#page对象" class="headerlink" title="page对象"></a>page对象</h4><h3 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h3><p>javabean是一种规范，而不是一种技术或工具。</p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/javabean.PNG" alt=""></p>
<h4 id="创建JavaBean"><a href="#创建JavaBean" class="headerlink" title="创建JavaBean"></a>创建JavaBean</h4><ol>
<li>新建一个Web Project –命名：JavaBeanDemo1 ；</li>
<li>新建一个package –命名：com.po ；</li>
<li>新建一个class –命名：Users ；</li>
<li><img src="http://ot4r4qnml.bkt.clouddn.com/JavaBeanDemo1-1.PNG" alt=""></li>
<li>右键 – <code>source</code> – <code>Generate getters and setters</code> – <code>Select All</code> –ok ；</li>
<li>双击index.jsp – 使用page指令 <code>&lt;%@ page import=&quot;com.po.Users&quot; %&gt;</code></li>
<li> <code>&lt;%
 Users user = new Users();
 user.setUsername(&quot;admin&quot;); //设置用户名
 user.setPassword(&quot;123456&quot;); //设置密码
 %&gt;
 用户名：&lt;%=user.getUsername() %&gt;&lt;br&gt;
 密码：&lt;%=user.getPassword() %&gt;&lt;br&gt;</code></li>
</ol>
<h4 id="JavaBean动作元素"><a href="#JavaBean动作元素" class="headerlink" title="JavaBean动作元素"></a>JavaBean动作元素</h4><ul>
<li><code>&lt;jsp:useBean id=&quot;myUsers&quot; class=&quot;com.po.Users&quot; scope=&quot;page&quot; /&gt;</code></li>
<li><code>&lt;jsp:setProperty name=&quot;myUsers&quot; property=&quot; * &quot;/&gt;</code></li>
<li><code>&lt;jsp:getProperty name=&quot;myUsers&quot; property=&quot; * &quot;/&gt;</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JSP – Java Server Pages&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>git学习笔记</title>
    <link href="http://yoursite.com/2017/07/22/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/07/22/git学习笔记/</id>
    <published>2017-07-22T02:52:20.000Z</published>
    <updated>2017-07-27T08:00:51.689Z</updated>
    
    <content type="html"><![CDATA[<p>Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.</p>
<a id="more"></a>
<h2 id="创建版本库-repository"><a href="#创建版本库-repository" class="headerlink" title="创建版本库(repository)"></a>创建版本库(repository)</h2><p>首先在合适的地方(我选择在github/Git/usr中)，创建一个空目录：</p>
<pre><code>$ mkdir learngit
$ cd learngit
$ pwd
/usr/learngit
</code></pre><p><code>pwd</code>命令用于显示当前目录</p>
<p>第二步，<strong><em>初始化仓库</em></strong>，在<code>Git/usr</code>中，输入命令 <code>git  init</code>, 这样瞬间Git就把仓库建好了，而且会告诉你是一个空的仓库，此时你会看到多了一个<code>.git</code>目录</p>
<p>如果你没有看到，那是因为这个目录被隐藏了，用<code>ls -ah</code>命令就可以看到。</p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/gitinit.PNG" alt="git init命令"></p>
<h2 id="把文件添加到版本库"><a href="#把文件添加到版本库" class="headerlink" title="把文件添加到版本库"></a>把文件添加到版本库</h2><p>先编写一个<code>readme.txt</code> 文件，内容如下</p>
<pre><code>Git is a version control system.
Git is free software.
</code></pre><p>第一步，把文件添加到仓库</p>
<pre><code>$ git add readme.txt
</code></pre><p>第二步，把文件提交到仓库</p>
<pre><code>$ git commit -m &quot;add readme.txt&quot;
</code></pre><h3 id="修改readme-txt文件"><a href="#修改readme-txt文件" class="headerlink" title="修改readme.txt文件"></a>修改readme.txt文件</h3><p>接着上面的内容，继续修改readme.txt文件，改成一下内容：</p>
<pre><code>Git is a distributed version control system.
Git is free software.
</code></pre><p>掌握仓库当前的状态：</p>
<pre><code>$ git status
</code></pre><p><img src="http://ot4r4qnml.bkt.clouddn.com/gitstatus.PNG" alt=""></p>
<p>上图告诉我们，readme.txt被修改过,但还没有准备提交的修改</p>
<p>如果说过了很久，你忘了自己修改了什么内容，那么使用下面的命令就可以知道了：</p>
<pre><code>$ git diff &quot;文件名&quot;
</code></pre><p>接下来使用之前的 <code>git add readme.txt</code> ,  <code>git commit -m &quot;add distributed&quot;</code></p>
<h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p>1.查看修改的历史记录(显示是从近到远)：</p>
<pre><code>$ git log
</code></pre><p><img src="http://ot4r4qnml.bkt.clouddn.com/gitlog.png" alt=""></p>
<p>也可以加上参数 <code>--pretty=oneline</code>让历史记录看起来更简单。</p>
<p>2.退回上一个版本：</p>
<pre><code>$ git reset --hard HEAD^
</code></pre><p><img src="http://ot4r4qnml.bkt.clouddn.com/gitreset.png" alt=""></p>
<p>3.可是这个时候又想回到之前的版本怎么办，别急，只要你的命令行窗口没关掉，就往上找到<code>append GPL</code> 的 <code>commit id</code>是 <code>ee0a0cff...</code>(版本号只要前几位就行，git会自动查找)</p>
<pre><code>$ git reset --hard ee0a0cff
</code></pre><p>那要是命令行窗口关掉了呢？不怕，还是有办法的！Git提供了一个命令 <code>git reflog</code> 用来记录你的每一次命令。</p>
<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><pre><code>$ git rm readme.txt
</code></pre><h2 id="上传到github完整过程-–添加远程库"><a href="#上传到github完整过程-–添加远程库" class="headerlink" title="上传到github完整过程 –添加远程库"></a>上传到github完整过程 –添加远程库</h2><pre><code>echo &quot;#DemoWebsite&quot; &gt;&gt; README.md
git init
git add README.md
git commit -m &quot;first commit&quot;
git remote add origin https://github.com/luyaJ/DemoWebsite.git
git push -u origin master
</code></pre><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="创建others分支，并切换到others分支"><a href="#创建others分支，并切换到others分支" class="headerlink" title="创建others分支，并切换到others分支"></a>创建<code>others</code>分支，并切换到<code>others</code>分支</h3><pre><code>$ git checkout -b others
</code></pre><p>相当于下面的命令：</p>
<pre><code>$ git branch others
$ git checkout others
</code></pre><h3 id="查看当前分支"><a href="#查看当前分支" class="headerlink" title="查看当前分支"></a>查看当前分支</h3><pre><code>$ git branch
</code></pre><h3 id="切换回master分支"><a href="#切换回master分支" class="headerlink" title="切换回master分支"></a>切换回<code>master</code>分支</h3><pre><code>$ git checkout master
</code></pre><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><pre><code>$ git merge others
</code></pre><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><p>分支用完合并后就可以随意删除了：</p>
<pre><code>$ git branch -D others
</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>创建空目录三步走：<code>mkdir 目录名字</code> ， <code>cd 目录名字</code> ， <code>pwd</code></li>
<li>初始化仓库：<code>git init</code></li>
<li>添加文件到仓库：<code>git add 文件名</code> </li>
<li><p>提交文件到仓库：<code>git commit -m “XXXX”</code><br>(注意每次修改，如果不<code>add</code>到暂存区，那就不会加入到 <code>commit</code>中)</p>
</li>
<li><p>掌握仓库当前的状态：<code>git status</code></p>
</li>
<li>查看文件修改内容： <code>git diff “文件名”</code></li>
<li>查看修改的历史记录: <code>git log</code></li>
<li>删除文件：<code>git rm 文件名</code></li>
</ol>
<p>最后附上<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰老师的Git教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>用css实现几个小图标</title>
    <link href="http://yoursite.com/2017/07/21/%E7%94%A8css%E5%AE%9E%E7%8E%B0%E5%87%A0%E4%B8%AA%E5%B0%8F%E5%9B%BE%E6%A0%87/"/>
    <id>http://yoursite.com/2017/07/21/用css实现几个小图标/</id>
    <published>2017-07-21T05:25:59.000Z</published>
    <updated>2017-07-21T10:00:22.548Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-三角形"><a href="#1-三角形" class="headerlink" title="1. 三角形"></a>1. 三角形</h3><a id="more"></a>
<p>设置一个块元素大小为0，采用<code>border</code>属性，制作如下各种图形：</p>
<pre><code>//1.双色正方形
height: 0;
width: 0;
border-bottom: 100px solid indianred;
border-left: 100px solid chocolate;
</code></pre><p><img src="http://otf35fo4u.bkt.clouddn.com/zfx.png" alt="双色正方形"></p>
<pre><code>//2.三色矩形
border-right: 100px solid darkcyan;
</code></pre><p><img src="http://otf35fo4u.bkt.clouddn.com/jx.png" alt="三色矩形"></p>
<pre><code>//3.四色正方形
border-top: 100px solid plum;
</code></pre><p><img src="http://otf35fo4u.bkt.clouddn.com/zfx1.png" alt="四色正方形"></p>
<pre><code>//4.三角形
height: 0;
width: 0;
border-bottom: 100px solid indianred;
border-left: 100px solid transparent;
border-right: 100px solid transparent;
</code></pre><p><img src="http://otf35fo4u.bkt.clouddn.com/sjx.png" alt="三角形"></p>
<h3 id="2-陌陌轮廓"><a href="#2-陌陌轮廓" class="headerlink" title="2.陌陌轮廓"></a>2.陌陌轮廓</h3><p>使用圆角属性制作~直接上代码</p>
<pre><code>height: 100px;
width: 100px;
background: darkgoldenrod;
border-radius: 50% 50% 0;
</code></pre><p><img src="http://otf35fo4u.bkt.clouddn.com/momo.png" alt="momo"></p>
<p>进一步拓展，制作成小水滴：</p>
<pre><code>height: 100px;
width: 100px;
background: sandybrown;
border-radius: 50% 50% 0;
transform: rotate(45deg);
</code></pre><h3 id="3-扭曲的正方形"><a href="#3-扭曲的正方形" class="headerlink" title="3.扭曲的正方形"></a>3.扭曲的正方形</h3><pre><code>height: 100px;
width: 100px;
background: mediumslateblue;
border-radius: 20px 12px 40px / 0.5em 3em;
</code></pre><p>其中的<code>border-radius: 2em 1em 4em / 0.5em 3em;</code>等价于：</p>
<pre><code>border-top-left-radius: 2em 0.5em;
border-top-right-radius: 1em 3em;
border-bottom-right-radius: 4em 0.5em;
border-bottom-left-radius: 1em 3em;
</code></pre><p><img src="http://otf35fo4u.bkt.clouddn.com/zgx2.png" alt="扭曲的正方形"></p>
<p><strong><em>注释:</em></strong> 如果省略 bottom-left，则与 top-right 相同。如果省略 bottom-right，则与 top-left 相同。如果省略 top-right，则与 top-left 相同。</p>
<h3 id="4-箭头"><a href="#4-箭头" class="headerlink" title="4.箭头"></a>4.箭头</h3><pre><code>.demo{
    width: 0;
    height: 0;
    border-top: 15px solid transparent;
    border-right: 15px solid red;
    -webkit-transform: rotate(10deg);
    -o-transform: rotate(10deg);
    -moz-transform: rotate(10deg);
    -ms-transform: rotate(10deg);
}
.demo:after{
    content: &quot;&quot;;
    position: absolute;
    border-top: 5px solid red;
    border-radius: 20px 0 0 0;
    top: -18px;
    left: -10px;
    width: 15px;
    height: 15px;
    -webkit-transform: rotate(45deg);
    -moz-transform: rotate(45deg);
    -ms-transform: rotate(45deg);
    -o-transform: rotate(45deg);
}
</code></pre><p><img src="http://otf35fo4u.bkt.clouddn.com/arrow.png" alt="arrow"></p>
<h3 id="5-小星星"><a href="#5-小星星" class="headerlink" title="5.小星星"></a>5.小星星</h3><p>思想：三个三角形拼接而成，使用<code>transform</code>调整方向。</p>
<pre><code>.star{
    margin: 100px 0;
    color: red;
    height: 0;
    width: 0;
    border-right: 100px solid transparent;
    border-bottom: 70px solid darkkhaki;
    border-left: 100px solid transparent;
    -webkit-transform: rotate(35deg);
    -o-transform: rotate(35deg);
    -moz-transform: rotate(35deg);
    -ms-transform: rotate(35deg);
}
.star:before{
    content: &apos;&apos;;
    height: 0;
    width: 0;
    border-bottom: 80px solid darkkhaki;
    border-left: 30px solid transparent;
    border-right: 30px solid transparent;
    position: absolute;
    top: -56px;
    left: -77px;
    -webkit-transform: rotate(-35deg);
    -moz-transform: rotate(-35deg);
    -ms-transform: rotate(-35deg);
    -o-transform: rotate(-35deg);
}
.star:after{
    content: &apos;&apos;;
    width: 0;
    height: 0;
    border-right: 100px solid transparent;
    border-bottom: 70px solid darkkhaki;
    border-left: 100px solid transparent;
    position: absolute;
    color: red;
    top: 10px;
    left: -115px;
    -webkit-transform: rotate(-70deg);
    -moz-transform: rotate(-70deg);
    -ms-transform: rotate(-70deg);
    -o-transform: rotate(-70deg);
}
</code></pre><p><img src="http://otf35fo4u.bkt.clouddn.com/star.png" alt="star">    </p>
<h3 id="6-心形"><a href="#6-心形" class="headerlink" title="6.心形"></a>6.心形</h3><pre><code>.heart{
    width: 100px;
    height: 90px;
}
.heart:before,
.heart:after {
    position: absolute;
    content: &apos;&apos;;
    width: 50px;
    height: 80px;
    background: darksalmon;
    border-radius: 50px 50px 0 0;
    left: 50px;
    -webkit-transform: rotate(-45deg);
    -o-transform: rotate(-45deg);
    -ms-transform: rotate(-45deg);
    -moz-transform: rotate(-45deg);
    transform: rotate(-45deg);
    -webkit-transform-origin: 0 100%;
    -moz-transform-origin: 0 100%;
    -ms-transform-origin: 0 100%;
    -o-transform-origin: 0 100%;
    transform-origin : 0 100%;
}
.heart:after{
    left: 0;
    -webkit-transform: rotate(45deg);
    -o-transform: rotate(45deg);
    -ms-transform: rotate(45deg);
    -moz-transform: rotate(45deg);
    transform: rotate(45deg);
    -webkit-transform-origin: 100% 100%;
    -moz-transform-origin: 100% 100%;
    -ms-transform-origin: 100% 100%;
    -o-transform-origin: 100% 100%;
    transform-origin :100% 100%;
}
</code></pre><p><img src="http://otf35fo4u.bkt.clouddn.com/heart.png" alt="heart">    </p>
<h3 id="7-十字架"><a href="#7-十字架" class="headerlink" title="7.十字架"></a>7.十字架</h3><pre><code>.cross{
    height: 100px;
    width: 20px;
    background: mediumseagreen;
    margin-left: 50px;
    position: relative;
}
.cross:after{
    background: mediumseagreen;
    content: &apos;&apos;;
    height: 20px;
    position: absolute;
    width: 80px;
    top: 30px;
    left: -30px;
}
</code></pre><p><img src="http://otf35fo4u.bkt.clouddn.com/cross.png" alt="cross"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-三角形&quot;&gt;&lt;a href=&quot;#1-三角形&quot; class=&quot;headerlink&quot; title=&quot;1. 三角形&quot;&gt;&lt;/a&gt;1. 三角形&lt;/h3&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Yilia主题优化</title>
    <link href="http://yoursite.com/2017/07/15/Yilia%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2017/07/15/Yilia主题优化/</id>
    <published>2017-07-15T09:56:56.000Z</published>
    <updated>2017-07-23T14:39:37.079Z</updated>
    
    <content type="html"><![CDATA[<p>过了大半年，该是要好好整理下自己的博客了。</p>
<a id="more"></a>
<h2 id="github-hexo"><a href="#github-hexo" class="headerlink" title="github+hexo"></a>github+hexo</h2><h3 id="新建文章："><a href="#新建文章：" class="headerlink" title="新建文章："></a>新建文章：</h3><pre><code>$ hexo new &quot;新的文章&quot;
</code></pre><p>然后你就发现blog根目录下的source文件夹中的_post文件夹中多了一个 <strong>新的文章.md</strong> 文件</p>
<h3 id="本地服务预览："><a href="#本地服务预览：" class="headerlink" title="本地服务预览："></a>本地服务预览：</h3><pre><code>$ hexo s  //server  （会监视文件变动并自动更新）
</code></pre><p>觉得自己的文章没问题后，就通过<code>hexo g</code> , <code>hexo d</code>生成和部署网页</p>
<h3 id="清除缓存："><a href="#清除缓存：" class="headerlink" title="清除缓存："></a>清除缓存：</h3><pre><code>$ hexo clean
</code></pre><h3 id="生成："><a href="#生成：" class="headerlink" title="生成："></a>生成：</h3><pre><code>$ hexo g  //generate
</code></pre><h3 id="部署："><a href="#部署：" class="headerlink" title="部署："></a>部署：</h3><pre><code>$ hexo d  //deploy
</code></pre><p>上面两部可以合起来</p>
<pre><code>$ hexo d -g
</code></pre><p><strong><a href="https://hexo.io/themes/" target="_blank" rel="external">hexo所有主题传送门</a></strong></p>
<p><strong><a href="https://maxiang.io/" target="_blank" rel="external">markdown语法</a></strong></p>
<p><strong><a href="http://www.markdownpad.com/" target="_blank" rel="external">markdownPad下载</a></strong></p>
<p>推荐几个我觉得不错的主题：</p>
<ul>
<li><a href="http://ochukai.me/" target="_blank" rel="external">Ochuuunn</a> /  <a href="https://github.com/ochukai/hexo-theme-ochuunn" target="_blank" rel="external">github下载</a></li>
<li><a href="http://hexo-theme-random.herokuapp.com/" target="_blank" rel="external">Random</a> / <a href="https://github.com/stiekel/hexo-theme-random" target="_blank" rel="external">github下载</a></li>
</ul>
<h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><pre><code>$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia
</code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>修改hexo根目录下的<code>_config.yml</code> ： <code>theme : yilia</code></p>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><pre><code>$ cd themes/yilia
$ git pull
</code></pre><p>上面是老东西，下面是优化</p>
<h2 id="添加文章目录"><a href="#添加文章目录" class="headerlink" title="添加文章目录"></a>添加文章目录</h2><h3 id="添加css样式"><a href="#添加css样式" class="headerlink" title="添加css样式"></a>添加css样式</h3><p>打开<code>themes\yilia\source</code>下的 <code>main.2d7529.css</code>文件(这里好像名字会不一样，没关系，找到.css文件就ok了)，在里面添加代码：</p>
<pre><code>/* 新添加的 */
#container .show-toc-btn,#container .toc-article{display:block}
.toc-article{z-index:100;background:#fff;border:1px solid #ccc;max-width:250px;min-width:150px;max-height:500px;overflow-y:auto;-webkit-box-shadow:5px 5px 2px #ccc;box-shadow:5px 5px 2px #ccc;font-size:12px;padding:10px;position:fixed;right:35px;top:129px}.toc-article .toc-close{font-weight:700;font-size:20px;cursor:pointer;float:right;color:#ccc}.toc-article .toc-close:hover{color:#000}.toc-article .toc{font-size:12px;padding:0;line-height:20px}.toc-article .toc .toc-number{color:#333}.toc-article .toc .toc-text:hover{text-decoration:underline;color:#2a6496}.toc-article li{list-style-type:none}.toc-article .toc-level-1{margin:4px 0}.toc-article .toc-child{}@-moz-keyframes cd-bounce-1{0%{opacity:0;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)}60%{opacity:1;-o-transform:scale(1.01);-webkit-transform:scale(1.01);-moz-transform:scale(1.01);-ms-transform:scale(1.01);transform:scale(1.01)}100%{-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)}}@-webkit-keyframes cd-bounce-1{0%{opacity:0;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)}60%{opacity:1;-o-transform:scale(1.01);-webkit-transform:scale(1.01);-moz-transform:scale(1.01);-ms-transform:scale(1.01);transform:scale(1.01)}100%{-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)}}@-o-keyframes cd-bounce-1{0%{opacity:0;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)}60%{opacity:1;-o-transform:scale(1.01);-webkit-transform:scale(1.01);-moz-transform:scale(1.01);-ms-transform:scale(1.01);transform:scale(1.01)}100%{-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)}}@keyframes cd-bounce-1{0%{opacity:0;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)}60%{opacity:1;-o-transform:scale(1.01);-webkit-transform:scale(1.01);-moz-transform:scale(1.01);-ms-transform:scale(1.01);transform:scale(1.01)}100%{-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)}}.show-toc-btn{display:none;z-index:10;width:30px;min-height:14px;overflow:hidden;padding:4px 6px 8px 5px;border:1px solid #ddd;border-right:none;position:fixed;right:40px;text-align:center;background-color:#f9f9f9}.show-toc-btn .btn-bg{margin-top:2px;display:block;width:16px;height:14px;background:url(http://7xtawy.com1.z0.glb.clouddn.com/show.png) no-repeat;-webkit-background-size:100%;-moz-background-size:100%;background-size:100%}.show-toc-btn .btn-text{color:#999;font-size:12px}.show-toc-btn:hover{cursor:pointer}.show-toc-btn:hover .btn-bg{background-position:0 -16px}.show-toc-btn:hover .btn-text{font-size:12px;color:#ea8010}
.toc-article li ol, .toc-article li ul { margin-left: 30px; } .toc-article ol, .toc-article ul { 
margin: 10px 0; }
</code></pre><h3 id="修改article-ejs文件"><a href="#修改article-ejs文件" class="headerlink" title="修改article.ejs文件"></a>修改article.ejs文件</h3><p>打开<code>themes\yilia\layout\_partial</code>文件夹下的<code>article.ejs</code>文件，在<code>&lt;/header&gt; &lt;% } %</code> 下面加入如下内容(注意插入的位置):</p>
<pre><code>&lt;!-- 目录内容 --&gt;
&lt;% if (!index &amp;&amp; post.toc){ %&gt;
&lt;p class=&quot;show-toc-btn&quot; id=&quot;show-toc-btn&quot; onclick=&quot;showToc();&quot; style=&quot;display:none&quot;&gt;
  &lt;span class=&quot;btn-bg&quot;&gt;&lt;/span&gt;
  &lt;span class=&quot;btn-text&quot;&gt;文章导航&lt;/span&gt;
&lt;/p&gt;
&lt;div id=&quot;toc-article&quot; class=&quot;toc-article&quot;&gt;
  &lt;span id=&quot;toc-close&quot; class=&quot;toc-close&quot; title=&quot;隐藏导航&quot; onclick=&quot;showBtn();&quot;&gt;×&lt;/span&gt;
  &lt;strong class=&quot;toc-title&quot;&gt;文章目录&lt;/strong&gt;
  &lt;%- toc(post.content) %&gt;
&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
  function showToc(){
    var toc_article = document.getElementById(&quot;toc-article&quot;);
    var show_toc_btn = document.getElementById(&quot;show-toc-btn&quot;);
    toc_article.setAttribute(&quot;style&quot;,&quot;display:block&quot;);
    show_toc_btn.setAttribute(&quot;style&quot;,&quot;display:none&quot;);
  };
  function showBtn(){
    var toc_article = document.getElementById(&quot;toc-article&quot;);
    var show_toc_btn = document.getElementById(&quot;show-toc-btn&quot;);
    toc_article.setAttribute(&quot;style&quot;,&quot;display:none&quot;);
    show_toc_btn.setAttribute(&quot;style&quot;,&quot;display:block&quot;);
  };
&lt;/script&gt;
&lt;% } %&gt;
&lt;!-- 目录内容结束 --&gt;
</code></pre><p><strong>如果想要文章显示目录，要在每篇文章的开头加入：<code>toc: true</code></strong></p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/catalogue.PNG" alt="目录效果图"></p>
<h2 id="添加其他一些东西"><a href="#添加其他一些东西" class="headerlink" title="添加其他一些东西"></a>添加其他一些东西</h2><h3 id="添加“关于”"><a href="#添加“关于”" class="headerlink" title="添加“关于”"></a>添加“关于”</h3><pre><code>$ hexo new page &quot;about&quot;
</code></pre><p>此时，<code>source</code>中就会多出一个文件夹，名为<code>about</code>,可以在里面编辑内容</p>
<p>在<code>themes/yilia/_config.yml</code>添加下面内容：</p>
<pre><code>menu:
    关于: /about
</code></pre><h3 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h3><pre><code>$ npm install hexo-generator-feed --save
</code></pre><p>注意完整的输入上面的代码，<code>--save</code>不能省，否则插件信息不能写入package.json，之后<code>hexo clean</code> 、<code>hexo g</code>,查看public文件夹，里面多了一个atom.xml文件夹表示成功。</p>
<h3 id="添加sitemap"><a href="#添加sitemap" class="headerlink" title="添加sitemap"></a>添加sitemap</h3><pre><code>$ npm install hexo-generator-sitemap --save
</code></pre><p><code>hexo clean</code> 、<code>hexo g</code>,查看public文件夹，可以看到sitemap.xml文件。</p>
<p>sitemap的初衷是给搜索引擎看的，为了提高搜索引擎对自己站点的收录效果，我们最好手动到google和百度等搜索引擎提交sitemap.xml。</p>
<h3 id="添加本站访问次数"><a href="#添加本站访问次数" class="headerlink" title="添加本站访问次数"></a>添加本站访问次数</h3><p>在<code>themes/yilia/layout/_partial</code> 下找到footer.ejs , 在里面加入以下代码：</p>
<pre><code>&lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;

&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;
    本文总阅读量&lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;次
&lt;/span&gt;
</code></pre><h3 id="文章模板"><a href="#文章模板" class="headerlink" title="文章模板"></a>文章模板</h3><p>打开hexo/scaffolds/post.md , 可以看到：</p>
<pre><code>---
title: {{ title }}
date: {{ date }}
tags:
---
</code></pre><p>做以下的修改，每次自动生成目录：</p>
<pre><code>---
title: {{ title }}
date: {{ date }}
tags:
toc: true
---
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;过了大半年，该是要好好整理下自己的博客了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo+github" scheme="http://yoursite.com/tags/hexo-github/"/>
    
  </entry>
  
  <entry>
    <title>JS几道小题</title>
    <link href="http://yoursite.com/2017/07/07/js%E5%87%A0%E9%81%93%E5%B0%8F%E9%A2%98/"/>
    <id>http://yoursite.com/2017/07/07/js几道小题/</id>
    <published>2017-07-07T12:16:39.462Z</published>
    <updated>2017-07-23T14:53:40.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2017-7-6日厦门实训js作业"><a href="#2017-7-6日厦门实训js作业" class="headerlink" title="2017.7.6日厦门实训js作业"></a>2017.7.6日厦门实训js作业</h2><h3 id="例题1：定义两个整数变量，交换两个变量的值"><a href="#例题1：定义两个整数变量，交换两个变量的值" class="headerlink" title="例题1：定义两个整数变量，交换两个变量的值"></a>例题1：定义两个整数变量，交换两个变量的值</h3><a id="more"></a>
<pre><code>&lt;script&gt;
    var a = prompt(&quot;请输入a的值&quot;);
    var b = prompt(&quot;请输入b的值&quot;);
    var t;

    t = a;   //t=2
    a = b;  //a=3
    b = t;  //b=2
    alert(&quot;交换后a的值：&quot; + a + &quot;,交换后b的值：&quot; + b);
&lt;/script&gt;
</code></pre><h3 id="例题２：定义三个整数变量，输出一次最大值"><a href="#例题２：定义三个整数变量，输出一次最大值" class="headerlink" title="例题２：定义三个整数变量，输出一次最大值"></a>例题２：定义三个整数变量，输出一次最大值</h3><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;
    var a = prompt(&quot;输入第一个数&quot;);
    var b = prompt(&quot;输入第二个数&quot;);
    var c = prompt(&quot;输入第三个数&quot;);
    var max;

    if(a&gt;=b){
        max = a;
    } else {
        max = b;
    }
    if(max&lt;c){
        max = c;
    }
    alert(&quot;最大的值是：&quot; + max);
&lt;/script&gt;
</code></pre><h3 id="例题3：输入三个数从小到大的输出"><a href="#例题3：输入三个数从小到大的输出" class="headerlink" title="例题3：输入三个数从小到大的输出"></a>例题3：输入三个数从小到大的输出</h3><pre><code>&lt;script&gt;
    var a = prompt(&quot;输入第一个数&quot;);
    var b = prompt(&quot;输入第二个数&quot;);
    var c = prompt(&quot;输入第三个数&quot;);
    var min,max,mid;

    if(a&gt;=b){
        if(b&gt;=c){
            max = a;mid = b;min = c;
        } else{
            max = a;mid = c;min = b;
        }
    } else{     //a&lt;b
        if(b&gt;=c){
            max = b;mid = a;min = c;
        } else{
            max = b;mid = c;min = a;
        }
    }
    if(max&lt;c){
        if(a&gt;=b){
            max = c;mid = a;min = b;
        } else{
            max = c;mid = b;min = a;
        }
    }
    alert(&quot;从小到大排序：&quot; + min + &quot;&lt;&quot; + mid +  &quot;&lt;&quot; + max);
&lt;/script&gt;
</code></pre><p>额….这个写的不是很好，傻瓜式…以后再说</p>
<h3 id="例题4：定义整数的成绩变量，按区间输出等级"><a href="#例题4：定义整数的成绩变量，按区间输出等级" class="headerlink" title="例题4：定义整数的成绩变量，按区间输出等级:"></a>例题4：定义整数的成绩变量，按区间输出等级:</h3><pre><code>&lt;script&gt;
    var score = prompt(&quot;输入成绩：&quot;);
    var sco = parseInt(score / 10);
    switch(sco){
        case 0 :
            alert(&quot;不及格！&quot;); break;
        case 1 :
            alert(&quot;不及格！&quot;); break;
        case 2 :
            alert(&quot;不及格！&quot;); break;
        case 3 :
            alert(&quot;不及格！&quot;); break;
        case 4 :
            alert(&quot;不及格！&quot;); break;
        case 5 :
            alert(&quot;不及格！&quot;); break;
        case 6:
            alert(&quot;D&quot;); break;
        case 7:
            alert(&quot;C&quot;); break;
        case 8:
            alert(&quot;B&quot;); break;
        case 9:
            alert(&quot;A&quot;); break;
        case 10:
            alert(&quot;A&quot;); break;
        default:
            alert(&quot;输入有误！&quot;); break;
    }
&lt;/script&gt;
</code></pre><h3 id="例题5：定义一个变量表示年份，判断是否是闰年"><a href="#例题5：定义一个变量表示年份，判断是否是闰年" class="headerlink" title="例题5：定义一个变量表示年份，判断是否是闰年"></a>例题5：定义一个变量表示年份，判断是否是闰年</h3><pre><code>&lt;script&gt;
    &lt;!--闰年的条件是:能被4整除,但是不能被100整除,或者能被四百整除--&gt;
        var year = prompt(&quot;输入一个年份：&quot;);

        if((year%4==0) &amp;&amp; (year%100!==0) || (year%400==0)) {
      alert(year+&quot;年是闰年&quot;);
        } else {
      alert(year+&quot;年是平年&quot;);
     }
&lt;/script&gt;
</code></pre><h3 id="例题6：输出100以内的质数"><a href="#例题6：输出100以内的质数" class="headerlink" title="例题6：输出100以内的质数"></a>例题6：输出100以内的质数</h3><pre><code>&lt;script&gt;
    //2,3,5,7,11,13,17,19,23...
    //只能被1和自己本身除
    for(var n=2;n&lt;=100;n++){
        for(var m=2;m&lt;n;m++){
            if(n%m == 0){
                break;   //跳出当前循环
            }
        }
        if(m&gt;=n){
            document.write( n + &quot;,&quot;);
        }
    }
 &lt;/script&gt;
</code></pre><h2 id="2017-7-7日厦门实训js作业-–循环语句"><a href="#2017-7-7日厦门实训js作业-–循环语句" class="headerlink" title="2017.7.7日厦门实训js作业 –循环语句"></a>2017.7.7日厦门实训js作业 –循环语句</h2><h3 id="例题1：输出乘法口诀表"><a href="#例题1：输出乘法口诀表" class="headerlink" title="例题1：输出乘法口诀表"></a>例题1：输出乘法口诀表</h3><pre><code>&lt;script&gt;
    var num;
    for(var i=1;i&lt;10;i++){
        for(var j=1;j&lt;10;j++){
            if(j&gt;i){
                break;
            } else {
                num = i*j;
                document.write(j + &quot;*&quot; + i + &quot;=&quot; + num + &quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;);
            }
        }
        document.write(&quot;&lt;br/&gt;&quot;);
    }
&lt;/script&gt;
</code></pre><h3 id="例题2：输出10行10列表格"><a href="#例题2：输出10行10列表格" class="headerlink" title="例题2：输出10行10列表格"></a>例题2：输出10行10列表格</h3><pre><code>&lt;button id=&quot;btn&quot;&gt;1.点击出现表格&lt;/button&gt;
&lt;table id=&quot;table&quot; cellspacing=&quot;0&quot; cellpadding=&quot;10&quot; border=&quot;1&quot;&gt;&lt;/table&gt;

&lt;script&gt;
window.onload = function() {
    var btn = document.getElementById(&quot;btn&quot;);
    btn.onclick = out;
    function out(){
        var table = document.getElementById(&quot;table&quot;);
        for(var j=1;j&lt;=10;j++){
            var tr = document.createElement(&quot;tr&quot;);
            for(var i=1;i&lt;=10;i++){
                var td = document.createElement(&quot;td&quot;);   //创建元素节点eleNode
                td.innerHTML = i;
                tr.appendChild(td);   //将元素节点td添加到tr中
             }
         table.appendChild(tr);
        }
     }
&lt;/script&gt;
</code></pre><p><strong><em>自己在作业的基础上拓展了一下：获取任意行列的表格并输出</em></strong></p>
<pre><code>请输入行数：&lt;input id=&quot;rows&quot; /&gt;&lt;br/&gt;&lt;br/&gt;
请输入列数：&lt;input id=&quot;cols&quot; /&gt;&lt;br/&gt;&lt;br/&gt;
&lt;button id=&quot;btn1&quot;&gt;2.点击出现你输入的表格&lt;/button&gt;&lt;br&gt;&lt;br/&gt;
&lt;table id=&quot;table1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;10&quot; border=&quot;1&quot;&gt;&lt;/table&gt;

&lt;script&gt;
    var btn1 = document.getElementById(&quot;btn1&quot;);
        btn1.onclick = out1;
        function out1(){
            var table1 = document.getElementById(&quot;table1&quot;);
            var rows = document.getElementById(&quot;rows&quot;).value;
            var cols = document.getElementById(&quot;cols&quot;).value;

            for(var j=1;j&lt;=cols;j++){
                var tr1 = document.createElement(&quot;tr&quot;);
                for(var i=1;i&lt;=rows;i++){
                    var td1 = document.createElement(&quot;td&quot;);
                    td1.innerHTML = i;
                    tr1.appendChild(td1);
                }
                table1.appendChild(tr1);
            }
        }
&lt;/script&gt;
</code></pre><h3 id="例题3：在上例表格中改变奇数行的背景"><a href="#例题3：在上例表格中改变奇数行的背景" class="headerlink" title="例题3：在上例表格中改变奇数行的背景"></a>例题3：在上例表格中改变奇数行的背景</h3><pre><code>&lt;button id=&quot;btn&quot;&gt;点击后奇数行有背景颜色&lt;/button&gt;
&lt;table id=&quot;table&quot; border=&quot;1&quot; cellpadding=&quot;10px&quot; cellspacing=&quot;0&quot;&gt;&lt;/table&gt;

&lt;script&gt;
    window.onload = function () {
        var btn = document.getElementById(&quot;btn&quot;);
        btn.onclick = out2;
        function out2() {
            var table = document.getElementById(&quot;table&quot;);
            for (var j = 1; j &lt;= 10; j++) {
                var tr = document.createElement(&quot;tr&quot;);
                if (j%2 != 0) {    //判断是否为奇数行
                    tr.style.backgroundColor = &quot;red&quot;;
                }
                for (var i = 1; i &lt;= 10; i++) {
                    var td = document.createElement(&quot;td&quot;);
                    td.innerHTML = i;
                    tr.appendChild(td);
                }
                table.appendChild(tr);
            }
        }
    }
&lt;/script&gt;
</code></pre><h3 id="例题4：输出序列1-1-2-3-5-8-13……-N个数"><a href="#例题4：输出序列1-1-2-3-5-8-13……-N个数" class="headerlink" title="例题4：输出序列1,1,2,3,5,8,13…… N个数"></a>例题4：输出序列1,1,2,3,5,8,13…… N个数</h3><pre><code>&lt;script&gt;
    var a=1;b=1;
    if(a=1){
        document.write(a + &quot; &quot;);
    }
    if(b=1){
        document.write(b + &quot; &quot;);
    }
   for(var n=0;n&lt;500;n++){
        n = a + b; //1+1=2 ;n=2 n=3 n=5
        a = b;    //a=1; a=1; a=2; a=3;
        b = n; //b=1 b=2; b=3; b=5;
       document.write(n + &quot; &quot;);
    }
&lt;/script&gt;
</code></pre><p>此段代码不够完善…待完善</p>
<h2 id="2017-7-10日厦门实训js作业"><a href="#2017-7-10日厦门实训js作业" class="headerlink" title="2017.7.10日厦门实训js作业"></a>2017.7.10日厦门实训js作业</h2><h3 id="例题1：动态的显示当前时间"><a href="#例题1：动态的显示当前时间" class="headerlink" title="例题1：动态的显示当前时间"></a>例题1：动态的显示当前时间</h3><pre><code>function startTime(){
    var today = new Date();
    var year = today.getFullYear();
    var month = today.getMonth() + 1;
    var day = today.getDate();
    var h = today.getHours();
    var m = today.getMinutes();
    var s = today.getSeconds();
    m = checkTime(m);
    s = checkTime(s);

    document.getElementById(&quot;time&quot;).innerHTML =&quot;现在是北京时间：&quot; + year + &quot;年&quot; + month + &quot;月&quot; + day + &quot;日&quot; + &quot; &quot; + h + &quot;:&quot; + m + &quot;:&quot; + s ;

    t = setTimeout(function(){startTime()},500);
}
function checkTime(i){
    if(i&lt;10){
         i = &quot;0&quot; + i;
     }
    return i;
     }

&lt;body onload=&quot;startTime()&quot;&gt;
    &lt;div id=&quot;time&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
</code></pre><h3 id="例题2：计算器实现加减乘除（最简单的）"><a href="#例题2：计算器实现加减乘除（最简单的）" class="headerlink" title="例题2：计算器实现加减乘除（最简单的）"></a>例题2：计算器实现加减乘除（最简单的）</h3><pre><code>数字1：&lt;input id=&quot;num1&quot;&gt;&lt;br/&gt;&lt;br/&gt;
数字2：&lt;input id=&quot;num2&quot;&gt;&lt;br/&gt;&lt;br/&gt;
&lt;button onclick=&quot;add()&quot;&gt;加法&lt;/button&gt;
&lt;button onclick=&quot;del()&quot;&gt;减法&lt;/button&gt;
&lt;button onclick=&quot;mul()&quot;&gt;乘法&lt;/button&gt;
&lt;button onclick=&quot;division()&quot;&gt;除法&lt;/button&gt;&lt;br/&gt;&lt;br/&gt;
结果为：&lt;input id=&quot;result&quot; value=&quot;&quot;&gt;

&lt;script&gt;
function add() {
    var num1 = document.getElementById(&quot;num1&quot;).value;
    var num2 = document.getElementById(&quot;num2&quot;).value;
    var result = parseFloat(num1) + parseFloat(num2);
    document.getElementById(&quot;result&quot;).value = result;
}
function del() {
    var num1 = document.getElementById(&quot;num1&quot;).value;
    var num2 = document.getElementById(&quot;num2&quot;).value;
    var result = parseFloat(num1) - parseFloat(num2);
    document.getElementById(&quot;result&quot;).value = result;
}
function mul() {
    var num1 = document.getElementById(&quot;num1&quot;).value;
    var num2 = document.getElementById(&quot;num2&quot;).value;
    var result = num1 * num2;
    document.getElementById(&quot;result&quot;).value = result;
}
function division() {
    var num1 = document.getElementById(&quot;num1&quot;).value;
    var num2 = document.getElementById(&quot;num2&quot;).value;
    var result = num1 / num2;
    document.getElementById(&quot;result&quot;).value = result;
}
&lt;/script&gt;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;2017-7-6日厦门实训js作业&quot;&gt;&lt;a href=&quot;#2017-7-6日厦门实训js作业&quot; class=&quot;headerlink&quot; title=&quot;2017.7.6日厦门实训js作业&quot;&gt;&lt;/a&gt;2017.7.6日厦门实训js作业&lt;/h2&gt;&lt;h3 id=&quot;例题1：定义两个整数变量，交换两个变量的值&quot;&gt;&lt;a href=&quot;#例题1：定义两个整数变量，交换两个变量的值&quot; class=&quot;headerlink&quot; title=&quot;例题1：定义两个整数变量，交换两个变量的值&quot;&gt;&lt;/a&gt;例题1：定义两个整数变量，交换两个变量的值&lt;/h3&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>软件测试初学</title>
    <link href="http://yoursite.com/2017/05/24/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%88%9D%E5%AD%A6/"/>
    <id>http://yoursite.com/2017/05/24/软件测试初学/</id>
    <published>2017-05-24T15:12:30.000Z</published>
    <updated>2017-07-23T15:20:44.204Z</updated>
    
    <content type="html"><![CDATA[<h2 id="软件缺陷常见问题"><a href="#软件缺陷常见问题" class="headerlink" title="软件缺陷常见问题"></a>软件缺陷常见问题</h2><a id="more"></a>
<h5 id="统一性"><a href="#统一性" class="headerlink" title="统一性"></a>统一性</h5><p>中英文问题</p>
<h5 id="容错性"><a href="#容错性" class="headerlink" title="容错性"></a>容错性</h5><h5 id="互动性"><a href="#互动性" class="headerlink" title="互动性"></a>互动性</h5><ul>
<li>用户输入信息有误时，按“确定”后，所有信息被清空(这种情况要避免)</li>
<li>对于所有的删除信息在删除之前都要给出是否删除确认的提示或者放弃的提示。</li>
<li>危险操作之前，提醒</li>
<li>改变数据状态，提醒</li>
<li>如填写资料有错误的时候，应该能够提示错误的位置，让用户知道到底是哪些地方输入的不正确</li>
</ul>
<h5 id="用户体验"><a href="#用户体验" class="headerlink" title="用户体验"></a>用户体验</h5><p>使用的提示信息要通俗易懂</p>
<h5 id="兼容性："><a href="#兼容性：" class="headerlink" title="兼容性："></a>兼容性：</h5><ul>
<li>操作系统版本</li>
<li>屏幕分辨率</li>
<li>网络类型(wifi,3G,4G)</li>
</ul>
<h5 id="易用性"><a href="#易用性" class="headerlink" title="易用性"></a>易用性</h5><p>对于要求用户大量录入信息的页面，要支持Tab键的输入，Tab键的走向要一般要遵循从做左到右，从上到下的的原则</p>
<h5 id="安全性："><a href="#安全性：" class="headerlink" title="安全性："></a>安全性：</h5><ul>
<li>登录网站进入其内部网页后，直接拷贝网址，然后粘贴到另一IE 窗口输入，在其他机器上看是否可以绕过登录直接访问</li>
<li>对于需要登录的系统，在用户不操作的一定时间内，出于安全性考虑，最好要让用户重新登录才能重新使用该系统</li>
<li>有些文件在ini等配置文件中写出了管理员口令密码等信息，而且是明文的!这是一个安全隐患</li>
</ul>
<p>！！！所有软件测试都是建立在业务之上的</p>
<h2 id="等价类"><a href="#等价类" class="headerlink" title="等价类"></a>等价类</h2><p>概念：是指把程序的输入域根据等价类原则划分成若干部分，然后从每个部分中选取少数具有代表性的数据作为测试输入数据的一种方法。</p>
<ol>
<li>有效等价类</li>
<li>无效等价类</li>
</ol>
<h2 id="Junit单元测试"><a href="#Junit单元测试" class="headerlink" title="Junit单元测试"></a>Junit单元测试</h2><p>测试用例不是用来证明你是对的，而是用来证明你没错。</p>
<h5 id="入门："><a href="#入门：" class="headerlink" title="入门："></a>入门：</h5><p>1.新建一个类：</p>
<p>File → Java Project : name (JUnit_Test) → 在src下new Package : name (JunitTest) → new class : name (Calculator) → 敲代码：</p>
<pre><code>package JunitTest;
public class Calculator {    
public int add(int a,int b){
    return a+b;
}
public int subtract(int a,int b){
    return a-b;
}
public int multiply(int a,int b){
    return a*b;
}
public int divide(int a,int b){
    return a/b;
}    
}
</code></pre><p>2.导入JUnit jar包：</p>
<p>JUnit_Test → Build Path → Add Libraries… → JUnit → Next&gt; → Finish</p>
<p>3.JunitTest → new : JUnit Test Case →输入测试工作区的名字 Name : (AddSubTest) , Class under test : name (Calculator) → Finish</p>
<p>4.运行测试用例：</p>
<p>右键 → Run AS → Junit Test → 结果显示，测试工作都运行通过</p>
<p><img src="http://ot4r4qnml.bkt.clouddn.com/1.PNG" alt=""></p>
<h4 id="第一个测试用例："><a href="#第一个测试用例：" class="headerlink" title="第一个测试用例："></a>第一个测试用例：</h4><p><img src="http://ot4r4qnml.bkt.clouddn.com/AddTest.PNG" alt=""><br><img src="http://ot4r4qnml.bkt.clouddn.com/AddTest2.PNG" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;软件缺陷常见问题&quot;&gt;&lt;a href=&quot;#软件缺陷常见问题&quot; class=&quot;headerlink&quot; title=&quot;软件缺陷常见问题&quot;&gt;&lt;/a&gt;软件缺陷常见问题&lt;/h2&gt;
    
    </summary>
    
    
      <category term="软件测试" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>JS实现轮播图</title>
    <link href="http://yoursite.com/2017/01/31/JS%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE/"/>
    <id>http://yoursite.com/2017/01/31/JS实现轮播图/</id>
    <published>2017-01-31T08:10:42.000Z</published>
    <updated>2017-07-23T14:51:19.487Z</updated>
    
    <content type="html"><![CDATA[<p> 这个轮播图是在2016年12月完成的，是我用js完成的第一个小东西。  </p>
<a id="more"></a>
<h3 id="html代码实现"><a href="#html代码实现" class="headerlink" title="html代码实现"></a>html代码实现</h3><pre><code>&lt;div id=&quot;content&quot;&gt;
    &lt;div id=&quot;images&quot; style=&quot;left: -600px;&quot;&gt; 
        &lt;img src=&quot;images/5.jpg&quot;&gt;
        &lt;img src=&quot;images/1.jpg&quot;&gt;
        &lt;img src=&quot;images/2.jpg&quot;&gt;
        &lt;img src=&quot;images/3.jpg&quot;&gt;
        &lt;img src=&quot;images/4.jpg&quot;&gt;
        &lt;img src=&quot;images/5.jpg&quot;&gt;
        &lt;img src=&quot;images/1.jpg&quot;&gt;
    &lt;/div&gt;
    &lt;div id=&quot;circle&quot;&gt;
        &lt;span class=&quot;on&quot; index=&quot;1&quot;&gt;&lt;/span&gt;
        &lt;span index=&quot;2&quot;&gt;&lt;/span&gt;
        &lt;span index=&quot;3&quot;&gt;&lt;/span&gt;
        &lt;span index=&quot;4&quot;&gt;&lt;/span&gt;
        &lt;span index=&quot;5&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
    &lt;div class=&quot;btn&quot; id=&quot;btn_l&quot;&gt;&amp;lt;&lt;/div&gt;
    &lt;div class=&quot;btn&quot; id=&quot;btn_r&quot;&gt;&amp;gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre><h3 id="css部分代码实现"><a href="#css部分代码实现" class="headerlink" title="css部分代码实现"></a>css部分代码实现</h3><p> 1.”content” 处设置相对位置：<code>position:relative</code>; 图片展示为只显示一张图片，所以溢出content容器部分使用属性：<code>overflow:hidden</code>;</p>
<p> 2.左、右按钮部分代码：</p>
<pre><code>position: relative;  
cursor: pointer;  //鼠标移上去，显示手指妆
height: 50px;
width: 30px;
background: rgba(0,0,0,0.3);
top: 50%;
font-size: 40px;
text-align: center;
line-height: 50px;
display: none;  //当鼠标移上去时，btn出现
color: #fff;
</code></pre><h3 id="javascript部分代码实现"><a href="#javascript部分代码实现" class="headerlink" title="javascript部分代码实现"></a>javascript部分代码实现</h3><h4 id="点击-lt-gt-按钮让图片左右移动"><a href="#点击-lt-gt-按钮让图片左右移动" class="headerlink" title="点击&lt; &gt;按钮让图片左右移动"></a>点击&lt; &gt;按钮让图片左右移动</h4><pre><code>function animate(offset){
    var newLeft = parseInt(images.style.left) + offset;
    images.style.left = newLeft + &apos;px&apos;;
    if (newLeft&lt;-3000) {
        images.style.left = -600 + &apos;px&apos;;
    }
    if (newLeft&gt;-600) {
        images.style.left = -3000 + &apos;px&apos;;
    }
}

btn_l.onclick=function(){
    animate(600);    
}

btn_r.onclick=function(){
    animate(-600);
}
</code></pre><p>if循环语句是实现图片无限循环；</p>
<p>这时，轮播图可以实现左右点击，图片相应变化的功能。</p>
<h4 id="设置轮播图的定时器"><a href="#设置轮播图的定时器" class="headerlink" title="设置轮播图的定时器"></a>设置轮播图的定时器</h4><pre><code>var timer;
function play(){
    timer = setInterval(function() {
        btn_r.onclick()
    },3000)    //每3000ms图片自动移动
}
play();
</code></pre><p>使用setIntervel()设置定时器。</p>
<h4 id="清除轮播图的定时器"><a href="#清除轮播图的定时器" class="headerlink" title="清除轮播图的定时器"></a>清除轮播图的定时器</h4><pre><code>function stop() {
    clearInterval(timer);
}
content.onmouseover = stop;
content.onmouseout = play;
</code></pre><p>图片自动移动时，当把鼠标悬停在content内时，图片暂停移动。</p>
<h4 id="小圆点随图片变化相应变化"><a href="#小圆点随图片变化相应变化" class="headerlink" title="小圆点随图片变化相应变化"></a>小圆点随图片变化相应变化</h4><pre><code>function showCircle(){
    for (var i=0;i&lt;circle.length;i++){
        if(circle[i].className==&apos;on&apos;){
            circle[i].className=&apos;&apos;;
        }
    }
    circle[index-1].className=&apos;on&apos;;
}
</code></pre><p>for循环用来清除之前circle的样式；</p>
<p>这时，点击&lt; &gt; 按钮小圆点会随图片相应点亮。</p>
<pre><code>for (var i=0;i&lt;circle.length;i++){
    circle[i].onclick=function(){
        var clickIndex=parseInt(this.getAttribute(&apos;index&apos;));
        var offset=600*(index-clickIndex);
        animate(offset);
        index=clickIndex;
        showCircle();       
    }
}
</code></pre><p>利用getAttribute(‘’)获取自定义index，之后</p>
<pre><code>btn_l.onclick=function(){
    index -= 1;
    if(index&lt;1){
        index=5;
    }
    showCircle();
    animate(600);    
}
btn_r.onclick=function(){
    index += 1;
    if(index&gt;5){
        index=1;
    }
    showCircle();
    animate(-600);
}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 这个轮播图是在2016年12月完成的，是我用js完成的第一个小东西。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>用github+hexo搭建博客</title>
    <link href="http://yoursite.com/2017/01/30/%E7%94%A8github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/01/30/用github-hexo搭建博客/</id>
    <published>2017-01-30T14:44:59.000Z</published>
    <updated>2017-07-23T14:45:43.388Z</updated>
    
    <content type="html"><![CDATA[<p>  2016年月底第一次正式开始搭建博客，在学长和另一个小伙伴的帮助下，我初次认识github+hexo，被它给吸引。寒假开始后，就在准备换主题，因为我对原始主题实在无爱，强迫症越来越严重的我，不换好主题坚持不做笔记（无奈脸）。刚刚换好主题的我，觉得之前自己用了好几个晚上都没有换好主题的自己简直是傻bi（给自己一个黑人问号），不过好在自己现在换好了主题，赶紧做笔记，谨防自己忘了。</p>
<a id="more"></a>
<h2 id="清除，生成，部署"><a href="#清除，生成，部署" class="headerlink" title="清除，生成，部署"></a>清除，生成，部署</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo clean  or(hexo c)</div><div class="line">$ hexo generate</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>谨记：每次更改了一些信息后都要用这三步进行部署</p>
<h2 id="安装yilia主题"><a href="#安装yilia主题" class="headerlink" title="安装yilia主题"></a>安装yilia主题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</div></pre></td></tr></table></figure>
<p>安装好后，在_config.yml下修改theme：landscape为theme：yilia</p>
<h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><ol>
<li>找到blog ☞ sources ☞ _post ☞ 写博客</li>
<li>博客开头格式(以下为例子)：<br><code>title: xxx</code><br><code>data: xxxx-xx-xx</code><br><code>tags: xxxx</code></li>
<li><p>如果文章较长，如果全都在主页显示，就会很累赘，浏览也不是很方便，那么就可以在每篇文章中加入<code>&lt;!--more--&gt;</code> </p>
</li>
<li><p>文章写好直接执行下面命令即可直接发布文章<br><code>$ hexo d -g</code></p>
</li>
</ol>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>1.常用命令：</p>
<p>hexo new “post name” （新建文章）</p>
<p>hexo help （查看帮助）</p>
<p>hexo version （查看hexo的版本）</p>
<p>2.Markdown语法参考链接： <a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">链接</a></p>
<p>● <a href="http://litten.me/2014/08/31/hexo-theme-yilia/" target="_blank" rel="external">Hexo主题Yilia</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  2016年月底第一次正式开始搭建博客，在学长和另一个小伙伴的帮助下，我初次认识github+hexo，被它给吸引。寒假开始后，就在准备换主题，因为我对原始主题实在无爱，强迫症越来越严重的我，不换好主题坚持不做笔记（无奈脸）。刚刚换好主题的我，觉得之前自己用了好几个晚上都没有换好主题的自己简直是傻bi（给自己一个黑人问号），不过好在自己现在换好了主题，赶紧做笔记，谨防自己忘了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo+github" scheme="http://yoursite.com/tags/hexo-github/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/12/27/hello-world/"/>
    <id>http://yoursite.com/2016/12/27/hello-world/</id>
    <published>2016-12-27T10:23:59.706Z</published>
    <updated>2017-07-21T10:03:23.691Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo+github" scheme="http://yoursite.com/tags/hexo-github/"/>
    
  </entry>
  
</feed>
