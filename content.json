[{"title":"HTML5 Web存储","date":"2017-07-24T06:02:21.000Z","path":"2017/07/24/HTML5-Web存储/","text":"HTML5使用JavaScript来存储和访问数据，提供了两种在客户端存储数据的新方法： localStorage –没有时间限制的数据存储。第二天、第二周或下一年之后，数据依然可用。 sessionStorage –针对一个session的数据存储。当用户关闭浏览器窗口后，数据会被删除。 localStorage方法对用户访问页面的次数进行计数： &lt;script&gt; if (localStorage.pagecount) { localStorage.pagecount=Number(localStorage.pagecount) +1; } else { localStorage.pagecount=1; } document.write(&quot;Visits &quot;+ localStorage.pagecount + &quot; time(s).&quot;); &lt;/script&gt; sessionStorage方法用户在当前 session 中访问页面的次数进行计数： &lt;script&gt; if(sessionStorage.pageCount){ sessionStorage.pageCount = Number(sessionStorage.pageCount) +1; } else { sessionStorage.pageCount = 1; } document.write(&quot;visits: &quot; + sessionStorage.pageCount + &quot; 次&quot;); &lt;/script&gt; 如何工作早在1995,2010年，浏览器存储是利用cookie在浏览器上存储信息，但cookie仅限4k数据。 现如今的浏览器都很慷慨，都会提供5~10M（每个域）的存储空间。创建HTML5的本地存储时还充分考虑了Web应用（和移动应用）。所谓本地存储，就是指你的应用可以把数据存储在浏览器上，从而减少与服务器之间所需的通信。 如何做到的？ 使用这个API，页面可以在浏览器的本地存储中存储一个或多个键/值对； 然后用键来获取相应的值； 键/值对，就是key: &quot;pet&quot;, key就是键，pet就是对。 获取方法和设置方法(getItem和setItem)setItem方法，用于存储某个数据，只能是string类型的数据项。 localStorage.setItem(&quot;name&quot;,&quot;luya&quot;); localStorage.setItem(&quot;age&quot;,21); alert(localStorage.getItem(&quot;name&quot;)); //alert(parseInt(localStorage.getItem(&quot;age&quot;))); //输出：luya 看成一个关联数组//为键赋值 localStorage[&quot;name&quot;] = &quot;luya&quot;; //获取一个键存储的值,相当于getItem方法 var name = localStorage[&quot;name&quot;]; 另外两个特性length属性，localStorage中有多少数据项；key方法，给出localStorage中各个数据项的键。 for(var i=0;i&lt;localStorage.length;i++){ var key = localStorage.key(i); var value = localStorage[key]; alert(value); } JSON JavaScript对象表示法（JavaScript Object Notation） JSON是存储和交换文本信息的语法，类似XML；JSON比XML更小、更快、更易解析。 JSON API只有两个方法：stringify 和 parse","tags":[{"name":"HTML5","slug":"HTML5","permalink":"http://yoursite.com/tags/HTML5/"}]},{"title":"JSP学习笔记","date":"2017-07-23T14:19:34.000Z","path":"2017/07/23/JSP学习笔记/","text":"JSP – Java Server Pages 区别jsp和servlet1.jsp就是在html里面写java代码，servlet就是在java里面写html代码。 2.servlet在java代码中通过HttpServletResponse对象动态输出HTML内容；jsp在静态HTML内容中嵌入Java代码，Java代码被动态执行后生成HTML内容。 3.两者通过MVC双剑合璧：MVC(Model-View-Controller) Controller(控制器) -负责转发请求，对请求进行处理 View(视图) -负责界面显示 Model(模型) -业务功能编写（例如算法实现）、数据库设计以及数据存取操作实现 工具myeclipse,tomcat 使用myeclipse1.new – web project; 2.输入project name (imoocjsp); 3.打开imoocjsp 下的 Webroot 文件，双击index.jsp。删除pageEncoding=&quot;ISO-8859-1&quot;之后 使用 alt+/ 选择contentType,将其中charset值改为charset=utf-8;(解决中文编码问题) 4.点击图中红色区域内图标，选择Project – imoocjsp – add – Server – tomcat7 –ok; 5.启动Tomcat服务器，在地址栏输入：localhost:8080/imoocjsp/index.jsp JSP指令用来设置与整个JSP页面相关的属性。语法：&lt;%@ directive attribute=&quot;value&quot; %&gt; include 指令: &lt;%@ include file=&quot;url&quot; %&gt; 动作：&lt;jsp:include page=&quot;url&quot; flush=&quot;true|false&quot; /&gt; page(要包含的页面)； flush(被包含的页面是否从缓冲区读取) JSP注释 HTML注释： //客户端可见 JSP注释： &lt;%– html注释 –%&gt; //客户端不可见 JSP脚本注释： //单行注释 / ** /多行注释 JSP脚本写在&lt;% %&gt; 中的叫做JSP脚本。 &lt;% out.println(&quot;大家好，JSP脚本&quot;); %&gt; JSP声明在JSP页面中定义变量或者方法。语法：&lt;%! JAVA代码 %&gt; &lt;%! String s=&quot;张三&quot;; //声明了一个字符串变量 int add(int a,int b){ //声明了一个返回整型函数，实现两个整数的求和 return a+b; } %&gt; JSP表达式语法：&lt;%=表达式 %&gt;注意：表达式不以分号结束 做一个九九乘法表&lt;%! String printMultiTable() { String s=&quot;&quot;; for(int i=1;i&lt;=9;i++) { for(int j=1;j&lt;=i;j++) { s+=i+&quot;*&quot;+j+&quot;=&quot;+(i*j)+&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;; } s+=&quot;&lt;br&gt;&quot;; } return s; } %&gt; &lt;h1&gt;九九乘法表&lt;/h1&gt;&lt;br&gt; &lt;%=printMultiTable() %&gt; JSP内置对象out对象 什么事缓冲区？ Buffer,所谓缓冲区就是内存的一块区域来保存临时数据。 &lt;% out.println(&quot;&lt;h2&gt;静夜思&lt;/h2&gt;&quot;); out.println(&quot;床前明月光&lt;br&gt;&quot;); out.clear(); out.println(&quot;疑是地上霜&lt;br&gt;&quot;); %&gt; 缓冲区大小：&lt;%=out.getBufferSize() %&gt;Byte&lt;br&gt; 缓冲区剩余大小：&lt;%=out.getRemaining() %&gt;&lt;br&gt; 缓冲区满时：&lt;%=out.isAutoFlush() %&gt;&lt;br&gt; get/postmethod=”get/post” get: 提交的数据最多不超过2KB，安全性较低但效率比post高。适合提交数据量不大。安全性不高的数据。比如：搜索、查询等功能。 post: 将用户提交的信息封装在HTML HEADER内。适合提交数据量大，安全性高的用户信息。比如：注册、修改、上传等功能。 用户名: 密码: request/response //login.jsp: &lt;form action=&quot;request.jsp&quot; method=&quot;post&quot;&gt; 用户名:&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;br&gt; 爱好:&lt;input type=&quot;checkbox&quot; name=&quot;favorite&quot; value=&quot;read&quot;&gt;读书 &lt;input type=&quot;checkbox&quot; name=&quot;favorite&quot; value=&quot;music&quot;&gt;音乐 &lt;input type=&quot;checkbox&quot; name=&quot;favorite&quot; value=&quot;movie&quot;&gt;电影 &lt;input type=&quot;checkbox&quot; name=&quot;favorite&quot; value=&quot;internet&quot;&gt;上网 &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt; &lt;/form&gt; &lt;a href=&quot;request.jsp?username=lisi&quot;&gt;测试URL传参数&lt;/a&gt; //request.jsp: &lt;% request.setCharacterEncoding(&quot;utf-8&quot;); //解决中文乱码问题 %&gt; 用户：&lt;%=request.getParameter(&quot;username&quot;) %&gt;&lt;br/&gt; 爱好：&lt;% if(request.getParameterValues(&quot;favorite&quot;)!=null){ String[] favorites=request.getParameterValues(&quot;favorite&quot;); for(int i=0;i&lt;favorites.length;i++){ out.println(favorites[i]+&quot;&amp;nbsp;&amp;nbsp;&quot;); } } %&gt; %&gt; sessionapplicationpage对象JavaBeanjavabean是一种规范，而不是一种技术或工具。 创建JavaBean 新建一个Web Project –命名：JavaBeanDemo1 ； 新建一个package –命名：com.po ； 新建一个class –命名：Users ； 右键 – source – Generate getters and setters – Select All –ok ； 双击index.jsp – 使用page指令 &lt;%@ page import=&quot;com.po.Users&quot; %&gt; &lt;% Users user = new Users(); user.setUsername(&quot;admin&quot;); //设置用户名 user.setPassword(&quot;123456&quot;); //设置密码 %&gt; 用户名：&lt;%=user.getUsername() %&gt;&lt;br&gt; 密码：&lt;%=user.getPassword() %&gt;&lt;br&gt; JavaBean动作元素 &lt;jsp:useBean id=&quot;myUsers&quot; class=&quot;com.po.Users&quot; scope=&quot;page&quot; /&gt; &lt;jsp:setProperty name=&quot;myUsers&quot; property=&quot; * &quot;/&gt; &lt;jsp:getProperty name=&quot;myUsers&quot; property=&quot; * &quot;/&gt;","tags":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"http://yoursite.com/tags/JavaWeb/"}]},{"title":"git学习笔记","date":"2017-07-22T02:52:20.000Z","path":"2017/07/22/git学习笔记/","text":"Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. 创建版本库(repository)首先在合适的地方(我选择在github/Git/usr中)，创建一个空目录： $ mkdir learngit $ cd learngit $ pwd /usr/learngit pwd命令用于显示当前目录 第二步，初始化仓库，在Git/usr中，输入命令 git init, 这样瞬间Git就把仓库建好了，而且会告诉你是一个空的仓库，此时你会看到多了一个.git目录 如果你没有看到，那是因为这个目录被隐藏了，用ls -ah命令就可以看到。 把文件添加到版本库先编写一个readme.txt 文件，内容如下 Git is a version control system. Git is free software. 第一步，把文件添加到仓库 $ git add readme.txt 第二步，把文件提交到仓库 $ git commit -m &quot;add readme.txt&quot; 修改readme.txt文件接着上面的内容，继续修改readme.txt文件，改成一下内容： Git is a distributed version control system. Git is free software. 掌握仓库当前的状态： $ git status 上图告诉我们，readme.txt被修改过,但还没有准备提交的修改 如果说过了很久，你忘了自己修改了什么内容，那么使用下面的命令就可以知道了： $ git diff &quot;文件名&quot; 接下来使用之前的 git add readme.txt , git commit -m &quot;add distributed&quot; 版本回退1.查看修改的历史记录(显示是从近到远)： $ git log 也可以加上参数 --pretty=oneline让历史记录看起来更简单。 2.退回上一个版本： $ git reset --hard HEAD^ 3.可是这个时候又想回到之前的版本怎么办，别急，只要你的命令行窗口没关掉，就往上找到append GPL 的 commit id是 ee0a0cff...(版本号只要前几位就行，git会自动查找) $ git reset --hard ee0a0cff 那要是命令行窗口关掉了呢？不怕，还是有办法的！Git提供了一个命令 git reflog 用来记录你的每一次命令。 删除文件$ git rm readme.txt 上传到github完整过程 –添加远程库echo &quot;#DemoWebsite&quot; &gt;&gt; README.md git init git add README.md git commit -m &quot;first commit&quot; git remote add origin https://github.com/luyaJ/DemoWebsite.git git push -u origin master 分支管理创建others分支，并切换到others分支$ git checkout -b others 相当于下面的命令： $ git branch others $ git checkout others 查看当前分支$ git branch 切换回master分支$ git checkout master 合并分支$ git merge others 删除分支分支用完合并后就可以随意删除了： $ git branch -d others 总结 创建空目录三步走：mkdir 目录名字 ， cd 目录名字 ， pwd 初始化仓库：git init 添加文件到仓库：git add 文件名 提交文件到仓库：git commit -m “XXXX”(注意每次修改，如果不add到暂存区，那就不会加入到 commit中) 掌握仓库当前的状态：git status 查看文件修改内容： git diff “文件名” 查看修改的历史记录: git log 删除文件：git rm 文件名 最后附上廖雪峰老师的Git教程","tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"}]},{"title":"用css实现几个小图标","date":"2017-07-21T05:25:59.000Z","path":"2017/07/21/用css实现几个小图标/","text":"1. 三角形 设置一个块元素大小为0，采用border属性，制作如下各种图形： //1.双色正方形 height: 0; width: 0; border-bottom: 100px solid indianred; border-left: 100px solid chocolate; //2.三色矩形 border-right: 100px solid darkcyan; //3.四色正方形 border-top: 100px solid plum; //4.三角形 height: 0; width: 0; border-bottom: 100px solid indianred; border-left: 100px solid transparent; border-right: 100px solid transparent; 2.陌陌轮廓使用圆角属性制作~直接上代码 height: 100px; width: 100px; background: darkgoldenrod; border-radius: 50% 50% 0; 进一步拓展，制作成小水滴： height: 100px; width: 100px; background: sandybrown; border-radius: 50% 50% 0; transform: rotate(45deg); 3.扭曲的正方形height: 100px; width: 100px; background: mediumslateblue; border-radius: 20px 12px 40px / 0.5em 3em; 其中的border-radius: 2em 1em 4em / 0.5em 3em;等价于： border-top-left-radius: 2em 0.5em; border-top-right-radius: 1em 3em; border-bottom-right-radius: 4em 0.5em; border-bottom-left-radius: 1em 3em; 注释: 如果省略 bottom-left，则与 top-right 相同。如果省略 bottom-right，则与 top-left 相同。如果省略 top-right，则与 top-left 相同。 4.箭头.demo{ width: 0; height: 0; border-top: 15px solid transparent; border-right: 15px solid red; -webkit-transform: rotate(10deg); -o-transform: rotate(10deg); -moz-transform: rotate(10deg); -ms-transform: rotate(10deg); } .demo:after{ content: &quot;&quot;; position: absolute; border-top: 5px solid red; border-radius: 20px 0 0 0; top: -18px; left: -10px; width: 15px; height: 15px; -webkit-transform: rotate(45deg); -moz-transform: rotate(45deg); -ms-transform: rotate(45deg); -o-transform: rotate(45deg); } 5.小星星思想：三个三角形拼接而成，使用transform调整方向。 .star{ margin: 100px 0; color: red; height: 0; width: 0; border-right: 100px solid transparent; border-bottom: 70px solid darkkhaki; border-left: 100px solid transparent; -webkit-transform: rotate(35deg); -o-transform: rotate(35deg); -moz-transform: rotate(35deg); -ms-transform: rotate(35deg); } .star:before{ content: &apos;&apos;; height: 0; width: 0; border-bottom: 80px solid darkkhaki; border-left: 30px solid transparent; border-right: 30px solid transparent; position: absolute; top: -56px; left: -77px; -webkit-transform: rotate(-35deg); -moz-transform: rotate(-35deg); -ms-transform: rotate(-35deg); -o-transform: rotate(-35deg); } .star:after{ content: &apos;&apos;; width: 0; height: 0; border-right: 100px solid transparent; border-bottom: 70px solid darkkhaki; border-left: 100px solid transparent; position: absolute; color: red; top: 10px; left: -115px; -webkit-transform: rotate(-70deg); -moz-transform: rotate(-70deg); -ms-transform: rotate(-70deg); -o-transform: rotate(-70deg); } 6.心形.heart{ width: 100px; height: 90px; } .heart:before, .heart:after { position: absolute; content: &apos;&apos;; width: 50px; height: 80px; background: darksalmon; border-radius: 50px 50px 0 0; left: 50px; -webkit-transform: rotate(-45deg); -o-transform: rotate(-45deg); -ms-transform: rotate(-45deg); -moz-transform: rotate(-45deg); transform: rotate(-45deg); -webkit-transform-origin: 0 100%; -moz-transform-origin: 0 100%; -ms-transform-origin: 0 100%; -o-transform-origin: 0 100%; transform-origin : 0 100%; } .heart:after{ left: 0; -webkit-transform: rotate(45deg); -o-transform: rotate(45deg); -ms-transform: rotate(45deg); -moz-transform: rotate(45deg); transform: rotate(45deg); -webkit-transform-origin: 100% 100%; -moz-transform-origin: 100% 100%; -ms-transform-origin: 100% 100%; -o-transform-origin: 100% 100%; transform-origin :100% 100%; } 7.十字架.cross{ height: 100px; width: 20px; background: mediumseagreen; margin-left: 50px; position: relative; } .cross:after{ background: mediumseagreen; content: &apos;&apos;; height: 20px; position: absolute; width: 80px; top: 30px; left: -30px; }","tags":[{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"}]},{"title":"Yilia主题优化","date":"2017-07-15T09:56:56.000Z","path":"2017/07/15/Yilia主题优化/","text":"过了大半年，该是要好好整理下自己的博客了。 github+hexo新建文章：$ hexo new &quot;新的文章&quot; 然后你就发现blog根目录下的source文件夹中的_post文件夹中多了一个 新的文章.md 文件 本地服务预览：$ hexo s //server （会监视文件变动并自动更新） 觉得自己的文章没问题后，就通过hexo g , hexo d生成和部署网页 清除缓存：$ hexo clean 生成：$ hexo g //generate 部署：$ hexo d //deploy 上面两部可以合起来 $ hexo d -g hexo所有主题传送门 markdown语法 markdownPad下载 推荐几个我觉得不错的主题： Ochuuunn / github下载 Random / github下载 安装主题$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 配置修改hexo根目录下的_config.yml ： theme : yilia 更新$ cd themes/yilia $ git pull 上面是老东西，下面是优化 添加文章目录添加css样式打开themes\\yilia\\source下的 main.2d7529.css文件(这里好像名字会不一样，没关系，找到.css文件就ok了)，在里面添加代码： /* 新添加的 */ #container .show-toc-btn,#container .toc-article{display:block} .toc-article{z-index:100;background:#fff;border:1px solid #ccc;max-width:250px;min-width:150px;max-height:500px;overflow-y:auto;-webkit-box-shadow:5px 5px 2px #ccc;box-shadow:5px 5px 2px #ccc;font-size:12px;padding:10px;position:fixed;right:35px;top:129px}.toc-article .toc-close{font-weight:700;font-size:20px;cursor:pointer;float:right;color:#ccc}.toc-article .toc-close:hover{color:#000}.toc-article .toc{font-size:12px;padding:0;line-height:20px}.toc-article .toc .toc-number{color:#333}.toc-article .toc .toc-text:hover{text-decoration:underline;color:#2a6496}.toc-article li{list-style-type:none}.toc-article .toc-level-1{margin:4px 0}.toc-article .toc-child{}@-moz-keyframes cd-bounce-1{0%{opacity:0;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)}60%{opacity:1;-o-transform:scale(1.01);-webkit-transform:scale(1.01);-moz-transform:scale(1.01);-ms-transform:scale(1.01);transform:scale(1.01)}100%{-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)}}@-webkit-keyframes cd-bounce-1{0%{opacity:0;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)}60%{opacity:1;-o-transform:scale(1.01);-webkit-transform:scale(1.01);-moz-transform:scale(1.01);-ms-transform:scale(1.01);transform:scale(1.01)}100%{-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)}}@-o-keyframes cd-bounce-1{0%{opacity:0;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)}60%{opacity:1;-o-transform:scale(1.01);-webkit-transform:scale(1.01);-moz-transform:scale(1.01);-ms-transform:scale(1.01);transform:scale(1.01)}100%{-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)}}@keyframes cd-bounce-1{0%{opacity:0;-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)}60%{opacity:1;-o-transform:scale(1.01);-webkit-transform:scale(1.01);-moz-transform:scale(1.01);-ms-transform:scale(1.01);transform:scale(1.01)}100%{-o-transform:scale(1);-webkit-transform:scale(1);-moz-transform:scale(1);-ms-transform:scale(1);transform:scale(1)}}.show-toc-btn{display:none;z-index:10;width:30px;min-height:14px;overflow:hidden;padding:4px 6px 8px 5px;border:1px solid #ddd;border-right:none;position:fixed;right:40px;text-align:center;background-color:#f9f9f9}.show-toc-btn .btn-bg{margin-top:2px;display:block;width:16px;height:14px;background:url(http://7xtawy.com1.z0.glb.clouddn.com/show.png) no-repeat;-webkit-background-size:100%;-moz-background-size:100%;background-size:100%}.show-toc-btn .btn-text{color:#999;font-size:12px}.show-toc-btn:hover{cursor:pointer}.show-toc-btn:hover .btn-bg{background-position:0 -16px}.show-toc-btn:hover .btn-text{font-size:12px;color:#ea8010} .toc-article li ol, .toc-article li ul { margin-left: 30px; } .toc-article ol, .toc-article ul { margin: 10px 0; } 修改article.ejs文件打开themes\\yilia\\layout\\_partial文件夹下的article.ejs文件，在&lt;/header&gt; &lt;% } % 下面加入如下内容(注意插入的位置): &lt;!-- 目录内容 --&gt; &lt;% if (!index &amp;&amp; post.toc){ %&gt; &lt;p class=&quot;show-toc-btn&quot; id=&quot;show-toc-btn&quot; onclick=&quot;showToc();&quot; style=&quot;display:none&quot;&gt; &lt;span class=&quot;btn-bg&quot;&gt;&lt;/span&gt; &lt;span class=&quot;btn-text&quot;&gt;文章导航&lt;/span&gt; &lt;/p&gt; &lt;div id=&quot;toc-article&quot; class=&quot;toc-article&quot;&gt; &lt;span id=&quot;toc-close&quot; class=&quot;toc-close&quot; title=&quot;隐藏导航&quot; onclick=&quot;showBtn();&quot;&gt;×&lt;/span&gt; &lt;strong class=&quot;toc-title&quot;&gt;文章目录&lt;/strong&gt; &lt;%- toc(post.content) %&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; function showToc(){ var toc_article = document.getElementById(&quot;toc-article&quot;); var show_toc_btn = document.getElementById(&quot;show-toc-btn&quot;); toc_article.setAttribute(&quot;style&quot;,&quot;display:block&quot;); show_toc_btn.setAttribute(&quot;style&quot;,&quot;display:none&quot;); }; function showBtn(){ var toc_article = document.getElementById(&quot;toc-article&quot;); var show_toc_btn = document.getElementById(&quot;show-toc-btn&quot;); toc_article.setAttribute(&quot;style&quot;,&quot;display:none&quot;); show_toc_btn.setAttribute(&quot;style&quot;,&quot;display:block&quot;); }; &lt;/script&gt; &lt;% } %&gt; &lt;!-- 目录内容结束 --&gt; 如果想要文章显示目录，要在每篇文章的开头加入：toc: true 添加其他一些东西添加“关于”$ hexo new page &quot;about&quot; 此时，source中就会多出一个文件夹，名为about,可以在里面编辑内容 在themes/yilia/_config.yml添加下面内容： menu: 关于: /about 添加RSS$ npm install hexo-generator-feed --save 注意完整的输入上面的代码，--save不能省，否则插件信息不能写入package.json，之后hexo clean 、hexo g,查看public文件夹，里面多了一个atom.xml文件夹表示成功。 添加sitemap$ npm install hexo-generator-sitemap --save hexo clean 、hexo g,查看public文件夹，可以看到sitemap.xml文件。 sitemap的初衷是给搜索引擎看的，为了提高搜索引擎对自己站点的收录效果，我们最好手动到google和百度等搜索引擎提交sitemap.xml。 添加本站访问次数在themes/yilia/layout/_partial 下找到footer.ejs , 在里面加入以下代码： &lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt; &lt;span id=&quot;busuanzi_container_page_pv&quot;&gt; 本文总阅读量&lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;次 &lt;/span&gt; 文章模板打开hexo/scaffolds/post.md , 可以看到： --- title: {{ title }} date: {{ date }} tags: --- 做以下的修改，每次自动生成目录： --- title: {{ title }} date: {{ date }} tags: toc: true ---","tags":[{"name":"hexo+github","slug":"hexo-github","permalink":"http://yoursite.com/tags/hexo-github/"}]},{"title":"JS几道小题","date":"2017-07-07T12:16:39.462Z","path":"2017/07/07/js几道小题/","text":"2017.7.6日厦门实训js作业例题1：定义两个整数变量，交换两个变量的值 &lt;script&gt; var a = prompt(&quot;请输入a的值&quot;); var b = prompt(&quot;请输入b的值&quot;); var t; t = a; //t=2 a = b; //a=3 b = t; //b=2 alert(&quot;交换后a的值：&quot; + a + &quot;,交换后b的值：&quot; + b); &lt;/script&gt; 例题２：定义三个整数变量，输出一次最大值&lt;script type=&quot;text/javascript&quot;&gt; var a = prompt(&quot;输入第一个数&quot;); var b = prompt(&quot;输入第二个数&quot;); var c = prompt(&quot;输入第三个数&quot;); var max; if(a&gt;=b){ max = a; } else { max = b; } if(max&lt;c){ max = c; } alert(&quot;最大的值是：&quot; + max); &lt;/script&gt; 例题3：输入三个数从小到大的输出&lt;script&gt; var a = prompt(&quot;输入第一个数&quot;); var b = prompt(&quot;输入第二个数&quot;); var c = prompt(&quot;输入第三个数&quot;); var min,max,mid; if(a&gt;=b){ if(b&gt;=c){ max = a;mid = b;min = c; } else{ max = a;mid = c;min = b; } } else{ //a&lt;b if(b&gt;=c){ max = b;mid = a;min = c; } else{ max = b;mid = c;min = a; } } if(max&lt;c){ if(a&gt;=b){ max = c;mid = a;min = b; } else{ max = c;mid = b;min = a; } } alert(&quot;从小到大排序：&quot; + min + &quot;&lt;&quot; + mid + &quot;&lt;&quot; + max); &lt;/script&gt; 额….这个写的不是很好，傻瓜式…以后再说 例题4：定义整数的成绩变量，按区间输出等级:&lt;script&gt; var score = prompt(&quot;输入成绩：&quot;); var sco = parseInt(score / 10); switch(sco){ case 0 : alert(&quot;不及格！&quot;); break; case 1 : alert(&quot;不及格！&quot;); break; case 2 : alert(&quot;不及格！&quot;); break; case 3 : alert(&quot;不及格！&quot;); break; case 4 : alert(&quot;不及格！&quot;); break; case 5 : alert(&quot;不及格！&quot;); break; case 6: alert(&quot;D&quot;); break; case 7: alert(&quot;C&quot;); break; case 8: alert(&quot;B&quot;); break; case 9: alert(&quot;A&quot;); break; case 10: alert(&quot;A&quot;); break; default: alert(&quot;输入有误！&quot;); break; } &lt;/script&gt; 例题5：定义一个变量表示年份，判断是否是闰年&lt;script&gt; &lt;!--闰年的条件是:能被4整除,但是不能被100整除,或者能被四百整除--&gt; var year = prompt(&quot;输入一个年份：&quot;); if((year%4==0) &amp;&amp; (year%100!==0) || (year%400==0)) { alert(year+&quot;年是闰年&quot;); } else { alert(year+&quot;年是平年&quot;); } &lt;/script&gt; 例题6：输出100以内的质数&lt;script&gt; //2,3,5,7,11,13,17,19,23... //只能被1和自己本身除 for(var n=2;n&lt;=100;n++){ for(var m=2;m&lt;n;m++){ if(n%m == 0){ break; //跳出当前循环 } } if(m&gt;=n){ document.write( n + &quot;,&quot;); } } &lt;/script&gt; 2017.7.7日厦门实训js作业 –循环语句例题1：输出乘法口诀表&lt;script&gt; var num; for(var i=1;i&lt;10;i++){ for(var j=1;j&lt;10;j++){ if(j&gt;i){ break; } else { num = i*j; document.write(j + &quot;*&quot; + i + &quot;=&quot; + num + &quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;); } } document.write(&quot;&lt;br/&gt;&quot;); } &lt;/script&gt; 例题2：输出10行10列表格&lt;button id=&quot;btn&quot;&gt;1.点击出现表格&lt;/button&gt; &lt;table id=&quot;table&quot; cellspacing=&quot;0&quot; cellpadding=&quot;10&quot; border=&quot;1&quot;&gt;&lt;/table&gt; &lt;script&gt; window.onload = function() { var btn = document.getElementById(&quot;btn&quot;); btn.onclick = out; function out(){ var table = document.getElementById(&quot;table&quot;); for(var j=1;j&lt;=10;j++){ var tr = document.createElement(&quot;tr&quot;); for(var i=1;i&lt;=10;i++){ var td = document.createElement(&quot;td&quot;); //创建元素节点eleNode td.innerHTML = i; tr.appendChild(td); //将元素节点td添加到tr中 } table.appendChild(tr); } } &lt;/script&gt; 自己在作业的基础上拓展了一下：获取任意行列的表格并输出 请输入行数：&lt;input id=&quot;rows&quot; /&gt;&lt;br/&gt;&lt;br/&gt; 请输入列数：&lt;input id=&quot;cols&quot; /&gt;&lt;br/&gt;&lt;br/&gt; &lt;button id=&quot;btn1&quot;&gt;2.点击出现你输入的表格&lt;/button&gt;&lt;br&gt;&lt;br/&gt; &lt;table id=&quot;table1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;10&quot; border=&quot;1&quot;&gt;&lt;/table&gt; &lt;script&gt; var btn1 = document.getElementById(&quot;btn1&quot;); btn1.onclick = out1; function out1(){ var table1 = document.getElementById(&quot;table1&quot;); var rows = document.getElementById(&quot;rows&quot;).value; var cols = document.getElementById(&quot;cols&quot;).value; for(var j=1;j&lt;=cols;j++){ var tr1 = document.createElement(&quot;tr&quot;); for(var i=1;i&lt;=rows;i++){ var td1 = document.createElement(&quot;td&quot;); td1.innerHTML = i; tr1.appendChild(td1); } table1.appendChild(tr1); } } &lt;/script&gt; 例题3：在上例表格中改变奇数行的背景&lt;button id=&quot;btn&quot;&gt;点击后奇数行有背景颜色&lt;/button&gt; &lt;table id=&quot;table&quot; border=&quot;1&quot; cellpadding=&quot;10px&quot; cellspacing=&quot;0&quot;&gt;&lt;/table&gt; &lt;script&gt; window.onload = function () { var btn = document.getElementById(&quot;btn&quot;); btn.onclick = out2; function out2() { var table = document.getElementById(&quot;table&quot;); for (var j = 1; j &lt;= 10; j++) { var tr = document.createElement(&quot;tr&quot;); if (j%2 != 0) { //判断是否为奇数行 tr.style.backgroundColor = &quot;red&quot;; } for (var i = 1; i &lt;= 10; i++) { var td = document.createElement(&quot;td&quot;); td.innerHTML = i; tr.appendChild(td); } table.appendChild(tr); } } } &lt;/script&gt; 例题4：输出序列1,1,2,3,5,8,13…… N个数&lt;script&gt; var a=1;b=1; if(a=1){ document.write(a + &quot; &quot;); } if(b=1){ document.write(b + &quot; &quot;); } for(var n=0;n&lt;500;n++){ n = a + b; //1+1=2 ;n=2 n=3 n=5 a = b; //a=1; a=1; a=2; a=3; b = n; //b=1 b=2; b=3; b=5; document.write(n + &quot; &quot;); } &lt;/script&gt; 此段代码不够完善…待完善 2017.7.10日厦门实训js作业例题1：动态的显示当前时间function startTime(){ var today = new Date(); var year = today.getFullYear(); var month = today.getMonth() + 1; var day = today.getDate(); var h = today.getHours(); var m = today.getMinutes(); var s = today.getSeconds(); m = checkTime(m); s = checkTime(s); document.getElementById(&quot;time&quot;).innerHTML =&quot;现在是北京时间：&quot; + year + &quot;年&quot; + month + &quot;月&quot; + day + &quot;日&quot; + &quot; &quot; + h + &quot;:&quot; + m + &quot;:&quot; + s ; t = setTimeout(function(){startTime()},500); } function checkTime(i){ if(i&lt;10){ i = &quot;0&quot; + i; } return i; } &lt;body onload=&quot;startTime()&quot;&gt; &lt;div id=&quot;time&quot;&gt;&lt;/div&gt; &lt;/body&gt; 例题2：计算器实现加减乘除（最简单的）数字1：&lt;input id=&quot;num1&quot;&gt;&lt;br/&gt;&lt;br/&gt; 数字2：&lt;input id=&quot;num2&quot;&gt;&lt;br/&gt;&lt;br/&gt; &lt;button onclick=&quot;add()&quot;&gt;加法&lt;/button&gt; &lt;button onclick=&quot;del()&quot;&gt;减法&lt;/button&gt; &lt;button onclick=&quot;mul()&quot;&gt;乘法&lt;/button&gt; &lt;button onclick=&quot;division()&quot;&gt;除法&lt;/button&gt;&lt;br/&gt;&lt;br/&gt; 结果为：&lt;input id=&quot;result&quot; value=&quot;&quot;&gt; &lt;script&gt; function add() { var num1 = document.getElementById(&quot;num1&quot;).value; var num2 = document.getElementById(&quot;num2&quot;).value; var result = parseFloat(num1) + parseFloat(num2); document.getElementById(&quot;result&quot;).value = result; } function del() { var num1 = document.getElementById(&quot;num1&quot;).value; var num2 = document.getElementById(&quot;num2&quot;).value; var result = parseFloat(num1) - parseFloat(num2); document.getElementById(&quot;result&quot;).value = result; } function mul() { var num1 = document.getElementById(&quot;num1&quot;).value; var num2 = document.getElementById(&quot;num2&quot;).value; var result = num1 * num2; document.getElementById(&quot;result&quot;).value = result; } function division() { var num1 = document.getElementById(&quot;num1&quot;).value; var num2 = document.getElementById(&quot;num2&quot;).value; var result = num1 / num2; document.getElementById(&quot;result&quot;).value = result; } &lt;/script&gt;","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"软件测试初学","date":"2017-05-24T15:12:30.000Z","path":"2017/05/24/软件测试初学/","text":"软件缺陷常见问题 统一性中英文问题 容错性互动性 用户输入信息有误时，按“确定”后，所有信息被清空(这种情况要避免) 对于所有的删除信息在删除之前都要给出是否删除确认的提示或者放弃的提示。 危险操作之前，提醒 改变数据状态，提醒 如填写资料有错误的时候，应该能够提示错误的位置，让用户知道到底是哪些地方输入的不正确 用户体验使用的提示信息要通俗易懂 兼容性： 操作系统版本 屏幕分辨率 网络类型(wifi,3G,4G) 易用性对于要求用户大量录入信息的页面，要支持Tab键的输入，Tab键的走向要一般要遵循从做左到右，从上到下的的原则 安全性： 登录网站进入其内部网页后，直接拷贝网址，然后粘贴到另一IE 窗口输入，在其他机器上看是否可以绕过登录直接访问 对于需要登录的系统，在用户不操作的一定时间内，出于安全性考虑，最好要让用户重新登录才能重新使用该系统 有些文件在ini等配置文件中写出了管理员口令密码等信息，而且是明文的!这是一个安全隐患 ！！！所有软件测试都是建立在业务之上的 等价类概念：是指把程序的输入域根据等价类原则划分成若干部分，然后从每个部分中选取少数具有代表性的数据作为测试输入数据的一种方法。 有效等价类 无效等价类 Junit单元测试测试用例不是用来证明你是对的，而是用来证明你没错。 入门：1.新建一个类： File → Java Project : name (JUnit_Test) → 在src下new Package : name (JunitTest) → new class : name (Calculator) → 敲代码： package JunitTest; public class Calculator { public int add(int a,int b){ return a+b; } public int subtract(int a,int b){ return a-b; } public int multiply(int a,int b){ return a*b; } public int divide(int a,int b){ return a/b; } } 2.导入JUnit jar包： JUnit_Test → Build Path → Add Libraries… → JUnit → Next&gt; → Finish 3.JunitTest → new : JUnit Test Case →输入测试工作区的名字 Name : (AddSubTest) , Class under test : name (Calculator) → Finish 4.运行测试用例： 右键 → Run AS → Junit Test → 结果显示，测试工作都运行通过 第一个测试用例：","tags":[{"name":"软件测试","slug":"软件测试","permalink":"http://yoursite.com/tags/软件测试/"}]},{"title":"JS实现轮播图","date":"2017-01-31T08:10:42.000Z","path":"2017/01/31/JS实现轮播图/","text":"这个轮播图是在2016年12月完成的，是我用js完成的第一个小东西。 html代码实现&lt;div id=&quot;content&quot;&gt; &lt;div id=&quot;images&quot; style=&quot;left: -600px;&quot;&gt; &lt;img src=&quot;images/5.jpg&quot;&gt; &lt;img src=&quot;images/1.jpg&quot;&gt; &lt;img src=&quot;images/2.jpg&quot;&gt; &lt;img src=&quot;images/3.jpg&quot;&gt; &lt;img src=&quot;images/4.jpg&quot;&gt; &lt;img src=&quot;images/5.jpg&quot;&gt; &lt;img src=&quot;images/1.jpg&quot;&gt; &lt;/div&gt; &lt;div id=&quot;circle&quot;&gt; &lt;span class=&quot;on&quot; index=&quot;1&quot;&gt;&lt;/span&gt; &lt;span index=&quot;2&quot;&gt;&lt;/span&gt; &lt;span index=&quot;3&quot;&gt;&lt;/span&gt; &lt;span index=&quot;4&quot;&gt;&lt;/span&gt; &lt;span index=&quot;5&quot;&gt;&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;btn&quot; id=&quot;btn_l&quot;&gt;&amp;lt;&lt;/div&gt; &lt;div class=&quot;btn&quot; id=&quot;btn_r&quot;&gt;&amp;gt;&lt;/div&gt; &lt;/div&gt; css部分代码实现 1.”content” 处设置相对位置：position:relative; 图片展示为只显示一张图片，所以溢出content容器部分使用属性：overflow:hidden; 2.左、右按钮部分代码： position: relative; cursor: pointer; //鼠标移上去，显示手指妆 height: 50px; width: 30px; background: rgba(0,0,0,0.3); top: 50%; font-size: 40px; text-align: center; line-height: 50px; display: none; //当鼠标移上去时，btn出现 color: #fff; javascript部分代码实现点击&lt; &gt;按钮让图片左右移动function animate(offset){ var newLeft = parseInt(images.style.left) + offset; images.style.left = newLeft + &apos;px&apos;; if (newLeft&lt;-3000) { images.style.left = -600 + &apos;px&apos;; } if (newLeft&gt;-600) { images.style.left = -3000 + &apos;px&apos;; } } btn_l.onclick=function(){ animate(600); } btn_r.onclick=function(){ animate(-600); } if循环语句是实现图片无限循环； 这时，轮播图可以实现左右点击，图片相应变化的功能。 设置轮播图的定时器var timer; function play(){ timer = setInterval(function() { btn_r.onclick() },3000) //每3000ms图片自动移动 } play(); 使用setIntervel()设置定时器。 清除轮播图的定时器function stop() { clearInterval(timer); } content.onmouseover = stop; content.onmouseout = play; 图片自动移动时，当把鼠标悬停在content内时，图片暂停移动。 小圆点随图片变化相应变化function showCircle(){ for (var i=0;i&lt;circle.length;i++){ if(circle[i].className==&apos;on&apos;){ circle[i].className=&apos;&apos;; } } circle[index-1].className=&apos;on&apos;; } for循环用来清除之前circle的样式； 这时，点击&lt; &gt; 按钮小圆点会随图片相应点亮。 for (var i=0;i&lt;circle.length;i++){ circle[i].onclick=function(){ var clickIndex=parseInt(this.getAttribute(&apos;index&apos;)); var offset=600*(index-clickIndex); animate(offset); index=clickIndex; showCircle(); } } 利用getAttribute(‘’)获取自定义index，之后 btn_l.onclick=function(){ index -= 1; if(index&lt;1){ index=5; } showCircle(); animate(600); } btn_r.onclick=function(){ index += 1; if(index&gt;5){ index=1; } showCircle(); animate(-600); }","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"用github+hexo搭建博客","date":"2017-01-30T14:44:59.000Z","path":"2017/01/30/用github-hexo搭建博客/","text":"2016年月底第一次正式开始搭建博客，在学长和另一个小伙伴的帮助下，我初次认识github+hexo，被它给吸引。寒假开始后，就在准备换主题，因为我对原始主题实在无爱，强迫症越来越严重的我，不换好主题坚持不做笔记（无奈脸）。刚刚换好主题的我，觉得之前自己用了好几个晚上都没有换好主题的自己简直是傻bi（给自己一个黑人问号），不过好在自己现在换好了主题，赶紧做笔记，谨防自己忘了。 清除，生成，部署123$ hexo clean or(hexo c)$ hexo generate$ hexo deploy 谨记：每次更改了一些信息后都要用这三步进行部署 安装yilia主题1$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 安装好后，在_config.yml下修改theme：landscape为theme：yilia 写文章 找到blog ☞ sources ☞ _post ☞ 写博客 博客开头格式(以下为例子)：title: xxxdata: xxxx-xx-xxtags: xxxx 如果文章较长，如果全都在主页显示，就会很累赘，浏览也不是很方便，那么就可以在每篇文章中加入&lt;!--more--&gt; 文章写好直接执行下面命令即可直接发布文章$ hexo d -g 注意1.常用命令： hexo new “post name” （新建文章） hexo help （查看帮助） hexo version （查看hexo的版本） 2.Markdown语法参考链接： 链接 ● Hexo主题Yilia","tags":[{"name":"hexo+github","slug":"hexo-github","permalink":"http://yoursite.com/tags/hexo-github/"}]},{"title":"Hello World","date":"2016-12-27T10:23:59.706Z","path":"2016/12/27/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"hexo+github","slug":"hexo-github","permalink":"http://yoursite.com/tags/hexo-github/"}]}]